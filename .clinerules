# Novamind Digital Twin: Psychiatric Platform Architecture - Backend Only

## Clean Architecture
- **No patches, no legacy code, delete legacy code as you go, no adapters, no backward compatibility, just pure forward-focused clean code**
- **Follow Robert C. Martin, GOF, SOLID, DRY Principles of CLEAN CODE with the BEST DESIGN PATTERN IMPLEMENTATIONS IN EVERY VERTICAL SLICE OR DOMAIN**
- **Domain**: Pure business logic with no external dependencies
- **Application**: Use cases, services, state management
- **Infrastructure**: External services, API clients, databases
- **API**: FastAPI routes and endpoints
- **Core**: Cross-cutting concerns, shared utilities

## Backend Design Principles
- **No patches, no legacy code, delete legacy code as you go, no adapters, no backward compatibility, just pure forward-focused clean code**
- **Follow Robert C. Martin, GOF, SOLID, DRY Principles of CLEAN CODE with the BEST DESIGN PATTERN IMPLEMENTATIONS IN EVERY VERTICAL SLICE OR DOMAIN**
- **Single Responsibility**: Each module handles one specific concern
- **Dependency Inversion**: High-level modules don't depend on low-level modules
- **Explicit Dependencies**: Dependencies are injected, not imported directly
- **Repository Pattern**: Data access through abstract repository interfaces
- **Service Layer**: Business logic encapsulated in service classes
- **Type Hints**: All Python code uses type annotations

## HIPAA Compliance
- **No patches, no legacy code, delete legacy code as you go, no adapters, no backward compatibility, just pure forward-focused clean code**
- **Follow Robert C. Martin, GOF, SOLID, DRY Principles of CLEAN CODE with the BEST DESIGN PATTERN IMPLEMENTATIONS IN EVERY VERTICAL SLICE OR DOMAIN**
- **No PHI in URLs**: POST only for sensitive data
- **Secure Storage**: Encrypted data at rest
- **Auto-Logout**: Implement timeouts for inactive sessions
- **Audit Logging**: Track all data access in compliance with regulations
- **Error Handling**: No PHI in logs/error messages
- **Authentication**: Strong authentication mechanisms
- **Authorization**: Role-based access control for all resources

## Data Security
- **No patches, no legacy code, delete legacy code as you go, no adapters, no backward compatibility, just pure forward-focused clean code**
- **Follow Robert C. Martin, GOF, SOLID, DRY Principles of CLEAN CODE with the BEST DESIGN PATTERN IMPLEMENTATIONS IN EVERY VERTICAL SLICE OR DOMAIN**
- **Input Validation**: Validate all user inputs
- **Parameter Validation**: Use Pydantic models for request validation
- **Output Sanitization**: Ensure no sensitive data in responses
- **Database Security**: Parameterized queries only (no string concatenation)
- **Encryption**: TLS for data in transit, encryption for data at rest

## API Design
- **No patches, no legacy code, delete legacy code as you go, no adapters, no backward compatibility, just pure forward-focused clean code**
- **Follow Robert C. Martin, GOF, SOLID, DRY Principles of CLEAN CODE with the BEST DESIGN PATTERN IMPLEMENTATIONS IN EVERY VERTICAL SLICE OR DOMAIN**
- **RESTful**: Follow REST principles for API design
- **Versioning**: Versioned API endpoints
- **Documentation**: OpenAPI/Swagger documentation
- **Rate Limiting**: Protect APIs from abuse
- **Response Formats**: Consistent JSON structure

## Testing
- **No patches, no legacy code, delete legacy code as you go, no adapters, no backward compatibility, just pure forward-focused clean code**
- **Follow Robert C. Martin, GOF, SOLID, DRY Principles of CLEAN CODE with the BEST DESIGN PATTERN IMPLEMENTATIONS IN EVERY VERTICAL SLICE OR DOMAIN**
- **Unit Tests**: For business logic and services
- **Integration Tests**: For API endpoints and repositories
- **Security Tests**: For authentication and authorization
- **Performance Tests**: For critical endpoints
- **Test Coverage**: Maintain high test coverage

## Reference Documentation
- **No patches, no legacy code, delete legacy code as you go, no adapters, no backward compatibility, just pure forward-focused clean code**
- **Follow Robert C. Martin, GOF, SOLID, DRY Principles of CLEAN CODE with the BEST DESIGN PATTERN IMPLEMENTATIONS IN EVERY VERTICAL SLICE OR DOMAIN**
- Read all /docs/