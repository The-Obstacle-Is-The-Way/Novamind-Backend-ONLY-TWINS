{
  "code_phi": [
    {
      "file": "app/infrastructure/logging/audit_logger.py",
      "phi_type": "NAME",
      "evidence": "Compliant Audit",
      "context": "\"\"\"\nHIPAA-Compliant Audit Logging\n\nThis module provides comprehensive audit logging for HIPAA compliance,\ntracking all access to and"
    },
    {
      "file": "app/infrastructure/logging/audit_logger.py",
      "phi_type": "NAME",
      "evidence": "Protected Health",
      "context": "IPAA-Compliant Audit Logging\n\nThis module provides comprehensive audit logging for HIPAA compliance,\ntracking all access to and modifications of Protected Health Information (PHI).\n\"\"\"\n\nimport datetime\nimport hashlib\nimport hmac\nimport json\nimport os\nimport uuid\nfrom pathlib impo"
    },
    {
      "file": "app/infrastructure/logging/phi_logger.py",
      "phi_type": "NAME",
      "evidence": "Protected Health",
      "context": "\"\"\"\nHIPAA-Compliant PHI Logger\n\nThis module provides specialized logging for handling Protected Health Information (PHI),\nensuring HIPAA compliance by automatically sanitizing sensitive data.\n\"\"\"\n\nimport datetime\nimport l"
    },
    {
      "file": "app/infrastructure/di/container.py",
      "phi_type": "NAME",
      "evidence": "Dependency Injection",
      "context": "\"\"\"\nNOVAMIND Dependency Injection Container\n=====================================\nImplements a clean dependency injection pattern for the NOVAM"
    },
    {
      "file": "app/infrastructure/di/container.py",
      "phi_type": "NAME",
      "evidence": "Clean Architecture",
      "context": "=========================\nImplements a clean dependency injection pattern for the NOVAMIND platform.\nFollows SOLID principles and Clean Architecture by centralizing dependency management.\n\"\"\"\n\nimport inspect\nfrom functools import lru_cache\nfrom typing import Any, Callable, Dict, Generic"
    },
    {
      "file": "app/infrastructure/di/container.py",
      "phi_type": "NAME",
      "evidence": "Dependency Injection",
      "context": "\"\"\"\nNOVAMIND Dependency Injection Container\n=====================================\nImplements a clean dependency injection pattern for the NOVAM"
    },
    {
      "file": "app/infrastructure/di/container.py",
      "phi_type": "NAME",
      "evidence": "Service Locator",
      "context": ")\n\n\nclass DIContainer:\n    \"\"\"\n    Dependency Injection Container for managing service dependencies.\n    Implements the Service Locator pattern in a clean, type-safe way.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"Initialize the container with empty registrations.\"\"\""
    },
    {
      "file": "app/infrastructure/di/container.py",
      "phi_type": "NAME",
      "evidence": "Dependency Injection",
      "context": "\"\"\"\nNOVAMIND Dependency Injection Container\n=====================================\nImplements a clean dependency injection pattern for the NOVAM"
    },
    {
      "file": "app/infrastructure/di/container.py",
      "phi_type": "NAME",
      "evidence": "Dependency Injection",
      "context": "\"\"\"\nNOVAMIND Dependency Injection Container\n=====================================\nImplements a clean dependency injection pattern for the NOVAM"
    },
    {
      "file": "app/infrastructure/ml/digital_twin_integration_service.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "\"\"\"\nDigital Twin Integration Service for NOVAMIND.\n\nThis module implements the integration service that connects all ML microservices\ntogether to prov"
    },
    {
      "file": "app/infrastructure/ml/digital_twin_integration_service.py",
      "phi_type": "NAME",
      "evidence": "Integration Service",
      "context": "\"\"\"\nDigital Twin Integration Service for NOVAMIND.\n\nThis module implements the integration service that connects all ML microservices\ntogether to prov"
    },
    {
      "file": "app/infrastructure/ml/digital_twin_integration_service.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "\"\"\"\nDigital Twin Integration Service for NOVAMIND.\n\nThis module implements the integration service that connects all ML microservices\ntogether to prov"
    },
    {
      "file": "app/infrastructure/ml/digital_twin_integration_service.py",
      "phi_type": "NAME",
      "evidence": "Clean Architecture",
      "context": "cts all ML microservices\ntogether to provide a unified interface for the Digital Twin functionality,\nfollowing Clean Architecture principles and ensuring HIPAA compliance.\n\"\"\"\n\nimport asyncio\nimport json\nimport logging\nimport os\nfrom datetime import datetime, timedelta\nf"
    },
    {
      "file": "app/infrastructure/ml/digital_twin_integration_service.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "\"\"\"\nDigital Twin Integration Service for NOVAMIND.\n\nThis module implements the integration service that connects all ML microservices\ntogether to prov"
    },
    {
      "file": "app/infrastructure/ml/digital_twin_integration_service.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "\"\"\"\nDigital Twin Integration Service for NOVAMIND.\n\nThis module implements the integration service that connects all ML microservices\ntogether to prov"
    },
    {
      "file": "app/infrastructure/ml/digital_twin_integration_service.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "\"\"\"\nDigital Twin Integration Service for NOVAMIND.\n\nThis module implements the integration service that connects all ML microservices\ntogether to prov"
    },
    {
      "file": "app/infrastructure/ml/digital_twin_integration_service.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "\"\"\"\nDigital Twin Integration Service for NOVAMIND.\n\nThis module implements the integration service that connects all ML microservices\ntogether to prov"
    },
    {
      "file": "app/infrastructure/ml/digital_twin_integration_service.py",
      "phi_type": "NAME",
      "evidence": "Integration Service",
      "context": "\"\"\"\nDigital Twin Integration Service for NOVAMIND.\n\nThis module implements the integration service that connects all ML microservices\ntogether to prov"
    },
    {
      "file": "app/infrastructure/ml/digital_twin_integration_service.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "\"\"\"\nDigital Twin Integration Service for NOVAMIND.\n\nThis module implements the integration service that connects all ML microservices\ntogether to prov"
    },
    {
      "file": "app/infrastructure/ml/digital_twin_integration_service.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "\"\"\"\nDigital Twin Integration Service for NOVAMIND.\n\nThis module implements the integration service that connects all ML microservices\ntogether to prov"
    },
    {
      "file": "app/infrastructure/ml/digital_twin_integration_service.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "\"\"\"\nDigital Twin Integration Service for NOVAMIND.\n\nThis module implements the integration service that connects all ML microservices\ntogether to prov"
    },
    {
      "file": "app/infrastructure/ml/digital_twin_integration_service.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "\"\"\"\nDigital Twin Integration Service for NOVAMIND.\n\nThis module implements the integration service that connects all ML microservices\ntogether to prov"
    },
    {
      "file": "app/infrastructure/ml/digital_twin_integration_service.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "\"\"\"\nDigital Twin Integration Service for NOVAMIND.\n\nThis module implements the integration service that connects all ML microservices\ntogether to prov"
    },
    {
      "file": "app/infrastructure/ml/digital_twin_integration_service.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "\"\"\"\nDigital Twin Integration Service for NOVAMIND.\n\nThis module implements the integration service that connects all ML microservices\ntogether to prov"
    },
    {
      "file": "app/infrastructure/ml/digital_twin_integration_service.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "\"\"\"\nDigital Twin Integration Service for NOVAMIND.\n\nThis module implements the integration service that connects all ML microservices\ntogether to prov"
    },
    {
      "file": "app/infrastructure/ml/digital_twin_integration_service.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "\"\"\"\nDigital Twin Integration Service for NOVAMIND.\n\nThis module implements the integration service that connects all ML microservices\ntogether to prov"
    },
    {
      "file": "app/infrastructure/ml/digital_twin_integration_service.py",
      "phi_type": "NAME",
      "evidence": "Integration Service",
      "context": "\"\"\"\nDigital Twin Integration Service for NOVAMIND.\n\nThis module implements the integration service that connects all ML microservices\ntogether to prov"
    },
    {
      "file": "app/infrastructure/ml/adapters.py",
      "phi_type": "NAME",
      "evidence": "Clean Architecture",
      "context": "ces in NOVAMIND.\n\nThis module implements adapter classes that connect the infrastructure ML services\nto the domain interfaces, following Clean Architecture principles and ensuring\nproper separation of concerns.\n\"\"\"\n\nimport logging\nfrom datetime import datetime\nfrom typing import"
    },
    {
      "file": "app/infrastructure/ml/adapters.py",
      "phi_type": "NAME",
      "evidence": "Symptom Forecasting",
      "context": "SymptomForecastingService,\n)\n\n\nclass SymptomForecastingAdapter(SymptomForecastingInterface):\n    \"\"\"\n    Adapter for the Symptom Forecasting Service.\n\n    This adapter implements the SymptomForecastingInterface and delegates\n    calls to the infrast"
    },
    {
      "file": "app/infrastructure/ml/adapters.py",
      "phi_type": "NAME",
      "evidence": "Biometric Correlation",
      "context": "model_status(patient_id)\n\n\nclass BiometricCorrelationAdapter(BiometricCorrelationInterface):\n    \"\"\"\n    Adapter for the Biometric Correlation Service.\n\n    This adapter implements the BiometricCorrelationInterface and delegates\n    calls to the infra"
    },
    {
      "file": "app/infrastructure/ml/adapters.py",
      "phi_type": "NAME",
      "evidence": "Pharmacogenomics Service",
      "context": "ice.get_model_status(patient_id)\n\n\nclass PharmacogenomicsAdapter(PharmacogenomicsInterface):\n    \"\"\"\n    Adapter for the Pharmacogenomics Service.\n\n    This adapter implements the PharmacogenomicsInterface and delegates\n    calls to the infrastru"
    },
    {
      "file": "app/infrastructure/ml/adapters.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "rrent_medications,\n        )\n\n\nclass DigitalTwinServiceAdapter(DigitalTwinServiceInterface):\n    \"\"\"\n    Adapter for the Digital Twin Integration Service.\n\n    This adapter implements the DigitalTwinServiceInterface and delegates\n    calls to the infrast"
    },
    {
      "file": "app/infrastructure/ml/adapters.py",
      "phi_type": "NAME",
      "evidence": "Integration Service",
      "context": "rrent_medications,\n        )\n\n\nclass DigitalTwinServiceAdapter(DigitalTwinServiceInterface):\n    \"\"\"\n    Adapter for the Digital Twin Integration Service.\n\n    This adapter implements the DigitalTwinServiceInterface and delegates\n    calls to the infrast"
    },
    {
      "file": "app/infrastructure/ml/adapters.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "rrent_medications,\n        )\n\n\nclass DigitalTwinServiceAdapter(DigitalTwinServiceInterface):\n    \"\"\"\n    Adapter for the Digital Twin Integration Service.\n\n    This adapter implements the DigitalTwinServiceInterface and delegates\n    calls to the infrast"
    },
    {
      "file": "app/infrastructure/ml/adapters.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "rrent_medications,\n        )\n\n\nclass DigitalTwinServiceAdapter(DigitalTwinServiceInterface):\n    \"\"\"\n    Adapter for the Digital Twin Integration Service.\n\n    This adapter implements the DigitalTwinServiceInterface and delegates\n    calls to the infrast"
    },
    {
      "file": "app/infrastructure/ml/adapters.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "rrent_medications,\n        )\n\n\nclass DigitalTwinServiceAdapter(DigitalTwinServiceInterface):\n    \"\"\"\n    Adapter for the Digital Twin Integration Service.\n\n    This adapter implements the DigitalTwinServiceInterface and delegates\n    calls to the infrast"
    },
    {
      "file": "app/infrastructure/ml/base/__init__.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "L models in the NOVAMIND system.\n\nThis module contains base classes and interfaces for all ML models\nused in the Digital Twin system, ensuring consistent implementation\nand HIPAA compliance across all ML services.\n\"\"\""
    },
    {
      "file": "app/infrastructure/ml/base/model_metrics.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "he NOVAMIND system.\n\nThis module provides utilities for calculating and tracking performance metrics\nfor machine learning models used in the Digital Twin system, ensuring consistent\nevaluation across all ML services.\n\"\"\"\n\nfrom typing import Any, Dict, List, Optional, Tuple, Union"
    },
    {
      "file": "app/infrastructure/ml/base/model_metrics.py",
      "phi_type": "NAME",
      "evidence": "Symmetric Mean",
      "context": "(np.abs((y_true - y_pred) / np.maximum(np.abs(y_true), 1e-10)))\n                * 100\n            )\n\n            # Symmetric Mean Absolute Percentage Error (handles zero values better)\n            denominator = np.maximum(np.abs(y_true) + np.abs(y_pred), 1e-10)\n            results[\"s"
    },
    {
      "file": "app/infrastructure/ml/base/model_metrics.py",
      "phi_type": "NAME",
      "evidence": "Absolute Percentage",
      "context": "(np.abs((y_true - y_pred) / np.maximum(np.abs(y_true), 1e-10)))\n                * 100\n            )\n\n            # Symmetric Mean Absolute Percentage Error (handles zero values better)\n            denominator = np.maximum(np.abs(y_true) + np.abs(y_pred), 1e-10)\n            results[\"s"
    },
    {
      "file": "app/infrastructure/ml/base/base_model.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "the NOVAMIND system.\n\nThis module provides a standardized interface for all machine learning models\nused in the Digital Twin system, ensuring consistent implementation and\nHIPAA compliance across all ML services.\n\"\"\"\n\nimport logging\nfrom abc import ABC, abstractmethod\nfr"
    },
    {
      "file": "app/infrastructure/ml/biometric_correlation/lstm_model.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "\"\"\"\nLSTM-based biometric correlation model for the NOVAMIND Digital Twin.\n\nThis module implements a deep learning model for correlating biometric data\nwith mental health ind"
    },
    {
      "file": "app/infrastructure/ml/biometric_correlation/lstm_model.py",
      "phi_type": "NAME",
      "evidence": "Models Core",
      "context": "or correlating biometric data\nwith mental health indicators, following the architecture described in\nthe AI Models Core Implementation documentation.\n\"\"\"\n\nimport logging\nfrom datetime import datetime\nfrom typing import Any, Dict, List, Optional, Tup"
    },
    {
      "file": "app/infrastructure/ml/biometric_correlation/lstm_model.py",
      "phi_type": "NAME",
      "evidence": "Biometric Correlation",
      "context": "t = self.fc(context)\n\n        return output, attn_weights\n\n\nclass BiometricCorrelationModel:\n    \"\"\"\n    High-level wrapper for the Biometric Correlation LSTM model.\n\n    This class provides an interface for the domain layer to interact with\n    the LSTM model for"
    },
    {
      "file": "app/infrastructure/ml/biometric_correlation/model_service.py",
      "phi_type": "NAME",
      "evidence": "Biometric Correlation",
      "context": "\"\"\"\nBiometric Correlation Model Service for the NOVAMIND Digital Twin.\n\nThis module implements the service layer for the Biometric Correlation microservice,\nproviding ana"
    },
    {
      "file": "app/infrastructure/ml/biometric_correlation/model_service.py",
      "phi_type": "NAME",
      "evidence": "Model Service",
      "context": "\"\"\"\nBiometric Correlation Model Service for the NOVAMIND Digital Twin.\n\nThis module implements the service layer for the Biometric Correlation microservice,\nproviding ana"
    },
    {
      "file": "app/infrastructure/ml/biometric_correlation/model_service.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "\"\"\"\nBiometric Correlation Model Service for the NOVAMIND Digital Twin.\n\nThis module implements the service layer for the Biometric Correlation microservice,\nproviding ana"
    },
    {
      "file": "app/infrastructure/ml/biometric_correlation/model_service.py",
      "phi_type": "NAME",
      "evidence": "Biometric Correlation",
      "context": "\"\"\"\nBiometric Correlation Model Service for the NOVAMIND Digital Twin.\n\nThis module implements the service layer for the Biometric Correlation microservice,\nproviding ana"
    },
    {
      "file": "app/infrastructure/ml/biometric_correlation/model_service.py",
      "phi_type": "NAME",
      "evidence": "Clean Architecture",
      "context": "croservice,\nproviding analysis of relationships between biometric data and mental health indicators,\nfollowing Clean Architecture principles and HIPAA compliance requirements.\n\"\"\"\n\nimport asyncio\nimport json\nimport logging\nimport os\nfrom datetime import datetime, timedelta\nf"
    },
    {
      "file": "app/infrastructure/ml/biometric_correlation/model_service.py",
      "phi_type": "NAME",
      "evidence": "Biometric Correlation",
      "context": "\"\"\"\nBiometric Correlation Model Service for the NOVAMIND Digital Twin.\n\nThis module implements the service layer for the Biometric Correlation microservice,\nproviding ana"
    },
    {
      "file": "app/infrastructure/ml/biometric_correlation/model_service.py",
      "phi_type": "NAME",
      "evidence": "Biometric Correlation",
      "context": "\"\"\"\nBiometric Correlation Model Service for the NOVAMIND Digital Twin.\n\nThis module implements the service layer for the Biometric Correlation microservice,\nproviding ana"
    },
    {
      "file": "app/infrastructure/ml/biometric_correlation/model_service.py",
      "phi_type": "NAME",
      "evidence": "Biometric Correlation",
      "context": "\"\"\"\nBiometric Correlation Model Service for the NOVAMIND Digital Twin.\n\nThis module implements the service layer for the Biometric Correlation microservice,\nproviding ana"
    },
    {
      "file": "app/infrastructure/ml/symptom_forecasting/xgboost_model.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "\"\"\"\nXGBoost-based symptom forecasting model for the NOVAMIND Digital Twin.\n\nThis module implements an XGBoost model with Bayesian Hyperparameter Optimization\nfor psychiatric"
    },
    {
      "file": "app/infrastructure/ml/symptom_forecasting/xgboost_model.py",
      "phi_type": "NAME",
      "evidence": "Bayesian Hyperparameter",
      "context": "\"\"\"\nXGBoost-based symptom forecasting model for the NOVAMIND Digital Twin.\n\nThis module implements an XGBoost model with Bayesian Hyperparameter Optimization\nfor psychiatric symptom forecasting, following the architecture described in\nthe AI Models Core Imp"
    },
    {
      "file": "app/infrastructure/ml/symptom_forecasting/xgboost_model.py",
      "phi_type": "NAME",
      "evidence": "Models Core",
      "context": "rparameter Optimization\nfor psychiatric symptom forecasting, following the architecture described in\nthe AI Models Core Implementation documentation.\n\"\"\"\n\nimport logging\nimport os\nfrom datetime import datetime\nfrom typing import Any, Dict, List, Opt"
    },
    {
      "file": "app/infrastructure/ml/symptom_forecasting/xgboost_model.py",
      "phi_type": "NAME",
      "evidence": "Bayesian Hyperparameter",
      "context": "\"\"\"\nXGBoost-based symptom forecasting model for the NOVAMIND Digital Twin.\n\nThis module implements an XGBoost model with Bayesian Hyperparameter Optimization\nfor psychiatric symptom forecasting, following the architecture described in\nthe AI Models Core Imp"
    },
    {
      "file": "app/infrastructure/ml/symptom_forecasting/ensemble_model.py",
      "phi_type": "NAME",
      "evidence": "Clean Architecture",
      "context": "ransformer-based and\nXGBoost models for improved psychiatric symptom forecasting accuracy, following\nClean Architecture principles and ensuring HIPAA compliance.\n\"\"\"\n\nimport json\nimport logging\nimport os\nfrom datetime import datetime, timedelta\nfrom typing impo"
    },
    {
      "file": "app/infrastructure/ml/symptom_forecasting/model_service.py",
      "phi_type": "NAME",
      "evidence": "Symptom Forecasting",
      "context": "\"\"\"\nSymptom Forecasting Model Service for the NOVAMIND Digital Twin.\n\nThis module implements the service layer for the Symptom Forecasting microservice,\nproviding an en"
    },
    {
      "file": "app/infrastructure/ml/symptom_forecasting/model_service.py",
      "phi_type": "NAME",
      "evidence": "Model Service",
      "context": "\"\"\"\nSymptom Forecasting Model Service for the NOVAMIND Digital Twin.\n\nThis module implements the service layer for the Symptom Forecasting microservice,\nproviding an en"
    },
    {
      "file": "app/infrastructure/ml/symptom_forecasting/model_service.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "\"\"\"\nSymptom Forecasting Model Service for the NOVAMIND Digital Twin.\n\nThis module implements the service layer for the Symptom Forecasting microservice,\nproviding an en"
    },
    {
      "file": "app/infrastructure/ml/symptom_forecasting/model_service.py",
      "phi_type": "NAME",
      "evidence": "Symptom Forecasting",
      "context": "\"\"\"\nSymptom Forecasting Model Service for the NOVAMIND Digital Twin.\n\nThis module implements the service layer for the Symptom Forecasting microservice,\nproviding an en"
    },
    {
      "file": "app/infrastructure/ml/symptom_forecasting/model_service.py",
      "phi_type": "NAME",
      "evidence": "Clean Architecture",
      "context": "ng microservice,\nproviding an ensemble of models for psychiatric symptom prediction with uncertainty\nquantification, following Clean Architecture principles.\n\"\"\"\n\nimport asyncio\nimport json\nimport logging\nimport os\nfrom datetime import datetime, timedelta\nf"
    },
    {
      "file": "app/infrastructure/ml/symptom_forecasting/model_service.py",
      "phi_type": "NAME",
      "evidence": "Symptom Forecasting",
      "context": "\"\"\"\nSymptom Forecasting Model Service for the NOVAMIND Digital Twin.\n\nThis module implements the service layer for the Symptom Forecasting microservice,\nproviding an en"
    },
    {
      "file": "app/infrastructure/ml/symptom_forecasting/model_service.py",
      "phi_type": "NAME",
      "evidence": "Symptom Forecasting",
      "context": "\"\"\"\nSymptom Forecasting Model Service for the NOVAMIND Digital Twin.\n\nThis module implements the service layer for the Symptom Forecasting microservice,\nproviding an en"
    },
    {
      "file": "app/infrastructure/ml/symptom_forecasting/model_service.py",
      "phi_type": "NAME",
      "evidence": "Symptom Forecasting",
      "context": "\"\"\"\nSymptom Forecasting Model Service for the NOVAMIND Digital Twin.\n\nThis module implements the service layer for the Symptom Forecasting microservice,\nproviding an en"
    },
    {
      "file": "app/infrastructure/ml/symptom_forecasting/transformer_model.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "\"\"\"\nTransformer-based symptom forecasting model for the NOVAMIND Digital Twin.\n\nThis module implements a Multi-Horizon Transformer with Quantile Regression\nfor psychiatric sympto"
    },
    {
      "file": "app/infrastructure/ml/symptom_forecasting/transformer_model.py",
      "phi_type": "NAME",
      "evidence": "Horizon Transformer",
      "context": "\"\"\"\nTransformer-based symptom forecasting model for the NOVAMIND Digital Twin.\n\nThis module implements a Multi-Horizon Transformer with Quantile Regression\nfor psychiatric symptom forecasting, following the architecture described in\nthe AI Models Core Imp"
    },
    {
      "file": "app/infrastructure/ml/symptom_forecasting/transformer_model.py",
      "phi_type": "NAME",
      "evidence": "Quantile Regression",
      "context": "\"\"\"\nTransformer-based symptom forecasting model for the NOVAMIND Digital Twin.\n\nThis module implements a Multi-Horizon Transformer with Quantile Regression\nfor psychiatric symptom forecasting, following the architecture described in\nthe AI Models Core Imp"
    },
    {
      "file": "app/infrastructure/ml/symptom_forecasting/transformer_model.py",
      "phi_type": "NAME",
      "evidence": "Models Core",
      "context": "ith Quantile Regression\nfor psychiatric symptom forecasting, following the architecture described in\nthe AI Models Core Implementation documentation.\n\"\"\"\n\nfrom datetime import datetime\nfrom typing import Any, Dict, List, Optional, Tuple\n\nimport nump"
    },
    {
      "file": "app/infrastructure/ml/symptom_forecasting/transformer_model.py",
      "phi_type": "NAME",
      "evidence": "Horizon Transformer",
      "context": "\"\"\"\nTransformer-based symptom forecasting model for the NOVAMIND Digital Twin.\n\nThis module implements a Multi-Horizon Transformer with Quantile Regression\nfor psychiatric symptom forecasting, following the architecture described in\nthe AI Models Core Imp"
    },
    {
      "file": "app/infrastructure/ml/symptom_forecasting/transformer_model.py",
      "phi_type": "NAME",
      "evidence": "Quantile Regression",
      "context": "\"\"\"\nTransformer-based symptom forecasting model for the NOVAMIND Digital Twin.\n\nThis module implements a Multi-Horizon Transformer with Quantile Regression\nfor psychiatric symptom forecasting, following the architecture described in\nthe AI Models Core Imp"
    },
    {
      "file": "app/infrastructure/ml/symptom_forecasting/transformer_model.py",
      "phi_type": "NAME",
      "evidence": "Models Core",
      "context": "ith Quantile Regression\nfor psychiatric symptom forecasting, following the architecture described in\nthe AI Models Core Implementation documentation.\n\"\"\"\n\nfrom datetime import datetime\nfrom typing import Any, Dict, List, Optional, Tuple\n\nimport nump"
    },
    {
      "file": "app/infrastructure/ml/symptom_forecasting/transformer_model.py",
      "phi_type": "NAME",
      "evidence": "Initialize Multi",
      "context": ",\n        dropout: float = 0.1,\n        quantiles: List[float] = [0.1, 0.5, 0.9],\n    ):\n        \"\"\"\n        Initialize Multi-Horizon Transformer model.\n\n        Args:\n            input_dim: Dimension of the input features\n            output_dim: Dimen"
    },
    {
      "file": "app/infrastructure/ml/symptom_forecasting/transformer_model.py",
      "phi_type": "NAME",
      "evidence": "Horizon Transformer",
      "context": "\"\"\"\nTransformer-based symptom forecasting model for the NOVAMIND Digital Twin.\n\nThis module implements a Multi-Horizon Transformer with Quantile Regression\nfor psychiatric symptom forecasting, following the architecture described in\nthe AI Models Core Imp"
    },
    {
      "file": "app/infrastructure/ml/symptom_forecasting/transformer_model.py",
      "phi_type": "NAME",
      "evidence": "Horizon Transformer",
      "context": "\"\"\"\nTransformer-based symptom forecasting model for the NOVAMIND Digital Twin.\n\nThis module implements a Multi-Horizon Transformer with Quantile Regression\nfor psychiatric symptom forecasting, following the architecture described in\nthe AI Models Core Imp"
    },
    {
      "file": "app/infrastructure/ml/symptom_forecasting/transformer_model.py",
      "phi_type": "NAME",
      "evidence": "Horizon Transformer",
      "context": "\"\"\"\nTransformer-based symptom forecasting model for the NOVAMIND Digital Twin.\n\nThis module implements a Multi-Horizon Transformer with Quantile Regression\nfor psychiatric symptom forecasting, following the architecture described in\nthe AI Models Core Imp"
    },
    {
      "file": "app/infrastructure/ml/symptom_forecasting/transformer_model.py",
      "phi_type": "NAME",
      "evidence": "Quantile Regression",
      "context": "\"\"\"\nTransformer-based symptom forecasting model for the NOVAMIND Digital Twin.\n\nThis module implements a Multi-Horizon Transformer with Quantile Regression\nfor psychiatric symptom forecasting, following the architecture described in\nthe AI Models Core Imp"
    },
    {
      "file": "app/infrastructure/ml/symptom_forecasting/service.py",
      "phi_type": "NAME",
      "evidence": "Symptom Forecasting",
      "context": "\"\"\"\nNOVAMIND Symptom Forecasting Service\n======================================\nImplements the symptom forecasting microservice for psychiat"
    },
    {
      "file": "app/infrastructure/ml/symptom_forecasting/service.py",
      "phi_type": "NAME",
      "evidence": "Symptom Forecasting",
      "context": "\"\"\"\nNOVAMIND Symptom Forecasting Service\n======================================\nImplements the symptom forecasting microservice for psychiat"
    },
    {
      "file": "app/infrastructure/ml/symptom_forecasting/service.py",
      "phi_type": "NAME",
      "evidence": "Symptom Forecasting",
      "context": "\"\"\"\nNOVAMIND Symptom Forecasting Service\n======================================\nImplements the symptom forecasting microservice for psychiat"
    },
    {
      "file": "app/infrastructure/ml/symptom_forecasting/service.py",
      "phi_type": "NAME",
      "evidence": "Symptom Forecasting",
      "context": "\"\"\"\nNOVAMIND Symptom Forecasting Service\n======================================\nImplements the symptom forecasting microservice for psychiat"
    },
    {
      "file": "app/infrastructure/ml/utils/__init__.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "ML models in the NOVAMIND system.\n\nThis module provides common utilities for machine learning models\nused in the Digital Twin system, including serialization, preprocessing,\nand other shared functionality.\n\"\"\""
    },
    {
      "file": "app/infrastructure/ml/utils/validation.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "the NOVAMIND system.\n\nThis module provides standardized methods for validating input and output data\nfor machine learning models used in the Digital Twin system, ensuring data integrity\nand HIPAA compliance across all ML services.\n\"\"\"\n\nimport re\nimport uuid\nfrom datetime import dateti"
    },
    {
      "file": "app/infrastructure/ml/utils/validation.py",
      "phi_type": "NAME",
      "evidence": "Validate Digital",
      "context": "[str, Any], required_services: List[str], patient_id: uuid.UUID\n    ) -> Dict[str, Any]:\n        \"\"\"\n        Validate Digital Twin insights.\n\n        Args:\n            insights: Digital Twin insights to validate\n            required_service"
    },
    {
      "file": "app/infrastructure/ml/utils/validation.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "the NOVAMIND system.\n\nThis module provides standardized methods for validating input and output data\nfor machine learning models used in the Digital Twin system, ensuring data integrity\nand HIPAA compliance across all ML services.\n\"\"\"\n\nimport re\nimport uuid\nfrom datetime import dateti"
    },
    {
      "file": "app/infrastructure/ml/utils/validation.py",
      "phi_type": "NAME",
      "evidence": "Validated Digital",
      "context": "equired services in the insights\n            patient_id: Patient ID for validation\n\n        Returns:\n            Validated Digital Twin insights\n\n        Raises:\n            ValidationError: If the insights are invalid\n        \"\"\"\n        try:"
    },
    {
      "file": "app/infrastructure/ml/utils/validation.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "the NOVAMIND system.\n\nThis module provides standardized methods for validating input and output data\nfor machine learning models used in the Digital Twin system, ensuring data integrity\nand HIPAA compliance across all ML services.\n\"\"\"\n\nimport re\nimport uuid\nfrom datetime import dateti"
    },
    {
      "file": "app/infrastructure/ml/utils/validation.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "the NOVAMIND system.\n\nThis module provides standardized methods for validating input and output data\nfor machine learning models used in the Digital Twin system, ensuring data integrity\nand HIPAA compliance across all ML services.\n\"\"\"\n\nimport re\nimport uuid\nfrom datetime import dateti"
    },
    {
      "file": "app/infrastructure/ml/utils/validation.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "the NOVAMIND system.\n\nThis module provides standardized methods for validating input and output data\nfor machine learning models used in the Digital Twin system, ensuring data integrity\nand HIPAA compliance across all ML services.\n\"\"\"\n\nimport re\nimport uuid\nfrom datetime import dateti"
    },
    {
      "file": "app/infrastructure/ml/utils/validation.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "the NOVAMIND system.\n\nThis module provides standardized methods for validating input and output data\nfor machine learning models used in the Digital Twin system, ensuring data integrity\nand HIPAA compliance across all ML services.\n\"\"\"\n\nimport re\nimport uuid\nfrom datetime import dateti"
    },
    {
      "file": "app/infrastructure/ml/utils/validation.py",
      "phi_type": "NAME",
      "evidence": "Protected Health",
      "context": "re HIPAA compliance.\n\n    This class provides methods for sanitizing input and output data to ensure\n    that no Protected Health Information (PHI) is inadvertently included in logs,\n    error messages, or other non-secure contexts.\n    \"\"\"\n\n    @staticmethod\n    def sanitize_patie"
    },
    {
      "file": "app/infrastructure/ml/utils/preprocessing.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "AMIND system.\n\nThis module provides standardized methods for preprocessing data for machine learning\nmodels used in the Digital Twin system, ensuring consistent data handling across\nall ML services and proper handling of patient data in accordance with HIPAA regulations.\n\"\"\"\n\nfrom"
    },
    {
      "file": "app/infrastructure/ml/utils/serialization.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "NOVAMIND system.\n\nThis module provides standardized methods for saving and loading machine learning\nmodels used in the Digital Twin system, ensuring consistent serialization across\nall ML services and proper handling of model artifacts.\n\"\"\"\n\nimport json\nimport logging\nimport os\ni"
    },
    {
      "file": "app/infrastructure/ml/pharmacogenomics/model_service.py",
      "phi_type": "NAME",
      "evidence": "Pharmacogenomics Model",
      "context": "\"\"\"\nPharmacogenomics Model Service for the NOVAMIND Digital Twin.\n\nThis module implements the service layer for the Pharmacogenomics microservice,\nproviding medicati"
    },
    {
      "file": "app/infrastructure/ml/pharmacogenomics/model_service.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "\"\"\"\nPharmacogenomics Model Service for the NOVAMIND Digital Twin.\n\nThis module implements the service layer for the Pharmacogenomics microservice,\nproviding medicati"
    },
    {
      "file": "app/infrastructure/ml/pharmacogenomics/model_service.py",
      "phi_type": "NAME",
      "evidence": "Clean Architecture",
      "context": "cs microservice,\nproviding medication response prediction and personalized treatment recommendations\nbased on genetic markers, following Clean Architecture principles and ensuring\nHIPAA compliance.\n\"\"\"\n\nimport asyncio\nimport json\nimport logging\nimport os\nfrom datetime import dat"
    },
    {
      "file": "app/infrastructure/ml/pharmacogenomics/model_service.py",
      "phi_type": "NAME",
      "evidence": "Pharmacogenomics Service",
      "context": "irone\"],\n            \"stimulant\": [\"methylphenidate\", \"amphetamine\", \"lisdexamfetamine\"],\n        }\n\n        logging.info(\"Pharmacogenomics Service initialized\")\n\n    async def predict_medication_responses(\n        self,\n        patient_id: UUID,\n        patien"
    },
    {
      "file": "app/infrastructure/ml/pharmacogenomics/model_service.py",
      "phi_type": "NAME",
      "evidence": "Pharmacogenomics Service",
      "context": "irone\"],\n            \"stimulant\": [\"methylphenidate\", \"amphetamine\", \"lisdexamfetamine\"],\n        }\n\n        logging.info(\"Pharmacogenomics Service initialized\")\n\n    async def predict_medication_responses(\n        self,\n        patient_id: UUID,\n        patien"
    },
    {
      "file": "app/infrastructure/ml/pharmacogenomics/gene_medication_model.py",
      "phi_type": "NAME",
      "evidence": "Medication Interaction",
      "context": "\"\"\"\nGene-Medication Interaction Model for the NOVAMIND Digital Twin.\n\nThis module implements a model for analyzing gene-medication interactions\nand predicting medicatio"
    },
    {
      "file": "app/infrastructure/ml/pharmacogenomics/gene_medication_model.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "\"\"\"\nGene-Medication Interaction Model for the NOVAMIND Digital Twin.\n\nThis module implements a model for analyzing gene-medication interactions\nand predicting medicatio"
    },
    {
      "file": "app/infrastructure/ml/pharmacogenomics/gene_medication_model.py",
      "phi_type": "NAME",
      "evidence": "Clean Architecture",
      "context": "gene-medication interactions\nand predicting medication responses based on genetic markers, following\nClean Architecture principles and ensuring HIPAA compliance.\n\"\"\"\n\nimport json\nimport logging\nimport os\nfrom datetime import datetime\nfrom typing import Any, Dic"
    },
    {
      "file": "app/infrastructure/ml/pharmacogenomics/treatment_model.py",
      "phi_type": "NAME",
      "evidence": "Treatment Response",
      "context": "\"\"\"\nPharmacogenomics and Treatment Response Model for the NOVAMIND Digital Twin.\n\nThis module implements a machine learning model for predicting medication\nresponse based on pharma"
    },
    {
      "file": "app/infrastructure/ml/pharmacogenomics/treatment_model.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "\"\"\"\nPharmacogenomics and Treatment Response Model for the NOVAMIND Digital Twin.\n\nThis module implements a machine learning model for predicting medication\nresponse based on pharma"
    },
    {
      "file": "app/infrastructure/ml/pharmacogenomics/treatment_model.py",
      "phi_type": "NAME",
      "evidence": "Models Core",
      "context": "redicting medication\nresponse based on pharmacogenomic data, following the architecture described in\nthe AI Models Core Implementation documentation and adhering to HIPAA compliance.\n\"\"\"\n\nimport logging\nimport os\nfrom datetime import datetime\nfrom typing import Any, Dict, List, Opt"
    },
    {
      "file": "app/infrastructure/ml/pharmacogenomics/treatment_model.py",
      "phi_type": "NAME",
      "evidence": "Treatment Response",
      "context": "\"\"\"\nPharmacogenomics and Treatment Response Model for the NOVAMIND Digital Twin.\n\nThis module implements a machine learning model for predicting medication\nresponse based on pharma"
    },
    {
      "file": "app/infrastructure/persistence/sqlalchemy/patient_repository.py",
      "phi_type": "PHONE",
      "evidence": "",
      "context": "\"\"\"\nHIPAA-Compliant Patient Repository\n\nThis module provides repository pattern implementation for pati"
    },
    {
      "file": "app/infrastructure/persistence/sqlalchemy/patient_repository.py",
      "phi_type": "NAME",
      "evidence": "Compliant Patient",
      "context": "\"\"\"\nHIPAA-Compliant Patient Repository\n\nThis module provides repository pattern implementation for patient data access\nwith field-level en"
    },
    {
      "file": "app/infrastructure/persistence/sqlalchemy/unit_of_work.py",
      "phi_type": "NAME",
      "evidence": "Compliant Unit",
      "context": "\"\"\"\nHIPAA-Compliant Unit of Work Pattern\n\nThis module implements the Unit of Work pattern for database transactions,\nensuring HIPAA-complian"
    },
    {
      "file": "app/infrastructure/persistence/sqlalchemy/unit_of_work.py",
      "phi_type": "NAME",
      "evidence": "Work Pattern",
      "context": "\"\"\"\nHIPAA-Compliant Unit of Work Pattern\n\nThis module implements the Unit of Work pattern for database transactions,\nensuring HIPAA-complian"
    },
    {
      "file": "app/infrastructure/persistence/sqlalchemy/models/appointment.py",
      "phi_type": "NAME",
      "evidence": "Domain Appointment",
      "context": "tModel\":\n        \"\"\"\n        Create a SQLAlchemy model instance from a domain entity.\n\n        Args:\n            appointment: Domain Appointment entity\n\n        Returns:\n            AppointmentModel: SQLAlchemy model instance\n        \"\"\"\n        retur"
    },
    {
      "file": "app/infrastructure/persistence/sqlalchemy/models/provider.py",
      "phi_type": "NAME",
      "evidence": "Domain Provider",
      "context": "rModel\":\n        \"\"\"\n        Create a SQLAlchemy model instance from a domain entity.\n\n        Args:\n            provider: Domain Provider entity\n\n        Returns:\n            ProviderModel: SQLAlchemy model instance\n        \"\"\"\n        return c"
    },
    {
      "file": "app/infrastructure/persistence/sqlalchemy/models/medication.py",
      "phi_type": "NAME",
      "evidence": "Domain Medication",
      "context": "nModel\":\n        \"\"\"\n        Create a SQLAlchemy model instance from a domain entity.\n\n        Args:\n            medication: Domain Medication entity\n\n        Returns:\n            MedicationModel: SQLAlchemy model instance\n        \"\"\"\n        return"
    },
    {
      "file": "app/infrastructure/persistence/sqlalchemy/models/patient.py",
      "phi_type": "NAME",
      "evidence": "Protected Health",
      "context": "ts' table in the database and\n    represents patients in the NOVAMIND concierge psychiatry platform.\n    All PHI (Protected Health Information) fields are encrypted at rest.\n    \"\"\"\n\n    __tablename__ = \"patients\"\n\n    id = Column(UUID(as_uuid=True), primary_key=True, defa"
    },
    {
      "file": "app/infrastructure/persistence/sqlalchemy/models/patient.py",
      "phi_type": "NAME",
      "evidence": "Domain Patient",
      "context": "instance from a domain entity.\n        Encrypts all PHI fields for HIPAA compliance.\n\n        Args:\n            patient: Domain Patient entity\n\n        Returns:\n            PatientModel: SQLAlchemy model instance with encrypted PHI\n        \"\""
    },
    {
      "file": "app/infrastructure/persistence/sqlalchemy/config/database.py",
      "phi_type": "SSN",
      "evidence": "123-45-6789",
      "context": "are simplified patterns - in production, more comprehensive regex would be used\n        patterns = [\n            # SSN pattern (123-45-6789)\n            r'\\d{3}-\\d{2}-\\d{4}',\n            # Email pattern\n            r'[a-zA-Z0-9._%+-]+@[a-zA"
    },
    {
      "file": "app/infrastructure/ml_services/biometric_correlation/__init__.py",
      "phi_type": "NAME",
      "evidence": "Biometric Correlation",
      "context": "ktop/NOVAMIND-WEB/Novamind-Backend/app/infrastructure/ml_services/biometric_correlation/__init__.py\n\nInitialization file for the Biometric Correlation Service module.\n\"\"\"\n\nfrom app.infrastructure.ml_services.biometric_correlation.service import (\n    BiometricCorrel"
    },
    {
      "file": "app/infrastructure/ml_services/biometric_correlation/service.py",
      "phi_type": "NAME",
      "evidence": "Biometric Correlation",
      "context": "sktop/NOVAMIND-WEB/Novamind-Backend/app/infrastructure/ml_services/biometric_correlation/service.py\n\nImplementation of the Biometric Correlation Service that connects to ML models\nfor analyzing correlations between biometric data and mental health indicators.\n\"\"\"\n\nimport logging"
    },
    {
      "file": "app/infrastructure/ml_services/biometric_correlation/service.py",
      "phi_type": "NAME",
      "evidence": "Biometric Correlation",
      "context": "sktop/NOVAMIND-WEB/Novamind-Backend/app/infrastructure/ml_services/biometric_correlation/service.py\n\nImplementation of the Biometric Correlation Service that connects to ML models\nfor analyzing correlations between biometric data and mental health indicators.\n\"\"\"\n\nimport logging"
    },
    {
      "file": "app/infrastructure/ml_services/biometric_correlation/service.py",
      "phi_type": "NAME",
      "evidence": "Biometric Correlation",
      "context": "sktop/NOVAMIND-WEB/Novamind-Backend/app/infrastructure/ml_services/biometric_correlation/service.py\n\nImplementation of the Biometric Correlation Service that connects to ML models\nfor analyzing correlations between biometric data and mental health indicators.\n\"\"\"\n\nimport logging"
    },
    {
      "file": "app/infrastructure/ml_services/biometric_correlation/service.py",
      "phi_type": "NAME",
      "evidence": "Biometric Correlation",
      "context": "sktop/NOVAMIND-WEB/Novamind-Backend/app/infrastructure/ml_services/biometric_correlation/service.py\n\nImplementation of the Biometric Correlation Service that connects to ML models\nfor analyzing correlations between biometric data and mental health indicators.\n\"\"\"\n\nimport logging"
    },
    {
      "file": "app/infrastructure/ml_services/digital_twin_integration/service.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "op/NOVAMIND-WEB/Novamind-Backend/app/infrastructure/ml_services/digital_twin_integration/service.py\n\nImplementation of the Digital Twin Integration Service that coordinates all three ML microservices\nand provides a unified interface for the domain layer.\n\"\"\"\n\nimport logging\nfrom datetime import dat"
    },
    {
      "file": "app/infrastructure/ml_services/digital_twin_integration/service.py",
      "phi_type": "NAME",
      "evidence": "Integration Service",
      "context": "op/NOVAMIND-WEB/Novamind-Backend/app/infrastructure/ml_services/digital_twin_integration/service.py\n\nImplementation of the Digital Twin Integration Service that coordinates all three ML microservices\nand provides a unified interface for the domain layer.\n\"\"\"\n\nimport logging\nfrom datetime import dat"
    },
    {
      "file": "app/infrastructure/ml_services/digital_twin_integration/service.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "op/NOVAMIND-WEB/Novamind-Backend/app/infrastructure/ml_services/digital_twin_integration/service.py\n\nImplementation of the Digital Twin Integration Service that coordinates all three ML microservices\nand provides a unified interface for the domain layer.\n\"\"\"\n\nimport logging\nfrom datetime import dat"
    },
    {
      "file": "app/infrastructure/ml_services/digital_twin_integration/service.py",
      "phi_type": "NAME",
      "evidence": "Integration Service",
      "context": "op/NOVAMIND-WEB/Novamind-Backend/app/infrastructure/ml_services/digital_twin_integration/service.py\n\nImplementation of the Digital Twin Integration Service that coordinates all three ML microservices\nand provides a unified interface for the domain layer.\n\"\"\"\n\nimport logging\nfrom datetime import dat"
    },
    {
      "file": "app/infrastructure/ml_services/digital_twin_integration/service.py",
      "phi_type": "NAME",
      "evidence": "Symptom Forecasting",
      "context": "DigitalTwinIntegrationService):\n    \"\"\"\n    Implementation of the Digital Twin Integration Service.\n\n    This service coordinates all three ML microservices (Symptom Forecasting,\n    Biometric Correlation, and Pharmacogenomics) and provides a unified\n    interface for the domai"
    },
    {
      "file": "app/infrastructure/ml_services/digital_twin_integration/service.py",
      "phi_type": "NAME",
      "evidence": "Biometric Correlation",
      "context": "Integration Service.\n\n    This service coordinates all three ML microservices (Symptom Forecasting,\n    Biometric Correlation, and Pharmacogenomics) and provides a unified\n    interface for the domain layer to interact with the Digital Twin functionality.\n\n    Attributes"
    },
    {
      "file": "app/infrastructure/ml_services/digital_twin_integration/service.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "op/NOVAMIND-WEB/Novamind-Backend/app/infrastructure/ml_services/digital_twin_integration/service.py\n\nImplementation of the Digital Twin Integration Service that coordinates all three ML microservices\nand provides a unified interface for the domain layer.\n\"\"\"\n\nimport logging\nfrom datetime import dat"
    },
    {
      "file": "app/infrastructure/ml_services/digital_twin_integration/service.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "op/NOVAMIND-WEB/Novamind-Backend/app/infrastructure/ml_services/digital_twin_integration/service.py\n\nImplementation of the Digital Twin Integration Service that coordinates all three ML microservices\nand provides a unified interface for the domain layer.\n\"\"\"\n\nimport logging\nfrom datetime import dat"
    },
    {
      "file": "app/infrastructure/ml_services/digital_twin_integration/service.py",
      "phi_type": "NAME",
      "evidence": "Integration Service",
      "context": "op/NOVAMIND-WEB/Novamind-Backend/app/infrastructure/ml_services/digital_twin_integration/service.py\n\nImplementation of the Digital Twin Integration Service that coordinates all three ML microservices\nand provides a unified interface for the domain layer.\n\"\"\"\n\nimport logging\nfrom datetime import dat"
    },
    {
      "file": "app/infrastructure/ml_services/digital_twin_integration/service.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "op/NOVAMIND-WEB/Novamind-Backend/app/infrastructure/ml_services/digital_twin_integration/service.py\n\nImplementation of the Digital Twin Integration Service that coordinates all three ML microservices\nand provides a unified interface for the domain layer.\n\"\"\"\n\nimport logging\nfrom datetime import dat"
    },
    {
      "file": "app/infrastructure/ml_services/digital_twin_integration/service.py",
      "phi_type": "NAME",
      "evidence": "Integration Service",
      "context": "op/NOVAMIND-WEB/Novamind-Backend/app/infrastructure/ml_services/digital_twin_integration/service.py\n\nImplementation of the Digital Twin Integration Service that coordinates all three ML microservices\nand provides a unified interface for the domain layer.\n\"\"\"\n\nimport logging\nfrom datetime import dat"
    },
    {
      "file": "app/infrastructure/ml_services/digital_twin_integration/service.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "op/NOVAMIND-WEB/Novamind-Backend/app/infrastructure/ml_services/digital_twin_integration/service.py\n\nImplementation of the Digital Twin Integration Service that coordinates all three ML microservices\nand provides a unified interface for the domain layer.\n\"\"\"\n\nimport logging\nfrom datetime import dat"
    },
    {
      "file": "app/infrastructure/ml_services/digital_twin_integration/service.py",
      "phi_type": "NAME",
      "evidence": "Generating Digital",
      "context": "ata\n\n        Returns:\n            DigitalTwin entity with comprehensive patient insights\n        \"\"\"\n        logger.info(f\"Generating Digital Twin for patient {patient_id}\")\n\n        try:\n            # Step 1: Generate symptom forecast\n            symptom_forecast = await"
    },
    {
      "file": "app/infrastructure/ml_services/digital_twin_integration/service.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "op/NOVAMIND-WEB/Novamind-Backend/app/infrastructure/ml_services/digital_twin_integration/service.py\n\nImplementation of the Digital Twin Integration Service that coordinates all three ML microservices\nand provides a unified interface for the domain layer.\n\"\"\"\n\nimport logging\nfrom datetime import dat"
    },
    {
      "file": "app/infrastructure/ml_services/digital_twin_integration/service.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "op/NOVAMIND-WEB/Novamind-Backend/app/infrastructure/ml_services/digital_twin_integration/service.py\n\nImplementation of the Digital Twin Integration Service that coordinates all three ML microservices\nand provides a unified interface for the domain layer.\n\"\"\"\n\nimport logging\nfrom datetime import dat"
    },
    {
      "file": "app/infrastructure/ml_services/digital_twin_integration/service.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "op/NOVAMIND-WEB/Novamind-Backend/app/infrastructure/ml_services/digital_twin_integration/service.py\n\nImplementation of the Digital Twin Integration Service that coordinates all three ML microservices\nand provides a unified interface for the domain layer.\n\"\"\"\n\nimport logging\nfrom datetime import dat"
    },
    {
      "file": "app/infrastructure/ml_services/digital_twin_integration/service.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "op/NOVAMIND-WEB/Novamind-Backend/app/infrastructure/ml_services/digital_twin_integration/service.py\n\nImplementation of the Digital Twin Integration Service that coordinates all three ML microservices\nand provides a unified interface for the domain layer.\n\"\"\"\n\nimport logging\nfrom datetime import dat"
    },
    {
      "file": "app/infrastructure/ml_services/digital_twin_integration/service.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "op/NOVAMIND-WEB/Novamind-Backend/app/infrastructure/ml_services/digital_twin_integration/service.py\n\nImplementation of the Digital Twin Integration Service that coordinates all three ML microservices\nand provides a unified interface for the domain layer.\n\"\"\"\n\nimport logging\nfrom datetime import dat"
    },
    {
      "file": "app/infrastructure/ml_services/digital_twin_integration/service.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "op/NOVAMIND-WEB/Novamind-Backend/app/infrastructure/ml_services/digital_twin_integration/service.py\n\nImplementation of the Digital Twin Integration Service that coordinates all three ML microservices\nand provides a unified interface for the domain layer.\n\"\"\"\n\nimport logging\nfrom datetime import dat"
    },
    {
      "file": "app/infrastructure/ml_services/digital_twin_integration/service.py",
      "phi_type": "NAME",
      "evidence": "Updating Digital",
      "context": "taining new data to incorporate\n\n        Returns:\n            Updated DigitalTwin entity\n        \"\"\"\n        logger.info(f\"Updating Digital Twin {digital_twin_id}\")\n\n        try:\n            # Step 1: Extract patient ID and data categories\n            patient_id ="
    },
    {
      "file": "app/infrastructure/ml_services/digital_twin_integration/service.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "op/NOVAMIND-WEB/Novamind-Backend/app/infrastructure/ml_services/digital_twin_integration/service.py\n\nImplementation of the Digital Twin Integration Service that coordinates all three ML microservices\nand provides a unified interface for the domain layer.\n\"\"\"\n\nimport logging\nfrom datetime import dat"
    },
    {
      "file": "app/infrastructure/ml_services/digital_twin_integration/service.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "op/NOVAMIND-WEB/Novamind-Backend/app/infrastructure/ml_services/digital_twin_integration/service.py\n\nImplementation of the Digital Twin Integration Service that coordinates all three ML microservices\nand provides a unified interface for the domain layer.\n\"\"\"\n\nimport logging\nfrom datetime import dat"
    },
    {
      "file": "app/infrastructure/ml_services/digital_twin_integration/service.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "op/NOVAMIND-WEB/Novamind-Backend/app/infrastructure/ml_services/digital_twin_integration/service.py\n\nImplementation of the Digital Twin Integration Service that coordinates all three ML microservices\nand provides a unified interface for the domain layer.\n\"\"\"\n\nimport logging\nfrom datetime import dat"
    },
    {
      "file": "app/infrastructure/ml_services/digital_twin_integration/service.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "op/NOVAMIND-WEB/Novamind-Backend/app/infrastructure/ml_services/digital_twin_integration/service.py\n\nImplementation of the Digital Twin Integration Service that coordinates all three ML microservices\nand provides a unified interface for the domain layer.\n\"\"\"\n\nimport logging\nfrom datetime import dat"
    },
    {
      "file": "app/infrastructure/ml_services/digital_twin_integration/service.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "op/NOVAMIND-WEB/Novamind-Backend/app/infrastructure/ml_services/digital_twin_integration/service.py\n\nImplementation of the Digital Twin Integration Service that coordinates all three ML microservices\nand provides a unified interface for the domain layer.\n\"\"\"\n\nimport logging\nfrom datetime import dat"
    },
    {
      "file": "app/infrastructure/ml_services/digital_twin_integration/service.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "op/NOVAMIND-WEB/Novamind-Backend/app/infrastructure/ml_services/digital_twin_integration/service.py\n\nImplementation of the Digital Twin Integration Service that coordinates all three ML microservices\nand provides a unified interface for the domain layer.\n\"\"\"\n\nimport logging\nfrom datetime import dat"
    },
    {
      "file": "app/infrastructure/ml_services/digital_twin_integration/service.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "op/NOVAMIND-WEB/Novamind-Backend/app/infrastructure/ml_services/digital_twin_integration/service.py\n\nImplementation of the Digital Twin Integration Service that coordinates all three ML microservices\nand provides a unified interface for the domain layer.\n\"\"\"\n\nimport logging\nfrom datetime import dat"
    },
    {
      "file": "app/infrastructure/ml_services/digital_twin_integration/service.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "op/NOVAMIND-WEB/Novamind-Backend/app/infrastructure/ml_services/digital_twin_integration/service.py\n\nImplementation of the Digital Twin Integration Service that coordinates all three ML microservices\nand provides a unified interface for the domain layer.\n\"\"\"\n\nimport logging\nfrom datetime import dat"
    },
    {
      "file": "app/infrastructure/ml_services/digital_twin_integration/service.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "op/NOVAMIND-WEB/Novamind-Backend/app/infrastructure/ml_services/digital_twin_integration/service.py\n\nImplementation of the Digital Twin Integration Service that coordinates all three ML microservices\nand provides a unified interface for the domain layer.\n\"\"\"\n\nimport logging\nfrom datetime import dat"
    },
    {
      "file": "app/infrastructure/ml_services/digital_twin_integration/service.py",
      "phi_type": "NAME",
      "evidence": "Symptom Forecasting",
      "context": "DigitalTwinIntegrationService):\n    \"\"\"\n    Implementation of the Digital Twin Integration Service.\n\n    This service coordinates all three ML microservices (Symptom Forecasting,\n    Biometric Correlation, and Pharmacogenomics) and provides a unified\n    interface for the domai"
    },
    {
      "file": "app/infrastructure/ml_services/digital_twin_integration/service.py",
      "phi_type": "NAME",
      "evidence": "Biometric Correlation",
      "context": "Integration Service.\n\n    This service coordinates all three ML microservices (Symptom Forecasting,\n    Biometric Correlation, and Pharmacogenomics) and provides a unified\n    interface for the domain layer to interact with the Digital Twin functionality.\n\n    Attributes"
    },
    {
      "file": "app/infrastructure/ml_services/digital_twin_integration/service.py",
      "phi_type": "NAME",
      "evidence": "Pharmacogenomics Service",
      "context": "genetic_data: Dict[str, Any],\n        clinical_data: Dict[str, Any],\n    ) -> Dict[str, Any]:\n        \"\"\"Generate pharmacogenomic insights using the Pharmacogenomics Service.\"\"\"\n        logger.debug(f\"Generating pharmacogenomic insights for patient {patient_id}\")\n\n        # Ex"
    },
    {
      "file": "app/infrastructure/ml_services/digital_twin_integration/service.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "op/NOVAMIND-WEB/Novamind-Backend/app/infrastructure/ml_services/digital_twin_integration/service.py\n\nImplementation of the Digital Twin Integration Service that coordinates all three ML microservices\nand provides a unified interface for the domain layer.\n\"\"\"\n\nimport logging\nfrom datetime import dat"
    },
    {
      "file": "app/infrastructure/ml_services/symptom_forecasting/__init__.py",
      "phi_type": "NAME",
      "evidence": "Symptom Forecasting",
      "context": "esktop/NOVAMIND-WEB/Novamind-Backend/app/infrastructure/ml_services/symptom_forecasting/__init__.py\n\nInitialization file for the Symptom Forecasting Service module.\n\"\"\"\n\nfrom app.infrastructure.ml_services.symptom_forecasting.service import (\n    SymptomForecastin"
    },
    {
      "file": "app/infrastructure/ml_services/symptom_forecasting/service.py",
      "phi_type": "NAME",
      "evidence": "Symptom Forecasting",
      "context": "Desktop/NOVAMIND-WEB/Novamind-Backend/app/infrastructure/ml_services/symptom_forecasting/service.py\n\nImplementation of the Symptom Forecasting Service that connects to the ML models\nfor predicting psychiatric symptom trajectories.\n\"\"\"\n\nimport logging\nfrom datetime import datetime"
    },
    {
      "file": "app/infrastructure/ml_services/symptom_forecasting/service.py",
      "phi_type": "NAME",
      "evidence": "Symptom Forecasting",
      "context": "Desktop/NOVAMIND-WEB/Novamind-Backend/app/infrastructure/ml_services/symptom_forecasting/service.py\n\nImplementation of the Symptom Forecasting Service that connects to the ML models\nfor predicting psychiatric symptom trajectories.\n\"\"\"\n\nimport logging\nfrom datetime import datetime"
    },
    {
      "file": "app/infrastructure/ml_services/symptom_forecasting/service.py",
      "phi_type": "NAME",
      "evidence": "Symptom Forecasting",
      "context": "Desktop/NOVAMIND-WEB/Novamind-Backend/app/infrastructure/ml_services/symptom_forecasting/service.py\n\nImplementation of the Symptom Forecasting Service that connects to the ML models\nfor predicting psychiatric symptom trajectories.\n\"\"\"\n\nimport logging\nfrom datetime import datetime"
    },
    {
      "file": "app/infrastructure/ml_services/symptom_forecasting/service.py",
      "phi_type": "NAME",
      "evidence": "Symptom Forecasting",
      "context": "Desktop/NOVAMIND-WEB/Novamind-Backend/app/infrastructure/ml_services/symptom_forecasting/service.py\n\nImplementation of the Symptom Forecasting Service that connects to the ML models\nfor predicting psychiatric symptom trajectories.\n\"\"\"\n\nimport logging\nfrom datetime import datetime"
    },
    {
      "file": "app/infrastructure/ml_services/pharmacogenomics/service.py",
      "phi_type": "NAME",
      "evidence": "Pharmacogenomics Service",
      "context": "JJ/Desktop/NOVAMIND-WEB/Novamind-Backend/app/infrastructure/ml_services/pharmacogenomics/service.py\n\nImplementation of the Pharmacogenomics Service that connects to ML models\nfor predicting medication responses based on genetic markers and patient history.\n\"\"\"\n\nimport loggi"
    },
    {
      "file": "app/infrastructure/ml_services/pharmacogenomics/service.py",
      "phi_type": "NAME",
      "evidence": "Pharmacogenomics Service",
      "context": "JJ/Desktop/NOVAMIND-WEB/Novamind-Backend/app/infrastructure/ml_services/pharmacogenomics/service.py\n\nImplementation of the Pharmacogenomics Service that connects to ML models\nfor predicting medication responses based on genetic markers and patient history.\n\"\"\"\n\nimport loggi"
    },
    {
      "file": "app/infrastructure/ml_services/pharmacogenomics/service.py",
      "phi_type": "NAME",
      "evidence": "Pharmacogenomics Service",
      "context": "JJ/Desktop/NOVAMIND-WEB/Novamind-Backend/app/infrastructure/ml_services/pharmacogenomics/service.py\n\nImplementation of the Pharmacogenomics Service that connects to ML models\nfor predicting medication responses based on genetic markers and patient history.\n\"\"\"\n\nimport loggi"
    },
    {
      "file": "app/infrastructure/ml_services/pharmacogenomics/service.py",
      "phi_type": "NAME",
      "evidence": "Pharmacogenomics Service",
      "context": "JJ/Desktop/NOVAMIND-WEB/Novamind-Backend/app/infrastructure/ml_services/pharmacogenomics/service.py\n\nImplementation of the Pharmacogenomics Service that connects to ML models\nfor predicting medication responses based on genetic markers and patient history.\n\"\"\"\n\nimport loggi"
    },
    {
      "file": "app/infrastructure/config/app_config.py",
      "phi_type": "NAME",
      "evidence": "Application Configuration",
      "context": "\"\"\"\nApplication Configuration for NOVAMIND.\n\nThis module configures the main application components and dependencies,\nfollowing Clean Architect"
    },
    {
      "file": "app/infrastructure/config/app_config.py",
      "phi_type": "NAME",
      "evidence": "Clean Architecture",
      "context": "onfiguration for NOVAMIND.\n\nThis module configures the main application components and dependencies,\nfollowing Clean Architecture principles and ensuring proper separation of concerns.\n\"\"\"\n\nimport os\nfrom typing import Any, Dict\n\nfrom app.domain.repositories.digital_twin_repository i"
    },
    {
      "file": "app/infrastructure/config/ml_service_config.py",
      "phi_type": "NAME",
      "evidence": "Service Configuration",
      "context": "\"\"\"\nML Service Configuration for NOVAMIND.\n\nThis module configures the ML services and adapters for dependency injection,\nfollowing Clean Arch"
    },
    {
      "file": "app/infrastructure/config/ml_service_config.py",
      "phi_type": "NAME",
      "evidence": "Clean Architecture",
      "context": "uration for NOVAMIND.\n\nThis module configures the ML services and adapters for dependency injection,\nfollowing Clean Architecture principles and ensuring proper separation of concerns.\n\"\"\"\n\nimport os\nfrom typing import Any, Dict\n\nfrom app.domain.interfaces.ml_service_interface import"
    },
    {
      "file": "app/infrastructure/security/audit.py",
      "phi_type": "NAME",
      "evidence": "Compliant Audit",
      "context": "\"\"\"\nHIPAA-Compliant Audit Logging System\n\nThis module provides a comprehensive audit logging system that meets HIPAA compliance\nrequirements"
    },
    {
      "file": "app/infrastructure/security/audit.py",
      "phi_type": "NAME",
      "evidence": "Logging System",
      "context": "\"\"\"\nHIPAA-Compliant Audit Logging System\n\nThis module provides a comprehensive audit logging system that meets HIPAA compliance\nrequirements"
    },
    {
      "file": "app/infrastructure/security/audit.py",
      "phi_type": "NAME",
      "evidence": "Protected Health",
      "context": "ogging System\n\nThis module provides a comprehensive audit logging system that meets HIPAA compliance\nrequirements for tracking access to Protected Health Information (PHI) and authentication\nevents in a concierge psychiatry platform.\n\nFeatures:\n- Automatic logging of all PHI access with us"
    },
    {
      "file": "app/infrastructure/security/audit.py",
      "phi_type": "NAME",
      "evidence": "Security Rule",
      "context": "compliant audit logging system that tracks and records access to PHI\n    and authentication events.\n\n    This class implements the HIPAA Security Rule requirements for audit controls\n    (\u00a7164.312(b)) by maintaining comprehensive records of all PHI access.\n    \"\"\"\n\n    def __init__"
    },
    {
      "file": "app/infrastructure/security/audit.py",
      "phi_type": "NAME",
      "evidence": "Protected Health",
      "context": "ogging System\n\nThis module provides a comprehensive audit logging system that meets HIPAA compliance\nrequirements for tracking access to Protected Health Information (PHI) and authentication\nevents in a concierge psychiatry platform.\n\nFeatures:\n- Automatic logging of all PHI access with us"
    },
    {
      "file": "app/infrastructure/security/encryption.py",
      "phi_type": "NAME",
      "evidence": "Protected Health",
      "context": "\"\"\"\nHIPAA-compliant encryption service.\n\nThis module provides cryptographic services for securing Protected Health Information (PHI)\nin accordance with HIPAA requirements for encryption at rest and in transit.\n\"\"\"\n\nimport base64\nimp"
    },
    {
      "file": "app/infrastructure/security/encryption.py",
      "phi_type": "NAME",
      "evidence": "Uses Fernet",
      "context": ", data_hash)\n\n\nclass EncryptionService:\n    \"\"\"\n    HIPAA-compliant encryption service for PHI.\n    \n    Uses Fernet (AES-128-CBC) with a key derived using PBKDF2.\n    \"\"\"\n    \n    def __init__(self, key: Optional[str] = None) -> None:\n        \"\"\"\n        Initial"
    },
    {
      "file": "app/infrastructure/security/encryption.py",
      "phi_type": "NAME",
      "evidence": "If None",
      "context": "None) -> None:\n        \"\"\"\n        Initialize encryption service with a key.\n        \n        Args:\n            key: Encryption key. If None, uses the key from settings.\n        \"\"\"\n        self._key = key or settings.security.ENCRYPTION_KEY\n        self._salt = base64"
    },
    {
      "file": "app/infrastructure/security/encryption.py",
      "phi_type": "NAME",
      "evidence": "If True",
      "context": "Decrypt data and optionally return metadata.\n        \n        Args:\n            data: Encrypted data\n            return_metadata: If True, return both data and metadata\n            \n        Returns:\n            Decrypted data string, or tuple of (data, metadata) if re"
    },
    {
      "file": "app/infrastructure/security/phi_middleware.py",
      "phi_type": "NAME",
      "evidence": "Redaction Middleware",
      "context": "\"\"\"\nHIPAA-Compliant PHI Redaction Middleware\n\nThis module provides middleware for automatically detecting and redacting\nProtected Health Informa"
    },
    {
      "file": "app/infrastructure/security/phi_middleware.py",
      "phi_type": "NAME",
      "evidence": "Protected Health",
      "context": "PHI Redaction Middleware\n\nThis module provides middleware for automatically detecting and redacting\nProtected Health Information (PHI) in API requests and responses. This is a\ncritical component for HIPAA compliance in healthcare applications.\n\nPHI detection is pattern-based"
    },
    {
      "file": "app/infrastructure/security/phi_middleware.py",
      "phi_type": "NAME",
      "evidence": "Protected Health",
      "context": "PHI Redaction Middleware\n\nThis module provides middleware for automatically detecting and redacting\nProtected Health Information (PHI) in API requests and responses. This is a\ncritical component for HIPAA compliance in healthcare applications.\n\nPHI detection is pattern-based"
    },
    {
      "file": "app/infrastructure/security/phi_middleware.py",
      "phi_type": "NAME",
      "evidence": "Security Rule",
      "context": "e for detecting and redacting Protected Health Information (PHI)\n    in API requests and responses.\n\n    This implements HIPAA Security Rule requirements for safeguarding PHI\n    by ensuring no sensitive data is inadvertently leaked in logs or responses.\n    \"\"\"\n\n    def __"
    },
    {
      "file": "app/infrastructure/security/jwt_auth.py",
      "phi_type": "NAME",
      "evidence": "Authentication Service",
      "context": "#!/usr/bin/env python3\n\"\"\"\nHIPAA-Compliant JWT Authentication Service\n\nThis service handles secure authentication using JWT tokens, following HIPAA\nsecurity requirements"
    },
    {
      "file": "app/infrastructure/security/log_sanitizer.py",
      "phi_type": "SSN",
      "evidence": "123-45-6789",
      "context": "# Define regex patterns for various PHI types\n        self.patterns: Dict[str, Pattern] = {\n            # Social Security Numbers (123-45-6789 or 123456789)\n            'SSN': re.compile(r'\\b\\d{3}[-\\s]?\\d{2}[-\\s]?\\d{4}\\b'),\n            \n            # Email"
    },
    {
      "file": "app/infrastructure/security/log_sanitizer.py",
      "phi_type": "SSN",
      "evidence": "123456789",
      "context": "# Define regex patterns for various PHI types\n        self.patterns: Dict[str, Pattern] = {\n            # Social Security Numbers (123-45-6789 or 123456789)\n            'SSN': re.compile(r'\\b\\d{3}[-\\s]?\\d{2}[-\\s]?\\d{4}\\b'),\n            \n            # Email"
    },
    {
      "file": "app/infrastructure/security/log_sanitizer.py",
      "phi_type": "NAME",
      "evidence": "Compliant Log",
      "context": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nHIPAA-Compliant Log Sanitization Module\n\nThis module provides tools for sanitizing Protected Health Information (PHI)\nfrom log messages bef"
    },
    {
      "file": "app/infrastructure/security/log_sanitizer.py",
      "phi_type": "NAME",
      "evidence": "Sanitization Module",
      "context": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nHIPAA-Compliant Log Sanitization Module\n\nThis module provides tools for sanitizing Protected Health Information (PHI)\nfrom log messages bef"
    },
    {
      "file": "app/infrastructure/security/log_sanitizer.py",
      "phi_type": "NAME",
      "evidence": "Protected Health",
      "context": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nHIPAA-Compliant Log Sanitization Module\n\nThis module provides tools for sanitizing Protected Health Information (PHI)\nfrom log messages before they are written to any output stream.\n\nIt implements robust pattern match"
    },
    {
      "file": "app/infrastructure/security/log_sanitizer.py",
      "phi_type": "NAME",
      "evidence": "Social Security",
      "context": "nts robust pattern matching to detect and redact sensitive information\nincluding but not limited to:\n- Social Security Numbers\n- Email addresses\n- Phone numbers\n- Names\n- Addresses\n- Medical record numbers\n- Credit card number"
    },
    {
      "file": "app/infrastructure/security/log_sanitizer.py",
      "phi_type": "NAME",
      "evidence": "Protected Health",
      "context": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nHIPAA-Compliant Log Sanitization Module\n\nThis module provides tools for sanitizing Protected Health Information (PHI)\nfrom log messages before they are written to any output stream.\n\nIt implements robust pattern match"
    },
    {
      "file": "app/infrastructure/security/log_sanitizer.py",
      "phi_type": "NAME",
      "evidence": "Social Security",
      "context": "nts robust pattern matching to detect and redact sensitive information\nincluding but not limited to:\n- Social Security Numbers\n- Email addresses\n- Phone numbers\n- Names\n- Addresses\n- Medical record numbers\n- Credit card number"
    },
    {
      "file": "app/infrastructure/security/log_sanitizer.py",
      "phi_type": "NAME",
      "evidence": "Always True",
      "context": "e.\n        \n        Args:\n            record: The log record to filter\n            \n        Returns:\n            Always True (allowing the record to proceed), but with sanitized content\n        \"\"\"\n        if isinstance(record.msg, str):\n            record.msg = self.sanitizer.sanitiz"
    },
    {
      "file": "app/infrastructure/security/auth_middleware.py",
      "phi_type": "NAME",
      "evidence": "Compliant Authentication",
      "context": "\"\"\"\nHIPAA-Compliant Authentication Middleware\n\nThis module provides middleware for enforcing authentication, authorization,\nand audit logging for"
    },
    {
      "file": "app/infrastructure/security/auth_middleware.py",
      "phi_type": "NAME",
      "evidence": "Check Authorization",
      "context": "uest\n\n        Returns:\n            Optional[str]: The JWT token if found, None otherwise\n        \"\"\"\n        # Check Authorization header\n        auth_header = request.headers.get(\"Authorization\")\n        if auth_header and auth_header.s"
    },
    {
      "file": "app/infrastructure/security/encryption_service.py",
      "phi_type": "NAME",
      "evidence": "Compliant Encryption",
      "context": "\"\"\"\nHIPAA-Compliant Encryption Service\n\nThis module provides field-level encryption for PHI data, ensuring sensitive\npatient information i"
    },
    {
      "file": "app/infrastructure/security/jwt/token_handler.py",
      "phi_type": "NAME",
      "evidence": "Token Handler",
      "context": "\"\"\"\nNOVAMIND JWT Token Handler\n========================\nHandles secure JWT token generation and validation for the NOVAMIND platfo"
    },
    {
      "file": "app/infrastructure/security/auth/jwt_handler.py",
      "phi_type": "NAME",
      "evidence": "Authentication Handler",
      "context": "\"\"\"\nHIPAA-Compliant JWT Authentication Handler\n\nThis module provides functions to create and verify JSON Web Tokens (JWTs)\nfor secure authenticati"
    },
    {
      "file": "app/infrastructure/security/auth/jwt_handler.py",
      "phi_type": "NAME",
      "evidence": "Web Tokens",
      "context": "\"\"\"\nHIPAA-Compliant JWT Authentication Handler\n\nThis module provides functions to create and verify JSON Web Tokens (JWTs)\nfor secure authentication and authorization in compliance with HIPAA requirements.\n\nFeatures:\n- Sec"
    },
    {
      "file": "app/infrastructure/security/password/password_handler.py",
      "phi_type": "NAME",
      "evidence": "Password Handler",
      "context": "\"\"\"\nNOVAMIND Password Handler\n=======================\nSecure password handling for the NOVAMIND psychiatric platform.\nImplements"
    },
    {
      "file": "app/infrastructure/security/rbac/role_manager.py",
      "phi_type": "NAME",
      "evidence": "Compliant Role",
      "context": "\"\"\"\nHIPAA-Compliant Role-Based Access Control System\n\nThis module implements a comprehensive RBAC system for enforcing\naccess controls as required by HI"
    },
    {
      "file": "app/infrastructure/security/rbac/role_manager.py",
      "phi_type": "NAME",
      "evidence": "Based Access",
      "context": "\"\"\"\nHIPAA-Compliant Role-Based Access Control System\n\nThis module implements a comprehensive RBAC system for enforcing\naccess controls as required by HI"
    },
    {
      "file": "app/infrastructure/security/rbac/role_manager.py",
      "phi_type": "NAME",
      "evidence": "Control System",
      "context": "\"\"\"\nHIPAA-Compliant Role-Based Access Control System\n\nThis module implements a comprehensive RBAC system for enforcing\naccess controls as required by HI"
    },
    {
      "file": "app/infrastructure/security/rbac/role_manager.py",
      "phi_type": "NAME",
      "evidence": "Security Rule",
      "context": "t Role-Based Access Control System\n\nThis module implements a comprehensive RBAC system for enforcing\naccess controls as required by HIPAA Security Rule \u00a7 164.308(a)(4),\nwhich mandates implementation of information access management policies.\n\nFeatures:\n- Granular perm"
    },
    {
      "file": "app/infrastructure/security/rbac/role_manager.py",
      "phi_type": "NAME",
      "evidence": "Based Access",
      "context": "\"\"\"\nHIPAA-Compliant Role-Based Access Control System\n\nThis module implements a comprehensive RBAC system for enforcing\naccess controls as required by HI"
    },
    {
      "file": "app/application/interfaces/ai_model_service.py",
      "phi_type": "NAME",
      "evidence": "Following Dependency",
      "context": "pplication/interfaces/ai_model_service.py\n# Interface for AI model services used by the digital twin\n# Following Dependency Inversion Principle - high-level modules depend on abstractions\n\nfrom abc import ABC, abstractmethod\nfrom typing import Any, Dict\nfrom uuid import UUID\n\n\nclass AIM"
    },
    {
      "file": "app/application/interfaces/ai_model_service.py",
      "phi_type": "NAME",
      "evidence": "Inversion Principle",
      "context": "pplication/interfaces/ai_model_service.py\n# Interface for AI model services used by the digital twin\n# Following Dependency Inversion Principle - high-level modules depend on abstractions\n\nfrom abc import ABC, abstractmethod\nfrom typing import Any, Dict\nfrom uuid import UUID\n\n\nclass AIM"
    },
    {
      "file": "app/application/interfaces/ai_model_service.py",
      "phi_type": "NAME",
      "evidence": "Interface Segregation",
      "context": "ID\n\n\nclass AIModelService(ABC):\n    \"\"\"\n    Interface for AI model services used by the digital twin\n    This follows the Interface Segregation Principle by providing focused interfaces\n    \"\"\"\n\n    @abstractmethod\n    async def predict(self, input_data: Dict[str, Any]) -> Dict[str, A"
    },
    {
      "file": "app/application/interfaces/notification_service.py",
      "phi_type": "NAME",
      "evidence": "Following Dependency",
      "context": "# app/application/interfaces/notification_service.py\n# Interface for notification services\n# Following Dependency Inversion Principle and ensuring HIPAA compliance\n\nfrom abc import ABC, abstractmethod\nfrom typing import Any, Dict, List\nfrom uuid import UUID\n\n\ncla"
    },
    {
      "file": "app/application/interfaces/notification_service.py",
      "phi_type": "NAME",
      "evidence": "Inversion Principle",
      "context": "# app/application/interfaces/notification_service.py\n# Interface for notification services\n# Following Dependency Inversion Principle and ensuring HIPAA compliance\n\nfrom abc import ABC, abstractmethod\nfrom typing import Any, Dict, List\nfrom uuid import UUID\n\n\ncla"
    },
    {
      "file": "app/application/interfaces/notification_service.py",
      "phi_type": "NAME",
      "evidence": "Interface Segregation",
      "context": "m uuid import UUID\n\n\nclass NotificationService(ABC):\n    \"\"\"\n    Interface for notification services\n    This follows the Interface Segregation Principle by providing focused interfaces\n    All implementations must ensure HIPAA compliance for PHI\n    \"\"\"\n\n    @abstractmethod\n    async"
    },
    {
      "file": "app/presentation/api/docs/openapi.yaml",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "openapi: 3.1.0\ninfo:\n  title: NOVAMIND API\n  description: |\n    HIPAA-compliant API for the NOVAMIND concierge psychiatric platform with Digital Twin technology.\n    \n    This API provides secure access to patient data, clinical assessments, digital twin functi"
    },
    {
      "file": "app/presentation/api/docs/openapi.yaml",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "openapi: 3.1.0\ninfo:\n  title: NOVAMIND API\n  description: |\n    HIPAA-compliant API for the NOVAMIND concierge psychiatric platform with Digital Twin technology.\n    \n    This API provides secure access to patient data, clinical assessments, digital twin functi"
    },
    {
      "file": "app/presentation/api/docs/openapi.yaml",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "openapi: 3.1.0\ninfo:\n  title: NOVAMIND API\n  description: |\n    HIPAA-compliant API for the NOVAMIND concierge psychiatric platform with Digital Twin technology.\n    \n    This API provides secure access to patient data, clinical assessments, digital twin functi"
    },
    {
      "file": "app/presentation/api/docs/openapi.yaml",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "openapi: 3.1.0\ninfo:\n  title: NOVAMIND API\n  description: |\n    HIPAA-compliant API for the NOVAMIND concierge psychiatric platform with Digital Twin technology.\n    \n    This API provides secure access to patient data, clinical assessments, digital twin functi"
    },
    {
      "file": "app/presentation/api/docs/openapi.yaml",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "openapi: 3.1.0\ninfo:\n  title: NOVAMIND API\n  description: |\n    HIPAA-compliant API for the NOVAMIND concierge psychiatric platform with Digital Twin technology.\n    \n    This API provides secure access to patient data, clinical assessments, digital twin functi"
    },
    {
      "file": "app/presentation/api/docs/openapi.yaml",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "openapi: 3.1.0\ninfo:\n  title: NOVAMIND API\n  description: |\n    HIPAA-compliant API for the NOVAMIND concierge psychiatric platform with Digital Twin technology.\n    \n    This API provides secure access to patient data, clinical assessments, digital twin functi"
    },
    {
      "file": "app/presentation/api/docs/openapi.yaml",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "openapi: 3.1.0\ninfo:\n  title: NOVAMIND API\n  description: |\n    HIPAA-compliant API for the NOVAMIND concierge psychiatric platform with Digital Twin technology.\n    \n    This API provides secure access to patient data, clinical assessments, digital twin functi"
    },
    {
      "file": "app/presentation/api/docs/openapi.yaml",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "openapi: 3.1.0\ninfo:\n  title: NOVAMIND API\n  description: |\n    HIPAA-compliant API for the NOVAMIND concierge psychiatric platform with Digital Twin technology.\n    \n    This API provides secure access to patient data, clinical assessments, digital twin functi"
    },
    {
      "file": "app/presentation/api/docs/openapi.yaml",
      "phi_type": "NAME",
      "evidence": "Medical Record",
      "context": "rties:\n        id:\n          type: string\n          format: uuid\n        mrn:\n          type: string\n          description: Medical Record Number\n        first_name:\n          type: string\n        last_name:\n          type: string\n        date_o"
    },
    {
      "file": "app/presentation/web/templates/base/navigation.html",
      "phi_type": "NAME",
      "evidence": "All Patients",
      "context": "</a>\n                        <ul class=\"dropdown-menu\" aria-labelledby=\"patientsDropdown\">\n                            <li><a class=\"dropdown-item\" href=\"{{ url_for('patients.list') }}\">All Patients</a></li>\n                            <li><a class=\"dropdown-item\" href=\"{{ url_for('patients.create') }}\">Ne"
    },
    {
      "file": "app/presentation/web/templates/base/navigation.html",
      "phi_type": "NAME",
      "evidence": "New Patient",
      "context": "<li><a class=\"dropdown-item\" href=\"{{ url_for('patients.list') }}\">All Patients</a></li>\n                            <li><a class=\"dropdown-item\" href=\"{{ url_for('patients.create') }}\">New Patient</a></li>\n                            <li><hr class=\"dropdown-divider\"></li>\n                            <li>"
    },
    {
      "file": "app/presentation/web/templates/base/navigation.html",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "le\" href=\"#\" id=\"digitalTwinDropdown\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n                            <i class=\"fas fa-brain\"></i> Digital Twin\n                        </a>\n                        <ul class=\"dropdown-menu\" aria-labelledby=\"dig"
    },
    {
      "file": "app/presentation/web/templates/base/navigation.html",
      "phi_type": "NAME",
      "evidence": "Symptom Forecast",
      "context": "<li><a class=\"dropdown-item\" href=\"{{ url_for('digital_twin.overview') }}\">Overview</a></li>\n                            <li><a class=\"dropdown-item\" href=\"{{ url_for('digital_twin.symptom_forecast') }}\">Symptom Forecast</a></li>\n                            <li><a class=\"dropdown-item\" href=\"{{ url_for('digital_twin.biometrics'"
    },
    {
      "file": "app/presentation/web/templates/base/navigation.html",
      "phi_type": "NAME",
      "evidence": "Biometric Correlations",
      "context": "lass=\"dropdown-item\" href=\"{{ url_for('digital_twin.symptom_forecast') }}\">Symptom Forecast</a></li>\n                            <li><a class=\"dropdown-item\" href=\"{{ url_for('digital_twin.biometrics') }}\">Biometric Correlations</a></li>\n                            <li><a class=\"dropdown-item\" href=\"{{ url_for('digital_twin.pharmacogen"
    },
    {
      "file": "app/presentation/web/templates/base/navigation.html",
      "phi_type": "NAME",
      "evidence": "User Management",
      "context": "</a>\n                        <ul class=\"dropdown-menu\" aria-labelledby=\"adminDropdown\">\n                            <li><a class=\"dropdown-item\" href=\"{{ url_for('admin.users') }}\">User Management</a></li>\n                            <li><a class=\"dropdown-item\" href=\"{{ url_for('admin.audit_logs') }}\">A"
    },
    {
      "file": "app/presentation/web/templates/base/navigation.html",
      "phi_type": "NAME",
      "evidence": "Audit Logs",
      "context": "<li><a class=\"dropdown-item\" href=\"{{ url_for('admin.users') }}\">User Management</a></li>\n                            <li><a class=\"dropdown-item\" href=\"{{ url_for('admin.audit_logs') }}\">Audit Logs</a></li>\n                            <li><a class=\"dropdown-item\" href=\"{{ url_for('admin.settings') }}\">Sys"
    },
    {
      "file": "app/presentation/web/templates/base/navigation.html",
      "phi_type": "NAME",
      "evidence": "System Settings",
      "context": "<li><a class=\"dropdown-item\" href=\"{{ url_for('admin.audit_logs') }}\">Audit Logs</a></li>\n                            <li><a class=\"dropdown-item\" href=\"{{ url_for('admin.settings') }}\">System Settings</a></li>\n                        </ul>\n                    </li>\n                    {% endif %}"
    },
    {
      "file": "app/presentation/web/templates/base/layout.html",
      "phi_type": "NAME",
      "evidence": "Concierge Psychiatric",
      "context": "<meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{% block title %}NOVAMIND - Concierge Psychiatric Platform{% endblock %}</title>\n    <meta name=\"description\" content=\"HIPAA-compliant concierge psychiatric platform with Digital T"
    },
    {
      "file": "app/presentation/web/templates/base/layout.html",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "le=1.0\">\n    <title>{% block title %}NOVAMIND - Concierge Psychiatric Platform{% endblock %}</title>\n    <meta name=\"description\" content=\"HIPAA-compliant concierge psychiatric platform with Digital Twin technology\">\n    <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='css/main.css') }}\">\n    <link rel=\""
    },
    {
      "file": "app/presentation/web/templates/base/layout.html",
      "phi_type": "NAME",
      "evidence": "Security Features",
      "context": "le.min.js\"></script>\n    <script src=\"{{ url_for('static', filename='js/main.js') }}\"></script>\n    \n    <!-- HIPAA Security Features -->\n    <script src=\"{{ url_for('static', filename='js/session-timeout.js') }}\"></script>\n    <script s"
    },
    {
      "file": "app/presentation/web/templates/digital_twin/overview.html",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "{% extends 'base/layout.html' %}\n\n{% block title %}Digital Twin Overview - NOVAMIND{% endblock %}\n\n{% block additional_styles %}\n<link rel=\"stylesheet\" href=\"{{ url_for('static', filename='css/digi"
    },
    {
      "file": "app/presentation/web/templates/digital_twin/overview.html",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "{% extends 'base/layout.html' %}\n\n{% block title %}Digital Twin Overview - NOVAMIND{% endblock %}\n\n{% block additional_styles %}\n<link rel=\"stylesheet\" href=\"{{ url_for('static', filename='css/digi"
    },
    {
      "file": "app/presentation/web/templates/digital_twin/overview.html",
      "phi_type": "NAME",
      "evidence": "Export Report",
      "context": "/button>\n                <button type=\"button\" class=\"btn btn-outline-primary\" id=\"exportReportBtn\">\n                    <i class=\"fas fa-file-export\"></i> Export Report\n                </button>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"row\">"
    },
    {
      "file": "app/presentation/web/templates/digital_twin/overview.html",
      "phi_type": "NAME",
      "evidence": "Patient Summary",
      "context": "Report\n                </button>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"row\">\n        <!-- Patient Summary Card -->\n        <div class=\"col-md-4 mb-4\">\n            <div class=\"card h-100 border-0 shadow-sm\">"
    },
    {
      "file": "app/presentation/web/templates/digital_twin/overview.html",
      "phi_type": "NAME",
      "evidence": "Patient Summary",
      "context": "Report\n                </button>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"row\">\n        <!-- Patient Summary Card -->\n        <div class=\"col-md-4 mb-4\">\n            <div class=\"card h-100 border-0 shadow-sm\">"
    },
    {
      "file": "app/presentation/web/templates/digital_twin/overview.html",
      "phi_type": "NAME",
      "evidence": "Primary Diagnosis",
      "context": "</li>\n                        <li class=\"list-group-item d-flex justify-content-between\">\n                            <span>Primary Diagnosis:</span>\n                            <strong>{{ patient.primary_diagnosis }}</strong>"
    },
    {
      "file": "app/presentation/web/templates/digital_twin/overview.html",
      "phi_type": "NAME",
      "evidence": "Treatment Duration",
      "context": "</li>\n                        <li class=\"list-group-item d-flex justify-content-between\">\n                            <span>Treatment Duration:</span>\n                            <strong>{{ patient.treatment_duration }}</strong>"
    },
    {
      "file": "app/presentation/web/templates/digital_twin/overview.html",
      "phi_type": "NAME",
      "evidence": "Current Medications",
      "context": "</li>\n                        <li class=\"list-group-item d-flex justify-content-between\">\n                            <span>Current Medications:</span>\n                            <strong>{{ patient.medications|length }}</strong>"
    },
    {
      "file": "app/presentation/web/templates/digital_twin/overview.html",
      "phi_type": "NAME",
      "evidence": "View Full",
      "context": "href=\"{{ url_for('patients.view', id=patient.id) }}\" class=\"btn btn-sm btn-outline-secondary w-100\">\n                            View Full Profile\n                        </a>\n                    </div>\n                </div>\n            </div>"
    },
    {
      "file": "app/presentation/web/templates/digital_twin/overview.html",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "{% extends 'base/layout.html' %}\n\n{% block title %}Digital Twin Overview - NOVAMIND{% endblock %}\n\n{% block additional_styles %}\n<link rel=\"stylesheet\" href=\"{{ url_for('static', filename='css/digi"
    },
    {
      "file": "app/presentation/web/templates/digital_twin/overview.html",
      "phi_type": "NAME",
      "evidence": "Status Card",
      "context": "</a>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <!-- Digital Twin Status Card -->\n        <div class=\"col-md-8 mb-4\">\n            <div class=\"card h-100 border-0 shadow-sm\">"
    },
    {
      "file": "app/presentation/web/templates/digital_twin/overview.html",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "{% extends 'base/layout.html' %}\n\n{% block title %}Digital Twin Overview - NOVAMIND{% endblock %}\n\n{% block additional_styles %}\n<link rel=\"stylesheet\" href=\"{{ url_for('static', filename='css/digi"
    },
    {
      "file": "app/presentation/web/templates/digital_twin/overview.html",
      "phi_type": "NAME",
      "evidence": "Symptom Forecast",
      "context": "<div class=\"d-flex justify-content-between align-items-center mb-2\">\n                                    <span>Symptom Forecast Accuracy</span>\n                                    <span class=\"badge bg-success\">{{ digital_twin.symptom_forecast"
    },
    {
      "file": "app/presentation/web/templates/digital_twin/overview.html",
      "phi_type": "NAME",
      "evidence": "Biometric Correlation",
      "context": "<div class=\"d-flex justify-content-between align-items-center mb-2\">\n                                    <span>Biometric Correlation Strength</span>\n                                    <span class=\"badge bg-primary\">{{ digital_twin.biometric_correl"
    },
    {
      "file": "app/presentation/web/templates/digital_twin/overview.html",
      "phi_type": "NAME",
      "evidence": "Pharmacogenomic Match",
      "context": "<div class=\"d-flex justify-content-between align-items-center mb-2\">\n                                    <span>Pharmacogenomic Match</span>\n                                    <span class=\"badge bg-info\">{{ digital_twin.pharmacogenomic_mat"
    },
    {
      "file": "app/presentation/web/templates/digital_twin/overview.html",
      "phi_type": "NAME",
      "evidence": "Data Points",
      "context": "<div class=\"col-md-6\">\n                            <div class=\"twin-data-summary\">\n                                <h6 class=\"text-muted mb-3\">Data Points</h6>\n                                <div class=\"data-point-item d-flex justify-content-between mb-2\">"
    },
    {
      "file": "app/presentation/web/templates/digital_twin/overview.html",
      "phi_type": "NAME",
      "evidence": "Clinical Assessments",
      "context": "6>\n                                <div class=\"data-point-item d-flex justify-content-between mb-2\">\n                                    <span><i class=\"fas fa-calendar-check text-success\"></i> Clinical Assessments</span>\n                                    <strong>{{ digital_twin.clinical_assessments_count }}</strong>"
    },
    {
      "file": "app/presentation/web/templates/digital_twin/overview.html",
      "phi_type": "NAME",
      "evidence": "Biometric Readings",
      "context": "v>\n                                <div class=\"data-point-item d-flex justify-content-between mb-2\">\n                                    <span><i class=\"fas fa-heartbeat text-danger\"></i> Biometric Readings</span>\n                                    <strong>{{ digital_twin.biometric_readings_count }}</strong>"
    },
    {
      "file": "app/presentation/web/templates/digital_twin/overview.html",
      "phi_type": "NAME",
      "evidence": "Medication Events",
      "context": "v>\n                                <div class=\"data-point-item d-flex justify-content-between mb-2\">\n                                    <span><i class=\"fas fa-pills text-warning\"></i> Medication Events</span>\n                                    <strong>{{ digital_twin.medication_events_count }}</strong>"
    },
    {
      "file": "app/presentation/web/templates/digital_twin/overview.html",
      "phi_type": "NAME",
      "evidence": "Genetic Markers",
      "context": "v>\n                                <div class=\"data-point-item d-flex justify-content-between mb-2\">\n                                    <span><i class=\"fas fa-dna text-info\"></i> Genetic Markers</span>\n                                    <strong>{{ digital_twin.genetic_markers_count }}</strong>"
    },
    {
      "file": "app/presentation/web/templates/digital_twin/overview.html",
      "phi_type": "NAME",
      "evidence": "Cognitive Assessments",
      "context": "</div>\n                                <div class=\"data-point-item d-flex justify-content-between\">\n                                    <span><i class=\"fas fa-brain text-primary\"></i> Cognitive Assessments</span>\n                                    <strong>{{ digital_twin.cognitive_assessments_count }}</strong>"
    },
    {
      "file": "app/presentation/web/templates/digital_twin/overview.html",
      "phi_type": "NAME",
      "evidence": "Last Updated",
      "context": "</div>\n                            </div>\n                            <div class=\"mt-4\">\n                                <p class=\"text-muted mb-1\">Last Updated</p>\n                                <p class=\"mb-0\"><strong>{{ digital_twin.last_updated }}</strong></p"
    },
    {
      "file": "app/presentation/web/templates/digital_twin/overview.html",
      "phi_type": "NAME",
      "evidence": "Symptom Forecast",
      "context": "<div class=\"d-flex justify-content-between align-items-center mb-2\">\n                                    <span>Symptom Forecast Accuracy</span>\n                                    <span class=\"badge bg-success\">{{ digital_twin.symptom_forecast"
    },
    {
      "file": "app/presentation/web/templates/digital_twin/overview.html",
      "phi_type": "NAME",
      "evidence": "Clinical Insights",
      "context": "</div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"row\">\n        <!-- Clinical Insights Card -->\n        <div class=\"col-md-6 mb-4\">\n            <div class=\"card h-100 border-0 shadow-sm\">"
    },
    {
      "file": "app/presentation/web/templates/digital_twin/overview.html",
      "phi_type": "NAME",
      "evidence": "Clinical Insights",
      "context": "</div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"row\">\n        <!-- Clinical Insights Card -->\n        <div class=\"col-md-6 mb-4\">\n            <div class=\"card h-100 border-0 shadow-sm\">"
    },
    {
      "file": "app/presentation/web/templates/digital_twin/overview.html",
      "phi_type": "NAME",
      "evidence": "Treatment Response",
      "context": "{% endfor %}\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <!-- Treatment Response Card -->\n        <div class=\"col-md-6 mb-4\">\n            <div class=\"card h-100 border-0 shadow-sm\">"
    },
    {
      "file": "app/presentation/web/templates/digital_twin/overview.html",
      "phi_type": "NAME",
      "evidence": "Treatment Response",
      "context": "{% endfor %}\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <!-- Treatment Response Card -->\n        <div class=\"col-md-6 mb-4\">\n            <div class=\"card h-100 border-0 shadow-sm\">"
    },
    {
      "file": "app/presentation/web/templates/digital_twin/overview.html",
      "phi_type": "NAME",
      "evidence": "Treatment Response",
      "context": "{% endfor %}\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <!-- Treatment Response Card -->\n        <div class=\"col-md-6 mb-4\">\n            <div class=\"card h-100 border-0 shadow-sm\">"
    },
    {
      "file": "app/presentation/web/templates/digital_twin/overview.html",
      "phi_type": "NAME",
      "evidence": "Symptom Severity",
      "context": "data: {\n        labels: {{ digital_twin.treatment_response_dates|tojson }},\n        datasets: [{\n            label: 'Symptom Severity',\n            data: {{ digital_twin.symptom_severity_scores|tojson }},\n            borderColor: 'rgba"
    },
    {
      "file": "app/presentation/web/templates/digital_twin/overview.html",
      "phi_type": "NAME",
      "evidence": "Functional Improvement",
      "context": "groundColor: 'rgba(220, 53, 69, 0.1)',\n            tension: 0.4,\n            fill: true\n        }, {\n            label: 'Functional Improvement',\n            data: {{ digital_twin.functional_improvement_scores|tojson }},\n            borderColor:"
    },
    {
      "file": "app/presentation/web/templates/digital_twin/overview.html",
      "phi_type": "NAME",
      "evidence": "Refresh Digital",
      "context": "ticks: {\n                    stepSize: 20\n                }\n            }\n        }\n    }\n});\n\n// Refresh Digital Twin data\ndocument.getElementById('refreshTwinBtn').addEventListener('click', function() {\n    fetch(\"{{ url_"
    },
    {
      "file": "app/presentation/web/templates/digital_twin/overview.html",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "{% extends 'base/layout.html' %}\n\n{% block title %}Digital Twin Overview - NOVAMIND{% endblock %}\n\n{% block additional_styles %}\n<link rel=\"stylesheet\" href=\"{{ url_for('static', filename='css/digi"
    },
    {
      "file": "app/presentation/web/templates/digital_twin/overview.html",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "{% extends 'base/layout.html' %}\n\n{% block title %}Digital Twin Overview - NOVAMIND{% endblock %}\n\n{% block additional_styles %}\n<link rel=\"stylesheet\" href=\"{{ url_for('static', filename='css/digi"
    },
    {
      "file": "app/presentation/web/templates/digital_twin/overview.html",
      "phi_type": "NAME",
      "evidence": "Export Report",
      "context": "/button>\n                <button type=\"button\" class=\"btn btn-outline-primary\" id=\"exportReportBtn\">\n                    <i class=\"fas fa-file-export\"></i> Export Report\n                </button>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"row\">"
    },
    {
      "file": "app/domain/interfaces/ml_services.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "\"\"\"\nDomain interfaces for ML services in the NOVAMIND system.\n\nThis module defines the domain interfaces for ML services used in the Digital Twin\nfunctionality, following Clean Architecture principles by ensuring that the domain\nlayer has no dep"
    },
    {
      "file": "app/domain/interfaces/ml_services.py",
      "phi_type": "NAME",
      "evidence": "Clean Architecture",
      "context": "NOVAMIND system.\n\nThis module defines the domain interfaces for ML services used in the Digital Twin\nfunctionality, following Clean Architecture principles by ensuring that the domain\nlayer has no dependencies on infrastructure implementations.\n\"\"\"\n\nfrom abc import ABC, abstractmeth"
    },
    {
      "file": "app/domain/interfaces/ml_services.py",
      "phi_type": "NAME",
      "evidence": "Symptom Forecasting",
      "context": ", Dict, List, Optional, Union\nfrom uuid import UUID\n\n\nclass ISymptomForecastingService(ABC):\n    \"\"\"\n    Interface for the Symptom Forecasting Service.\n\n    This interface defines the contract that any implementation of the\n    Symptom Forecasting Ser"
    },
    {
      "file": "app/domain/interfaces/ml_services.py",
      "phi_type": "NAME",
      "evidence": "Symptom Forecasting",
      "context": ", Dict, List, Optional, Union\nfrom uuid import UUID\n\n\nclass ISymptomForecastingService(ABC):\n    \"\"\"\n    Interface for the Symptom Forecasting Service.\n\n    This interface defines the contract that any implementation of the\n    Symptom Forecasting Ser"
    },
    {
      "file": "app/domain/interfaces/ml_services.py",
      "phi_type": "NAME",
      "evidence": "Biometric Correlation",
      "context": "rics cannot be retrieved\n        \"\"\"\n        pass\n\n\nclass IBiometricCorrelationService(ABC):\n    \"\"\"\n    Interface for the Biometric Correlation Service.\n\n    This interface defines the contract that any implementation of the\n    Biometric Correlation S"
    },
    {
      "file": "app/domain/interfaces/ml_services.py",
      "phi_type": "NAME",
      "evidence": "Biometric Correlation",
      "context": "rics cannot be retrieved\n        \"\"\"\n        pass\n\n\nclass IBiometricCorrelationService(ABC):\n    \"\"\"\n    Interface for the Biometric Correlation Service.\n\n    This interface defines the contract that any implementation of the\n    Biometric Correlation S"
    },
    {
      "file": "app/domain/interfaces/ml_services.py",
      "phi_type": "NAME",
      "evidence": "Pharmacogenomics Service",
      "context": "Error: If the analysis fails\n        \"\"\"\n        pass\n\n\nclass IPharmacogenomicsService(ABC):\n    \"\"\"\n    Interface for the Pharmacogenomics Service.\n\n    This interface defines the contract that any implementation of the\n    Pharmacogenomics Servic"
    },
    {
      "file": "app/domain/interfaces/ml_services.py",
      "phi_type": "NAME",
      "evidence": "Pharmacogenomics Service",
      "context": "Error: If the analysis fails\n        \"\"\"\n        pass\n\n\nclass IPharmacogenomicsService(ABC):\n    \"\"\"\n    Interface for the Pharmacogenomics Service.\n\n    This interface defines the contract that any implementation of the\n    Pharmacogenomics Servic"
    },
    {
      "file": "app/domain/interfaces/ml_services.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "\"\"\"\nDomain interfaces for ML services in the NOVAMIND system.\n\nThis module defines the domain interfaces for ML services used in the Digital Twin\nfunctionality, following Clean Architecture principles by ensuring that the domain\nlayer has no dep"
    },
    {
      "file": "app/domain/interfaces/ml_services.py",
      "phi_type": "NAME",
      "evidence": "Integration Service",
      "context": "f the prediction fails\n        \"\"\"\n        pass\n\n\nclass IDigitalTwinIntegrationService(ABC):\n    \"\"\"\n    Interface for the Digital Twin Integration Service.\n\n    This interface defines the contract that any implementation of the\n    Digital Twin Integratio"
    },
    {
      "file": "app/domain/interfaces/ml_services.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "\"\"\"\nDomain interfaces for ML services in the NOVAMIND system.\n\nThis module defines the domain interfaces for ML services used in the Digital Twin\nfunctionality, following Clean Architecture principles by ensuring that the domain\nlayer has no dep"
    },
    {
      "file": "app/domain/interfaces/ml_services.py",
      "phi_type": "NAME",
      "evidence": "Integration Service",
      "context": "f the prediction fails\n        \"\"\"\n        pass\n\n\nclass IDigitalTwinIntegrationService(ABC):\n    \"\"\"\n    Interface for the Digital Twin Integration Service.\n\n    This interface defines the contract that any implementation of the\n    Digital Twin Integratio"
    },
    {
      "file": "app/domain/interfaces/ml_services.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "\"\"\"\nDomain interfaces for ML services in the NOVAMIND system.\n\nThis module defines the domain interfaces for ML services used in the Digital Twin\nfunctionality, following Clean Architecture principles by ensuring that the domain\nlayer has no dep"
    },
    {
      "file": "app/domain/interfaces/ml_services.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "\"\"\"\nDomain interfaces for ML services in the NOVAMIND system.\n\nThis module defines the domain interfaces for ML services used in the Digital Twin\nfunctionality, following Clean Architecture principles by ensuring that the domain\nlayer has no dep"
    },
    {
      "file": "app/domain/interfaces/ml_services.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "\"\"\"\nDomain interfaces for ML services in the NOVAMIND system.\n\nThis module defines the domain interfaces for ML services used in the Digital Twin\nfunctionality, following Clean Architecture principles by ensuring that the domain\nlayer has no dep"
    },
    {
      "file": "app/domain/interfaces/ml_service_interface.py",
      "phi_type": "NAME",
      "evidence": "Machine Learning",
      "context": "\"\"\"\nMachine Learning Service Interface for NOVAMIND.\n\nThis module defines the interfaces for ML services following Clean Architecture\nprinciples, ensuri"
    },
    {
      "file": "app/domain/interfaces/ml_service_interface.py",
      "phi_type": "NAME",
      "evidence": "Service Interface",
      "context": "\"\"\"\nMachine Learning Service Interface for NOVAMIND.\n\nThis module defines the interfaces for ML services following Clean Architecture\nprinciples, ensuri"
    },
    {
      "file": "app/domain/interfaces/ml_service_interface.py",
      "phi_type": "NAME",
      "evidence": "Clean Architecture",
      "context": "\"\"\"\nMachine Learning Service Interface for NOVAMIND.\n\nThis module defines the interfaces for ML services following Clean Architecture\nprinciples, ensuring that the domain layer remains independent of infrastructure\nimplementations wh"
    },
    {
      "file": "app/domain/interfaces/ml_service_interface.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "taining treatment recommendations\n        \"\"\"\n        pass\n\n\nclass DigitalTwinServiceInterface(ABC):\n    \"\"\"Interface for Digital Twin integration services.\"\"\"\n\n    @abstractmethod\n    async def generate_comprehensive_patient_insights(\n        self, patient_i"
    },
    {
      "file": "app/domain/interfaces/ml_service_interface.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "taining treatment recommendations\n        \"\"\"\n        pass\n\n\nclass DigitalTwinServiceInterface(ABC):\n    \"\"\"Interface for Digital Twin integration services.\"\"\"\n\n    @abstractmethod\n    async def generate_comprehensive_patient_insights(\n        self, patient_i"
    },
    {
      "file": "app/domain/interfaces/ml_service_interface.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "taining treatment recommendations\n        \"\"\"\n        pass\n\n\nclass DigitalTwinServiceInterface(ABC):\n    \"\"\"Interface for Digital Twin integration services.\"\"\"\n\n    @abstractmethod\n    async def generate_comprehensive_patient_insights(\n        self, patient_i"
    },
    {
      "file": "app/domain/interfaces/ml_service_interface.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "taining treatment recommendations\n        \"\"\"\n        pass\n\n\nclass DigitalTwinServiceInterface(ABC):\n    \"\"\"Interface for Digital Twin integration services.\"\"\"\n\n    @abstractmethod\n    async def generate_comprehensive_patient_insights(\n        self, patient_i"
    },
    {
      "file": "app/domain/repositories/clinical_note_repository.py",
      "phi_type": "NAME",
      "evidence": "Clinical Note",
      "context": "\"\"\"\nClinical Note repository interface for the NOVAMIND backend.\n\nThis module defines the interface for clinical note data access operations.\nFollowing the Dependen"
    },
    {
      "file": "app/domain/repositories/clinical_note_repository.py",
      "phi_type": "NAME",
      "evidence": "Dependency Inversion",
      "context": "r the NOVAMIND backend.\n\nThis module defines the interface for clinical note data access operations.\nFollowing the Dependency Inversion Principle, the domain layer depends on\nthis abstraction rather than concrete implementations.\n\"\"\"\n\nfrom abc import ABC, abstractmethod\nfro"
    },
    {
      "file": "app/domain/repositories/provider_repository.py",
      "phi_type": "NAME",
      "evidence": "Dependency Inversion",
      "context": "ce for the NOVAMIND backend.\n\nThis module defines the interface for provider data access operations.\nFollowing the Dependency Inversion Principle, the domain layer depends on\nthis abstraction rather than concrete implementations.\n\"\"\"\n\nfrom abc import ABC, abstractmethod\nfro"
    },
    {
      "file": "app/domain/repositories/provider_repository.py",
      "phi_type": "NAME",
      "evidence": "The National",
      "context": "er: str) -> Optional[Provider]:\n        \"\"\"\n        Retrieve a provider by NPI number\n\n        Args:\n            npi_number: The National Provider Identifier to search for\n\n        Returns:\n            The provider entity if found, None otherwise\n\n        Raises:"
    },
    {
      "file": "app/domain/repositories/provider_repository.py",
      "phi_type": "NAME",
      "evidence": "Provider Identifier",
      "context": "er: str) -> Optional[Provider]:\n        \"\"\"\n        Retrieve a provider by NPI number\n\n        Args:\n            npi_number: The National Provider Identifier to search for\n\n        Returns:\n            The provider entity if found, None otherwise\n\n        Raises:"
    },
    {
      "file": "app/domain/repositories/appointment_repository.py",
      "phi_type": "NAME",
      "evidence": "Dependency Inversion",
      "context": "for the NOVAMIND backend.\n\nThis module defines the interface for appointment data access operations.\nFollowing the Dependency Inversion Principle, the domain layer depends on\nthis abstraction rather than concrete implementations.\n\"\"\"\n\nfrom abc import ABC, abstractmethod\nfro"
    },
    {
      "file": "app/domain/repositories/patient_repository.py",
      "phi_type": "NAME",
      "evidence": "Dependency Inversion",
      "context": "ace for the NOVAMIND backend.\n\nThis module defines the interface for patient data access operations.\nFollowing the Dependency Inversion Principle, the domain layer depends on\nthis abstraction rather than concrete implementations.\n\"\"\"\n\nfrom abc import ABC, abstractmethod\nfro"
    },
    {
      "file": "app/domain/repositories/medication_repository.py",
      "phi_type": "NAME",
      "evidence": "Dependency Inversion",
      "context": "for the NOVAMIND backend.\n\nThis module defines the interface for medication data access operations.\nFollowing the Dependency Inversion Principle, the domain layer depends on\nthis abstraction rather than concrete implementations.\n\"\"\"\n\nfrom abc import ABC, abstractmethod\nfro"
    },
    {
      "file": "app/domain/events/appointment_events.py",
      "phi_type": "NAME",
      "evidence": "Driven Design",
      "context": "module for the NOVAMIND backend.\n\nThis module contains domain events related to appointments in the\nconcierge psychiatry practice, following the Domain-Driven Design pattern.\n\"\"\"\n\nfrom dataclasses import dataclass\nfrom datetime import datetime\nfrom typing import Optional\nfr"
    },
    {
      "file": "app/domain/events/clinical_documentation_events.py",
      "phi_type": "NAME",
      "evidence": "Driven Design",
      "context": "r the NOVAMIND backend.\n\nThis module contains domain events related to clinical documentation in the\nconcierge psychiatry practice, following the Domain-Driven Design pattern.\n\"\"\"\n\nfrom dataclasses import dataclass\nfrom datetime import datetime\nfrom typing import List, Optio"
    },
    {
      "file": "app/domain/events/medication_events.py",
      "phi_type": "NAME",
      "evidence": "Driven Design",
      "context": "or the NOVAMIND backend.\n\nThis module contains domain events related to medication management in the\nconcierge psychiatry practice, following the Domain-Driven Design pattern.\n\"\"\"\n\nfrom dataclasses import dataclass\nfrom datetime import datetime\nfrom typing import List, Optio"
    },
    {
      "file": "app/domain/events/medication_events.py",
      "phi_type": "NAME",
      "evidence": "Reduced Dosage",
      "context": ", \"Moderate\", \"Severe\"\n    onset_date: Optional[datetime] = None\n    action_taken: Optional[str] = (\n        None  # e.g., \"Discontinued\", \"Reduced Dosage\", \"Monitoring\"\n    )\n    is_serious_adverse_event: bool = False"
    },
    {
      "file": "app/domain/events/patient_events.py",
      "phi_type": "NAME",
      "evidence": "Driven Design",
      "context": "ents module for the NOVAMIND backend.\n\nThis module contains domain events related to patients in the\nconcierge psychiatry practice, following the Domain-Driven Design pattern.\n\"\"\"\n\nfrom dataclasses import dataclass\nfrom datetime import datetime\nfrom typing import Dict, Optio"
    },
    {
      "file": "app/domain/events/patient_events.py",
      "phi_type": "NAME",
      "evidence": "On Hold",
      "context": "ss\nclass PatientStatusChanged(PatientEvent):\n    \"\"\"Event raised when a patient's status changes\"\"\"\n\n    new_status: str  # e.g., \"Active\", \"Inactive\", \"On Hold\"\n    previous_status: str\n    reason: Optional[str] = None\n\n\n@dataclass\nclass PatientConsentUpdated("
    },
    {
      "file": "app/domain/events/patient_events.py",
      "phi_type": "NAME",
      "evidence": "Information Sharing",
      "context": "ientConsentUpdated(PatientEvent):\n    \"\"\"Event raised when a patient's consent status is updated\"\"\"\n\n    consent_type: str  # e.g., \"Treatment\", \"Information Sharing\", \"Research\"\n    consented: bool\n    consent_document_id: Optional[UUID] = None\n    expires_at: Optional[datetim"
    },
    {
      "file": "app/domain/entities/appointment.py",
      "phi_type": "NAME",
      "evidence": "If True",
      "context": "created_at: datetime = field(default_factory=datetime.utcnow)\n    created_by: Optional[UUID] = None\n    is_private: bool = False  # If True, only visible to providers\n\n\n@dataclass\nclass Appointment:\n    \"\"\"\n    Appointment entity representing a scheduled meeting bet"
    },
    {
      "file": "app/domain/entities/provider.py",
      "phi_type": "NAME",
      "evidence": "Harvard Medical",
      "context": "dential:\n    \"\"\"Value object for provider credentials\"\"\"\n\n    type: str  # e.g., \"MD\", \"PhD\", \"LCSW\"\n    issuer: str  # e.g., \"Harvard Medical School\"\n    issue_date: datetime\n    expiration_date: Optional[datetime] = None\n    identifier: Optional[st"
    },
    {
      "file": "app/domain/entities/provider.py",
      "phi_type": "NAME",
      "evidence": "National Provider",
      "context": "cialty] = field(default_factory=set)\n    credentials: List[Credential] = field(default_factory=list)\n    npi_number: Optional[str] = None  # National Provider Identifier\n    dea_number: Optional[str] = None  # Drug Enforcement Administration number\n    phone: Optional["
    },
    {
      "file": "app/domain/entities/provider.py",
      "phi_type": "NAME",
      "evidence": "Drug Enforcement",
      "context": "] = field(default_factory=list)\n    npi_number: Optional[str] = None  # National Provider Identifier\n    dea_number: Optional[str] = None  # Drug Enforcement Administration number\n    phone: Optional[str] = None\n    bio: Optional[str] = None\n    availability: List[AvailabilitySl"
    },
    {
      "file": "app/domain/entities/clinical_note.py",
      "phi_type": "NAME",
      "evidence": "Clinical Note",
      "context": "\"\"\"\nClinical Note entity module for the NOVAMIND backend.\n\nThis module contains the ClinicalNote entity, which is a core domain entity\nrepresenting clinical"
    },
    {
      "file": "app/domain/entities/digital_twin/time_series_model.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "TimeSeriesModel(DigitalTwinModel):\n    \"\"\"\n    Model for forecasting symptom trajectories over time.\n    Implements the Digital Twin Model interface.\n    \"\"\"\n\n    forecast_horizon_days: int\n    data_frequency: str  # e.g., 'daily', 'weekly'\n    symp"
    },
    {
      "file": "app/domain/services/provider_service.py",
      "phi_type": "NAME",
      "evidence": "Optional National",
      "context": "email: Provider's email address\n            specialties: Optional set of provider specialties\n            npi_number: Optional National Provider Identifier\n            dea_number: Optional DEA number for prescribers\n            phone: Optional phone numbe"
    },
    {
      "file": "app/domain/services/provider_service.py",
      "phi_type": "NAME",
      "evidence": "Provider Identifier",
      "context": "email: Provider's email address\n            specialties: Optional set of provider specialties\n            npi_number: Optional National Provider Identifier\n            dea_number: Optional DEA number for prescribers\n            phone: Optional phone numbe"
    },
    {
      "file": "app/domain/services/clinical_documentation_service.py",
      "phi_type": "NAME",
      "evidence": "Clinical Documentation",
      "context": "\"\"\"\nClinical Documentation service module for the NOVAMIND backend.\n\nThis module contains the ClinicalDocumentationService, which encapsulates complex business logic\nr"
    },
    {
      "file": "app/domain/services/analytics_service.py",
      "phi_type": "NAME",
      "evidence": "All Providers",
      "context": "\"start\": start_date.isoformat(),\n                \"end\": end_date.isoformat(),\n            },\n            \"provider_filter\": str(provider_id) if provider_id else \"All Providers\",\n            \"appointment_metrics\": {\n                \"total_appointments\": len(appointments),"
    },
    {
      "file": "app/domain/services/digital_twin_service.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "\"\"\"\nDigital Twin service module for the NOVAMIND backend.\n\nThis module contains the DigitalTwinService, which encapsulates complex business logic\nrelated to"
    },
    {
      "file": "app/domain/services/digital_twin_service.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "\"\"\"\nDigital Twin service module for the NOVAMIND backend.\n\nThis module contains the DigitalTwinService, which encapsulates complex business logic\nrelated to"
    },
    {
      "file": "app/domain/services/digital_twin_service.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "\"\"\"\nDigital Twin service module for the NOVAMIND backend.\n\nThis module contains the DigitalTwinService, which encapsulates complex business logic\nrelated to"
    },
    {
      "file": "app/domain/services/digital_twin_service.py",
      "phi_type": "NAME",
      "evidence": "Cognitive Behavioral",
      "context": "interventions.append(\n                    {\n                        \"type\": \"therapy\",\n                        \"name\": \"Cognitive Behavioral Therapy\",\n                        \"description\": \"Weekly CBT sessions focusing on symptom management\","
    },
    {
      "file": "app/domain/services/digital_twin_service.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "\"\"\"\nDigital Twin service module for the NOVAMIND backend.\n\nThis module contains the DigitalTwinService, which encapsulates complex business logic\nrelated to"
    },
    {
      "file": "app/domain/services/digital_twin_service.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "\"\"\"\nDigital Twin service module for the NOVAMIND backend.\n\nThis module contains the DigitalTwinService, which encapsulates complex business logic\nrelated to"
    },
    {
      "file": "app/domain/services/digital_twin_service.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "\"\"\"\nDigital Twin service module for the NOVAMIND backend.\n\nThis module contains the DigitalTwinService, which encapsulates complex business logic\nrelated to"
    },
    {
      "file": "app/domain/services/digital_twin_service.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "\"\"\"\nDigital Twin service module for the NOVAMIND backend.\n\nThis module contains the DigitalTwinService, which encapsulates complex business logic\nrelated to"
    },
    {
      "file": "app/domain/services/digital_twin_service.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "\"\"\"\nDigital Twin service module for the NOVAMIND backend.\n\nThis module contains the DigitalTwinService, which encapsulates complex business logic\nrelated to"
    },
    {
      "file": "app/domain/services/digital_twin_service.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "\"\"\"\nDigital Twin service module for the NOVAMIND backend.\n\nThis module contains the DigitalTwinService, which encapsulates complex business logic\nrelated to"
    },
    {
      "file": "app/domain/services/digital_twin_service.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "\"\"\"\nDigital Twin service module for the NOVAMIND backend.\n\nThis module contains the DigitalTwinService, which encapsulates complex business logic\nrelated to"
    },
    {
      "file": "app/domain/services/digital_twin_service.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "\"\"\"\nDigital Twin service module for the NOVAMIND backend.\n\nThis module contains the DigitalTwinService, which encapsulates complex business logic\nrelated to"
    },
    {
      "file": "app/domain/services/digital_twin_service.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "\"\"\"\nDigital Twin service module for the NOVAMIND backend.\n\nThis module contains the DigitalTwinService, which encapsulates complex business logic\nrelated to"
    },
    {
      "file": "app/domain/services/ai_assistant_service.py",
      "phi_type": "NAME",
      "evidence": "Major Depressive",
      "context": "previous visit. Speech is normal in rate and rhythm. Thought process is logical and goal-directed.\",\n                \"assessment\": \"Major Depressive Disorder (F32.1) - Moderate improvement with current treatment regimen. Sleep disturbance persists but is less severe than previous visits.\",\n                \"plan\": \"1. Continue current medication regimen\\n2. Implement sleep hygiene techniq"
    },
    {
      "file": "app/domain/services/ai_assistant_service.py",
      "phi_type": "NAME",
      "evidence": "Cognitive Behavioral",
      "context": "profile for MDD.\",\n                },\n                {\n                    \"type\": \"Psychotherapy\",\n                    \"name\": \"Cognitive Behavioral Therapy\",\n                    \"details\": \"Weekly sessions for 12-16 weeks\",\n                    \"evidence_lev"
    },
    {
      "file": "app/domain/services/ai_assistant_service.py",
      "phi_type": "NAME",
      "evidence": "Exercise Program",
      "context": "ith pharmacotherapy.\",\n                },\n                {\n                    \"type\": \"Lifestyle\",\n                    \"name\": \"Exercise Program\",\n                    \"details\": \"30 minutes of moderate aerobic exercise 3-5 times weekly\","
    },
    {
      "file": "app/domain/services/ai_assistant_service.py",
      "phi_type": "NAME",
      "evidence": "Interpersonal Therapy",
      "context": "fficacy profile.\",\n                },\n                {\n                    \"type\": \"Psychotherapy\",\n                    \"name\": \"Interpersonal Therapy\",\n                    \"details\": \"Weekly sessions for 12-16 weeks\",\n                    \"evidence_lev"
    },
    {
      "file": "app/domain/services/ai_assistant_service.py",
      "phi_type": "NAME",
      "evidence": "American Psychiatric",
      "context": "interventions for reported insomnia\",\n            ],\n            \"clinical_guidelines_referenced\": [\n                \"American Psychiatric Association Practice Guidelines for MDD (2022)\",\n                \"NICE Guidelines for Depression in Adults (2020)\",\n            ],\n            \"conf"
    },
    {
      "file": "app/domain/services/ai_assistant_service.py",
      "phi_type": "NAME",
      "evidence": "Association Practice",
      "context": "interventions for reported insomnia\",\n            ],\n            \"clinical_guidelines_referenced\": [\n                \"American Psychiatric Association Practice Guidelines for MDD (2022)\",\n                \"NICE Guidelines for Depression in Adults (2020)\",\n            ],\n            \"conf"
    },
    {
      "file": "app/domain/services/ai_assistant_service.py",
      "phi_type": "NAME",
      "evidence": "Common Symptoms",
      "context": "nd a loss of interest in activities you once enjoyed.\",\n                    },\n                    {\n                        \"heading\": \"Common Symptoms\",\n                        \"content\": \"\u2022 Persistent sad or empty mood\\n\u2022 Loss of interest in activitie"
    },
    {
      "file": "app/domain/services/ai_assistant_service.py",
      "phi_type": "NAME",
      "evidence": "Treatment Options",
      "context": "orthlessness or guilt\\n\u2022 Thoughts of death or suicide\",\n                    },\n                    {\n                        \"heading\": \"Treatment Options\",\n                        \"content\": \"Depression is treatable with a combination of medication, thera"
    },
    {
      "file": "app/domain/services/ai_assistant_service.py",
      "phi_type": "NAME",
      "evidence": "Care Strategies",
      "context": "rsonalized based on your specific symptoms and needs.\",\n                    },\n                    {\n                        \"heading\": \"Self-Care Strategies\",\n                        \"content\": \"\u2022 Maintain a regular sleep schedule\\n\u2022 Engage in physical activ"
    },
    {
      "file": "app/domain/services/ai_assistant_service.py",
      "phi_type": "NAME",
      "evidence": "National Institute",
      "context": "nes\",\n                    },\n                ],\n                \"resources\": [\n                    {\n                        \"name\": \"National Institute of Mental Health\",\n                        \"url\": \"https://www.nimh.nih.gov/health/topics/depression\","
    },
    {
      "file": "app/domain/services/ai_assistant_service.py",
      "phi_type": "NAME",
      "evidence": "Mental Health",
      "context": "nes\",\n                    },\n                ],\n                \"resources\": [\n                    {\n                        \"name\": \"National Institute of Mental Health\",\n                        \"url\": \"https://www.nimh.nih.gov/health/topics/depression\","
    },
    {
      "file": "app/domain/services/ai_assistant_service.py",
      "phi_type": "NAME",
      "evidence": "Bipolar Support",
      "context": "\": \"https://www.nimh.nih.gov/health/topics/depression\",\n                    },\n                    {\n                        \"name\": \"Depression and Bipolar Support Alliance\",\n                        \"url\": \"https://www.dbsalliance.org\",\n                    },"
    },
    {
      "file": "app/domain/services/ai_assistant_service.py",
      "phi_type": "NAME",
      "evidence": "Comparative Efficacy",
      "context": "sessions.\",\n                },\n            ],\n            \"recent_publications\": [\n                {\n                    \"title\": \"Comparative Efficacy of Novel Antidepressants: A Network Meta-analysis\",\n                    \"authors\": \"Johnson et al.\",\n                    \"journal\": \"JAMA Psychiatry\","
    },
    {
      "file": "app/domain/services/ai_assistant_service.py",
      "phi_type": "NAME",
      "evidence": "Novel Antidepressants",
      "context": "sessions.\",\n                },\n            ],\n            \"recent_publications\": [\n                {\n                    \"title\": \"Comparative Efficacy of Novel Antidepressants: A Network Meta-analysis\",\n                    \"authors\": \"Johnson et al.\",\n                    \"journal\": \"JAMA Psychiatry\","
    },
    {
      "file": "app/domain/services/ai_assistant_service.py",
      "phi_type": "NAME",
      "evidence": "Network Meta",
      "context": "sessions.\",\n                },\n            ],\n            \"recent_publications\": [\n                {\n                    \"title\": \"Comparative Efficacy of Novel Antidepressants: A Network Meta-analysis\",\n                    \"authors\": \"Johnson et al.\",\n                    \"journal\": \"JAMA Psychiatry\","
    },
    {
      "file": "app/domain/services/ai_assistant_service.py",
      "phi_type": "NAME",
      "evidence": "Neuroimaging Predictors",
      "context": "\"doi\": \"10.1001/jamapsychiatry.2023.0042\",\n                },\n                {\n                    \"title\": \"Neuroimaging Predictors of SSRI Response in Major Depression\",\n                    \"authors\": \"Williams et al.\",\n                    \"journal\": \"American Journal"
    },
    {
      "file": "app/domain/services/ai_assistant_service.py",
      "phi_type": "NAME",
      "evidence": "Major Depression",
      "context": "\"doi\": \"10.1001/jamapsychiatry.2023.0042\",\n                },\n                {\n                    \"title\": \"Neuroimaging Predictors of SSRI Response in Major Depression\",\n                    \"authors\": \"Williams et al.\",\n                    \"journal\": \"American Journal"
    },
    {
      "file": "app/domain/services/ai_assistant_service.py",
      "phi_type": "NAME",
      "evidence": "American Journal",
      "context": "Predictors of SSRI Response in Major Depression\",\n                    \"authors\": \"Williams et al.\",\n                    \"journal\": \"American Journal of Psychiatry\",\n                    \"year\": 2022,\n                    \"doi\": \"10.1176/appi.ajp.2022.21111126\","
    },
    {
      "file": "app/core/__init__.py",
      "phi_type": "NAME",
      "evidence": "Core Module",
      "context": "\"\"\"\nNOVAMIND Core Module\n====================\nContains essential functionality for the NOVAMIND psychiatric platform.\nAll co"
    },
    {
      "file": "app/core/__init__.py",
      "phi_type": "NAME",
      "evidence": "Clean Architecture",
      "context": "Module\n====================\nContains essential functionality for the NOVAMIND psychiatric platform.\nAll components follow HIPAA compliance standards and Clean Architecture principles.\n\"\"\"\n\n__version__ = \"0.1.0\"\n__author__ = \"NOVAMIND Development Team\""
    },
    {
      "file": "app/core/__init__.py",
      "phi_type": "NAME",
      "evidence": "Development Team",
      "context": "ents follow HIPAA compliance standards and Clean Architecture principles.\n\"\"\"\n\n__version__ = \"0.1.0\"\n__author__ = \"NOVAMIND Development Team\""
    },
    {
      "file": "app/core/config.py",
      "phi_type": "NAME",
      "evidence": "Compliant Configuration",
      "context": "\"\"\"\nHIPAA-Compliant Configuration Module\n\nThis module provides centralized configuration for the NOVAMIND platform,\nincluding security, encr"
    },
    {
      "file": "app/core/constants.py",
      "phi_type": "NAME",
      "evidence": "Constants Module",
      "context": "\"\"\"\nNOVAMIND Constants Module\n========================\nCentralized constants for the NOVAMIND psychiatric platform.\n\"\"\"\n\n# Applic"
    },
    {
      "file": "app/core/constants.py",
      "phi_type": "NAME",
      "evidence": "Concierge Psychiatric",
      "context": "AMIND psychiatric platform.\n\"\"\"\n\n# Application constants\nAPP_NAME = \"NOVAMIND\"\nAPP_VERSION = \"0.1.0\"\nAPP_DESCRIPTION = \"Concierge Psychiatric Platform with Digital Twin Technology\"\n\n# API endpoints\nAPI_PREFIX = \"/api/v1\"\nAPI_DOCS_URL = \"/docs\"\nAPI_REDOC_URL = \"/redoc\"\n\n# Authenti"
    },
    {
      "file": "app/core/constants.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "AMIND psychiatric platform.\n\"\"\"\n\n# Application constants\nAPP_NAME = \"NOVAMIND\"\nAPP_VERSION = \"0.1.0\"\nAPP_DESCRIPTION = \"Concierge Psychiatric Platform with Digital Twin Technology\"\n\n# API endpoints\nAPI_PREFIX = \"/api/v1\"\nAPI_DOCS_URL = \"/docs\"\nAPI_REDOC_URL = \"/redoc\"\n\n# Authenti"
    },
    {
      "file": "app/core/constants.py",
      "phi_type": "NAME",
      "evidence": "Digital Twin",
      "context": "AMIND psychiatric platform.\n\"\"\"\n\n# Application constants\nAPP_NAME = \"NOVAMIND\"\nAPP_VERSION = \"0.1.0\"\nAPP_DESCRIPTION = \"Concierge Psychiatric Platform with Digital Twin Technology\"\n\n# API endpoints\nAPI_PREFIX = \"/api/v1\"\nAPI_DOCS_URL = \"/docs\"\nAPI_REDOC_URL = \"/redoc\"\n\n# Authenti"
    },
    {
      "file": "app/core/utils/__init__.py",
      "phi_type": "NAME",
      "evidence": "Core Utilities",
      "context": "\"\"\"\nNOVAMIND Core Utilities\n=======================\nHIPAA-compliant utility modules for the NOVAMIND psychiatric platform.\n\"\"\""
    },
    {
      "file": "app/core/utils/validation.py",
      "phi_type": "NAME",
      "evidence": "Data Validation",
      "context": "\"\"\"\nNOVAMIND Data Validation Utility\n===============================\nComprehensive data validation for patient information in the NOVAMI"
    },
    {
      "file": "app/core/utils/validation.py",
      "phi_type": "NAME",
      "evidence": "Social Security",
      "context": "number format\"\n        )\n\n    @staticmethod\n    def validate_ssn(ssn: str) -> ValidationResult[str]:\n        \"\"\"Validate US Social Security Number format.\"\"\"\n        return DataValidator.validate_pattern(\n            ssn, ValidationPatterns.SSN, \"Invalid SS"
    },
    {
      "file": "app/core/utils/validation.py",
      "phi_type": "NAME",
      "evidence": "Validate Medical",
      "context": "XXX-XX-XXXX)\"\n        )\n\n    @staticmethod\n    def validate_mrn(mrn: str) -> ValidationResult[str]:\n        \"\"\"Validate Medical Record Number format.\"\"\"\n        return DataValidator.validate_pattern(\n            mrn, ValidationPatterns.MRN, \"Invalid MR"
    },
    {
      "file": "app/core/utils/validation.py",
      "phi_type": "NAME",
      "evidence": "Record Number",
      "context": "XXX-XX-XXXX)\"\n        )\n\n    @staticmethod\n    def validate_mrn(mrn: str) -> ValidationResult[str]:\n        \"\"\"Validate Medical Record Number format.\"\"\"\n        return DataValidator.validate_pattern(\n            mrn, ValidationPatterns.MRN, \"Invalid MR"
    },
    {
      "file": "app/core/utils/phi_sanitizer.py",
      "phi_type": "SSN",
      "evidence": "000-00-0000",
      "context": "f phi_type == PHIType.PHONE:\n            return \"555-000-0000\"\n        elif phi_type == PHIType.SSN:\n            return \"000-00-0000\"\n        elif phi_type == PHIType.DOB:\n            return \"YYYY-MM-DD\"\n        elif phi_type == PHIT"
    },
    {
      "file": "app/core/utils/phi_sanitizer.py",
      "phi_type": "PHONE",
      "evidence": "",
      "context": "\"\"\"\nPHI Sanitization Utility\n\nThis module provides utilities for detecting and sanitizing Protected Hea"
    },
    {
      "file": "app/core/utils/phi_sanitizer.py",
      "phi_type": "PHONE",
      "evidence": "",
      "context": "\"\"\"\nPHI Sanitization Utility\n\nThis module provides utilities for detecting and sanitizing Protected Hea"
    },
    {
      "file": "app/core/utils/phi_sanitizer.py",
      "phi_type": "NAME",
      "evidence": "Sanitization Utility",
      "context": "\"\"\"\nPHI Sanitization Utility\n\nThis module provides utilities for detecting and sanitizing Protected Health Information (PHI)\nin"
    },
    {
      "file": "app/core/utils/phi_sanitizer.py",
      "phi_type": "NAME",
      "evidence": "Protected Health",
      "context": "\"\"\"\nPHI Sanitization Utility\n\nThis module provides utilities for detecting and sanitizing Protected Health Information (PHI)\nin accordance with HIPAA regulations. It helps prevent accidental PHI exposure in logs,\nerror messa"
    },
    {
      "file": "app/core/utils/phi_sanitizer.py",
      "phi_type": "NAME",
      "evidence": "Protected Health",
      "context": "\"\"\"\nPHI Sanitization Utility\n\nThis module provides utilities for detecting and sanitizing Protected Health Information (PHI)\nin accordance with HIPAA regulations. It helps prevent accidental PHI exposure in logs,\nerror messa"
    },
    {
      "file": "app/core/utils/phi_sanitizer.py",
      "phi_type": "NAME",
      "evidence": "Protected Health",
      "context": "\"\"\"\nPHI Sanitization Utility\n\nThis module provides utilities for detecting and sanitizing Protected Health Information (PHI)\nin accordance with HIPAA regulations. It helps prevent accidental PHI exposure in logs,\nerror messa"
    },
    {
      "file": "app/core/utils/encryption.py",
      "phi_type": "NAME",
      "evidence": "Encryption Utility",
      "context": "\"\"\"\nNOVAMIND Encryption Utility\n==========================\nProvides secure encryption for sensitive data in the NOVAMIND platform."
    },
    {
      "file": "app/core/utils/encryption.py",
      "phi_type": "NAME",
      "evidence": "Create Fernet",
      "context": "y from secret key and salt\n        self.key = self._derive_key(self.secret_key.encode(), self.salt)\n\n        # Create Fernet cipher\n        self.cipher = Fernet(self.key)\n\n    def _derive_key(self, secret_key: bytes, salt: bytes) -"
    },
    {
      "file": "app/core/utils/auth.py",
      "phi_type": "NAME",
      "evidence": "Authentication Utility",
      "context": "\"\"\"\nNOVAMIND Authentication Utility\n==============================\nJWT token generation and validation with role-based access control."
    },
    {
      "file": "app/core/utils/data_transformation.py",
      "phi_type": "NAME",
      "evidence": "Data Transformation",
      "context": "\"\"\"\nNOVAMIND Data Transformation Utility\n===================================\nData anonymization and processing utilities for the NOVAMIND pl"
    },
    {
      "file": "app/core/utils/logging.py",
      "phi_type": "NAME",
      "evidence": "Protected Health",
      "context": "-> str:\n        \"\"\"\n        Mask PHI in log messages using the comprehensive PHI sanitizer.\n        \n        This method ensures that all Protected Health Information (PHI)\n        is properly sanitized before being logged, in accordance with\n        HIPAA requirements."
    }
  ],
  "logging_issues": [
    {
      "file": "app/infrastructure/di/container.py",
      "line": 214,
      "code": "logger.info(\"Dependency Injection Container configured with all services\")",
      "issue": "Potential PHI in logging without sanitization",
      "recommendation": "Use phi_safe_logger or sanitize the message"
    },
    {
      "file": "app/infrastructure/di/container.py",
      "line": 57,
      "code": "logger.debug(\"Dependency Injection Container initialized\")",
      "issue": "Potential PHI in logging without sanitization",
      "recommendation": "Use phi_safe_logger or sanitize the message"
    },
    {
      "file": "app/infrastructure/ml/digital_twin_integration_service.py",
      "line": 82,
      "code": "logging.info(\"Digital Twin Integration Service initialized\")",
      "issue": "Potential PHI in logging without sanitization",
      "recommendation": "Use phi_safe_logger or sanitize the message"
    },
    {
      "file": "app/infrastructure/ml/biometric_correlation/model_service.py",
      "line": 83,
      "code": "logging.info(\"Biometric Correlation Service initialized\")",
      "issue": "Potential PHI in logging without sanitization",
      "recommendation": "Use phi_safe_logger or sanitize the message"
    },
    {
      "file": "app/infrastructure/ml/symptom_forecasting/model_service.py",
      "line": 76,
      "code": "logging.info(\"Symptom Forecasting Service initialized\")",
      "issue": "Potential PHI in logging without sanitization",
      "recommendation": "Use phi_safe_logger or sanitize the message"
    },
    {
      "file": "app/infrastructure/ml/symptom_forecasting/service.py",
      "line": 35,
      "code": "self.logger.info(\"Symptom Forecasting Service initialized\")",
      "issue": "Potential PHI in logging without sanitization",
      "recommendation": "Use phi_safe_logger or sanitize the message"
    },
    {
      "file": "app/infrastructure/ml/pharmacogenomics/model_service.py",
      "line": 84,
      "code": "logging.info(\"Pharmacogenomics Service initialized\")",
      "issue": "Potential PHI in logging without sanitization",
      "recommendation": "Use phi_safe_logger or sanitize the message"
    },
    {
      "file": "app/infrastructure/ml_services/biometric_correlation/service.py",
      "line": 46,
      "code": "logger.info(\"Biometric Correlation Service initialized successfully\")",
      "issue": "Potential PHI in logging without sanitization",
      "recommendation": "Use phi_safe_logger or sanitize the message"
    },
    {
      "file": "app/infrastructure/ml_services/digital_twin_integration/service.py",
      "line": 57,
      "code": "logger.info(\"Digital Twin Integration Service initialized successfully\")",
      "issue": "Potential PHI in logging without sanitization",
      "recommendation": "Use phi_safe_logger or sanitize the message"
    },
    {
      "file": "app/infrastructure/ml_services/symptom_forecasting/service.py",
      "line": 59,
      "code": "logger.info(\"Symptom Forecasting Service initialized successfully\")",
      "issue": "Potential PHI in logging without sanitization",
      "recommendation": "Use phi_safe_logger or sanitize the message"
    },
    {
      "file": "app/infrastructure/ml_services/pharmacogenomics/service.py",
      "line": 57,
      "code": "logger.info(\"Pharmacogenomics Service initialized successfully\")",
      "issue": "Potential PHI in logging without sanitization",
      "recommendation": "Use phi_safe_logger or sanitize the message"
    }
  ],
  "database_queries": [],
  "api_security": [],
  "configuration_issues": [
    {
      "file": "app/core/config.py",
      "missing_settings": [
        "ssl",
        "backup"
      ],
      "issue": "Configuration missing required security settings: ssl, backup",
      "recommendation": "Add required security settings to configuration"
    },
    {
      "file": ".env.example",
      "missing_settings": [
        "backup"
      ],
      "issue": "Configuration missing required security settings: backup",
      "recommendation": "Add required security settings to configuration"
    },
    {
      "file": "alembic.ini",
      "missing_settings": [
        "encryption",
        "ssl",
        "timeout",
        "backup",
        "phi"
      ],
      "issue": "Configuration missing required security settings: encryption, ssl, timeout, backup, phi",
      "recommendation": "Add required security settings to configuration"
    }
  ],
  "summary": {
    "audit_date": "2025-03-27T13:32:36.383087",
    "duration_seconds": 0.208316,
    "files_examined": 176,
    "issues_found": 378,
    "passed": false
  }
}