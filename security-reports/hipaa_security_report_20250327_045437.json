{
  "timestamp": "2025-03-27T04:54:37.809759",
  "results": [
    {
      "test_file": "test_api_security.py",
      "passed": false,
      "total_tests": 0,
      "passed_tests": 0,
      "failed_tests": 0,
      "skipped_tests": 0,
      "duration": 4.571709394454956,
      "stdout": "============================= test session starts =============================\ncollected 0 items / 1 error\n\n=================================== ERRORS ====================================\n____________ ERROR collecting tests/security/test_api_security.py _____________\nImportError while importing test module '\\\\wsl$\\Ubuntu-22.04\\home\\jj\\dev\\Novamind-Backend\\tests\\security\\test_api_security.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\nC:\\Program Files\\Python311\\Lib\\importlib\\__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nC:\\Program Files\\Python311\\Lib\\site-packages\\ddtrace\\internal\\module.py:295: in _exec_module\n    self.loader.exec_module(module)\ntests\\security\\test_api_security.py:18: in <module>\n    from app.main import app\nE   ModuleNotFoundError: No module named 'app.main'\n=========================== short test summary info ===========================\nERROR tests/security/test_api_security.py\n!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n============================== 1 error in 0.89s ===============================\n",
      "stderr": "C:\\Users\\JJ\\AppData\\Roaming\\Python\\Python311\\site-packages\\pytest_asyncio\\plugin.py:207: PytestDeprecationWarning: The configuration option \"asyncio_default_fixture_loop_scope\" is unset.\nThe event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: \"function\", \"class\", \"module\", \"package\", \"session\"\n\n  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))\n"
    },
    {
      "test_file": "test_audit_logging.py",
      "passed": true,
      "total_tests": 0,
      "passed_tests": 0,
      "failed_tests": 0,
      "skipped_tests": 0,
      "duration": 5.053880214691162,
      "stdout": "============================= test session starts =============================\ncollected 5 items\n\ntests\\security\\test_audit_logging.py sssss                               [100%]\n\n============================= 5 skipped in 1.08s ==============================\n",
      "stderr": "C:\\Users\\JJ\\AppData\\Roaming\\Python\\Python311\\site-packages\\pytest_asyncio\\plugin.py:207: PytestDeprecationWarning: The configuration option \"asyncio_default_fixture_loop_scope\" is unset.\nThe event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: \"function\", \"class\", \"module\", \"package\", \"session\"\n\n  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))\n"
    },
    {
      "test_file": "test_auth_middleware.py",
      "passed": false,
      "total_tests": 0,
      "passed_tests": 0,
      "failed_tests": 0,
      "skipped_tests": 0,
      "duration": 6.580009698867798,
      "stdout": "============================= test session starts =============================\ncollected 0 items / 1 error\n\n=================================== ERRORS ====================================\n___________ ERROR collecting tests/security/test_auth_middleware.py ___________\nImportError while importing test module '\\\\wsl$\\Ubuntu-22.04\\home\\jj\\dev\\Novamind-Backend\\tests\\security\\test_auth_middleware.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\nC:\\Program Files\\Python311\\Lib\\importlib\\__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nC:\\Program Files\\Python311\\Lib\\site-packages\\ddtrace\\internal\\module.py:295: in _exec_module\n    self.loader.exec_module(module)\ntests\\security\\test_auth_middleware.py:6: in <module>\n    from app.infrastructure.security.auth_middleware import (\nE   ImportError: cannot import name 'JWTAuthMiddleware' from 'app.infrastructure.security.auth_middleware' (\\\\wsl$\\Ubuntu-22.04\\home\\jj\\dev\\Novamind-Backend\\app\\infrastructure\\security\\auth_middleware.py)\n=========================== short test summary info ===========================\nERROR tests/security/test_auth_middleware.py\n!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n============================== 1 error in 2.37s ===============================\n",
      "stderr": "C:\\Users\\JJ\\AppData\\Roaming\\Python\\Python311\\site-packages\\pytest_asyncio\\plugin.py:207: PytestDeprecationWarning: The configuration option \"asyncio_default_fixture_loop_scope\" is unset.\nThe event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: \"function\", \"class\", \"module\", \"package\", \"session\"\n\n  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))\n"
    },
    {
      "test_file": "test_encryption.py",
      "passed": false,
      "total_tests": 2,
      "passed_tests": 0,
      "failed_tests": 1,
      "skipped_tests": 0,
      "duration": 5.556416273117065,
      "stdout": "============================= test session starts =============================\ncollected 8 items\n\ntests\\security\\test_encryption.py ......F.                               [100%]\n\n================================== FAILURES ===================================\n_____________________ TestEncryption.test_key_management ______________________\ntests\\security\\test_encryption.py:132: in test_key_management\n    self.assertEqual(len(key), 32)  # AES-256 key length\nE   AssertionError: 36 != 32\n=========================== short test summary info ===========================\nFAILED tests/security/test_encryption.py::TestEncryption::test_key_management\n========================= 1 failed, 7 passed in 1.52s =========================\n",
      "stderr": "C:\\Users\\JJ\\AppData\\Roaming\\Python\\Python311\\site-packages\\pytest_asyncio\\plugin.py:207: PytestDeprecationWarning: The configuration option \"asyncio_default_fixture_loop_scope\" is unset.\nThe event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: \"function\", \"class\", \"module\", \"package\", \"session\"\n\n  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))\n"
    },
    {
      "test_file": "test_hipaa_compliance.py",
      "passed": false,
      "total_tests": 22,
      "passed_tests": 0,
      "failed_tests": 8,
      "skipped_tests": 0,
      "duration": 6.834627866744995,
      "stdout": "============================= test session starts =============================\ncollected 18 items\n\ntests\\security\\test_hipaa_compliance.py FFF.FFFEE.E...F.F.               [100%]\n\n=================================== ERRORS ====================================\n_______ ERROR at setup of TestAuthorization.test_rbac_permission_check ________\ntests\\security\\test_hipaa_compliance.py:148: in mock_rbac\n    with mock.patch(\"app.infrastructure.security.rbac.role_manager.check_permission\") as mock_check:\nC:\\Program Files\\Python311\\Lib\\unittest\\mock.py:1427: in __enter__\n    self.target = self.getter()\nC:\\Program Files\\Python311\\Lib\\pkgutil.py:715: in resolve_name\n    result = getattr(result, p)\nE   AttributeError: module 'app.infrastructure.security.rbac' has no attribute 'role_manager'\n_______ ERROR at setup of TestAuthorization.test_rbac_permission_denied _______\ntests\\security\\test_hipaa_compliance.py:148: in mock_rbac\n    with mock.patch(\"app.infrastructure.security.rbac.role_manager.check_permission\") as mock_check:\nC:\\Program Files\\Python311\\Lib\\unittest\\mock.py:1427: in __enter__\n    self.target = self.getter()\nC:\\Program Files\\Python311\\Lib\\pkgutil.py:715: in resolve_name\n    result = getattr(result, p)\nE   AttributeError: module 'app.infrastructure.security.rbac' has no attribute 'role_manager'\n_________ ERROR at setup of TestAuditLogging.test_phi_access_logging __________\ntests\\security\\test_hipaa_compliance.py:141: in mock_audit_logger\n    with mock.patch(\"app.infrastructure.logging.audit_logger.log_phi_access\") as mock_logger:\nC:\\Program Files\\Python311\\Lib\\unittest\\mock.py:1443: in __enter__\n    original, local = self.get_original()\nC:\\Program Files\\Python311\\Lib\\unittest\\mock.py:1416: in get_original\n    raise AttributeError(\nE   AttributeError: <module 'app.infrastructure.logging.audit_logger' from '\\\\\\\\wsl$\\\\Ubuntu-22.04\\\\home\\\\jj\\\\dev\\\\Novamind-Backend\\\\app\\\\infrastructure\\\\logging\\\\audit_logger.py'> does not have the attribute 'log_phi_access'\n================================== FAILURES ===================================\n_________________ TestPHIEncryption.test_encrypt_decrypt_phi __________________\ntests\\security\\test_hipaa_compliance.py:170: in test_encrypt_decrypt_phi\n    assert decrypted_data == test_phi_data\nE   AssertionError: assert 'decrypted_data' == {'diagnosis': 'Test Diagnosis', 'dob': '1990-01-01', 'first_name': 'Test', 'last_name': 'Patient', ...}\n_____________ TestPHIEncryption.test_encrypt_field_sensitive_data _____________\ntests\\security\\test_hipaa_compliance.py:185: in test_encrypt_field_sensitive_data\n    assert decrypted_ssn == ssn\nE   AssertionError: assert 'decrypted_field' == '123-45-6789'\nE     \nE     - 123-45-6789\nE     + decrypted_field\n_____________ TestPHIEncryption.test_encryption_key_requirements ______________\ntests\\security\\test_hipaa_compliance.py:194: in test_encryption_key_requirements\n    assert len(key) >= 32, \"Encryption key must be at least 32 characters\"\nE   AssertionError: Encryption key must be at least 32 characters\nE   assert 13 >= 32\nE    +  where 13 = len('generated_key')\n_________________ TestAuthentication.test_decode_access_token _________________\ntests\\security\\test_hipaa_compliance.py:216: in test_decode_access_token\n    assert decoded[\"sub\"] == test_user[\"username\"]\nE   AssertionError: assert 'test_user' == 'test_user_7a91ece1'\nE     \nE     - test_user_7a91ece1\nE     + test_user\n_______________ TestAuthentication.test_expired_token_rejection _______________\ntests\\security\\test_hipaa_compliance.py:231: in test_expired_token_rejection\n    with pytest.raises((jwt.JWTError, AuthenticationError)):\nE   Failed: DID NOT RAISE (<class 'jose.exceptions.JWTError'>, <class 'test_hipaa_compliance.AuthenticationError'>)\n_______________ TestAuthentication.test_invalid_token_rejection _______________\ntests\\security\\test_hipaa_compliance.py:240: in test_invalid_token_rejection\n    with pytest.raises((jwt.JWTError, AuthenticationError)):\nE   Failed: DID NOT RAISE (<class 'jose.exceptions.JWTError'>, <class 'test_hipaa_compliance.AuthenticationError'>)\n_______________ TestHIPAACompliance.test_field_level_encryption _______________\ntests\\security\\test_hipaa_compliance.py:360: in test_field_level_encryption\n    assert decrypted == value\nE   AssertionError: assert 'decrypted_field' == '123-45-6789'\nE     \nE     - 123-45-6789\nE     + decrypted_field\n________________ TestHIPAACompliance.test_secure_configuration ________________\ntests\\security\\test_hipaa_compliance.py:385: in test_secure_configuration\n    assert settings.USE_TLS is True\nE   AssertionError: assert <MagicMock name='mock.USE_TLS' id='2412608211664'> is True\nE    +  where <MagicMock name='mock.USE_TLS' id='2412608211664'> = <MagicMock id='2412600439184'>.USE_TLS\n=========================== short test summary info ===========================\nFAILED tests/security/test_hipaa_compliance.py::TestPHIEncryption::test_encrypt_decrypt_phi\nFAILED tests/security/test_hipaa_compliance.py::TestPHIEncryption::test_encrypt_field_sensitive_data\nFAILED tests/security/test_hipaa_compliance.py::TestPHIEncryption::test_encryption_key_requirements\nFAILED tests/security/test_hipaa_compliance.py::TestAuthentication::test_decode_access_token\nFAILED tests/security/test_hipaa_compliance.py::TestAuthentication::test_expired_token_rejection\nFAILED tests/security/test_hipaa_compliance.py::TestAuthentication::test_invalid_token_rejection\nFAILED tests/security/test_hipaa_compliance.py::TestHIPAACompliance::test_field_level_encryption\nFAILED tests/security/test_hipaa_compliance.py::TestHIPAACompliance::test_secure_configuration\nERROR tests/security/test_hipaa_compliance.py::TestAuthorization::test_rbac_permission_check\nERROR tests/security/test_hipaa_compliance.py::TestAuthorization::test_rbac_permission_denied\nERROR tests/security/test_hipaa_compliance.py::TestAuditLogging::test_phi_access_logging\n==================== 8 failed, 7 passed, 3 errors in 2.53s ====================\n",
      "stderr": "C:\\Users\\JJ\\AppData\\Roaming\\Python\\Python311\\site-packages\\pytest_asyncio\\plugin.py:207: PytestDeprecationWarning: The configuration option \"asyncio_default_fixture_loop_scope\" is unset.\nThe event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: \"function\", \"class\", \"module\", \"package\", \"session\"\n\n  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))\n"
    },
    {
      "test_file": "test_jwt_auth.py",
      "passed": true,
      "total_tests": 0,
      "passed_tests": 0,
      "failed_tests": 0,
      "skipped_tests": 0,
      "duration": 5.17893123626709,
      "stdout": "============================= test session starts =============================\ncollected 8 items\n\ntests\\security\\test_jwt_auth.py ssssssss                                 [100%]\n\n============================= 8 skipped in 1.27s ==============================\n",
      "stderr": "C:\\Users\\JJ\\AppData\\Roaming\\Python\\Python311\\site-packages\\pytest_asyncio\\plugin.py:207: PytestDeprecationWarning: The configuration option \"asyncio_default_fixture_loop_scope\" is unset.\nThe event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: \"function\", \"class\", \"module\", \"package\", \"session\"\n\n  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))\n"
    },
    {
      "test_file": "test_jwt_service.py",
      "passed": false,
      "total_tests": 0,
      "passed_tests": 0,
      "failed_tests": 0,
      "skipped_tests": 0,
      "duration": 6.040212154388428,
      "stdout": "============================= test session starts =============================\ncollected 0 items / 1 error\n\n=================================== ERRORS ====================================\n_____________ ERROR collecting tests/security/test_jwt_service.py _____________\nImportError while importing test module '\\\\wsl$\\Ubuntu-22.04\\home\\jj\\dev\\Novamind-Backend\\tests\\security\\test_jwt_service.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\nC:\\Program Files\\Python311\\Lib\\importlib\\__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nC:\\Program Files\\Python311\\Lib\\site-packages\\ddtrace\\internal\\module.py:295: in _exec_module\n    self.loader.exec_module(module)\ntests\\security\\test_jwt_service.py:9: in <module>\n    from app.core.config import settings\nE   ImportError: cannot import name 'settings' from 'app.core.config' (\\\\wsl$\\Ubuntu-22.04\\home\\jj\\dev\\Novamind-Backend\\app\\core\\config.py)\n=========================== short test summary info ===========================\nERROR tests/security/test_jwt_service.py\n!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n============================== 1 error in 1.78s ===============================\n",
      "stderr": "C:\\Users\\JJ\\AppData\\Roaming\\Python\\Python311\\site-packages\\pytest_asyncio\\plugin.py:207: PytestDeprecationWarning: The configuration option \"asyncio_default_fixture_loop_scope\" is unset.\nThe event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: \"function\", \"class\", \"module\", \"package\", \"session\"\n\n  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))\n"
    },
    {
      "test_file": "test_log_sanitizer.py",
      "passed": false,
      "total_tests": 0,
      "passed_tests": 0,
      "failed_tests": 0,
      "skipped_tests": 0,
      "duration": 5.646346092224121,
      "stdout": "============================= test session starts =============================\ncollected 0 items / 1 error\n\n=================================== ERRORS ====================================\n____________ ERROR collecting tests/security/test_log_sanitizer.py ____________\nImportError while importing test module '\\\\wsl$\\Ubuntu-22.04\\home\\jj\\dev\\Novamind-Backend\\tests\\security\\test_log_sanitizer.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\nC:\\Program Files\\Python311\\Lib\\importlib\\__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nC:\\Program Files\\Python311\\Lib\\site-packages\\ddtrace\\internal\\module.py:295: in _exec_module\n    self.loader.exec_module(module)\ntests\\security\\test_log_sanitizer.py:4: in <module>\n    from app.infrastructure.security.log_sanitizer import LogSanitizer\nE   ImportError: cannot import name 'LogSanitizer' from 'app.infrastructure.security.log_sanitizer' (\\\\wsl$\\Ubuntu-22.04\\home\\jj\\dev\\Novamind-Backend\\app\\infrastructure\\security\\log_sanitizer.py)\n=========================== short test summary info ===========================\nERROR tests/security/test_log_sanitizer.py\n!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n============================== 1 error in 1.48s ===============================\n",
      "stderr": "C:\\Users\\JJ\\AppData\\Roaming\\Python\\Python311\\site-packages\\pytest_asyncio\\plugin.py:207: PytestDeprecationWarning: The configuration option \"asyncio_default_fixture_loop_scope\" is unset.\nThe event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: \"function\", \"class\", \"module\", \"package\", \"session\"\n\n  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))\n"
    },
    {
      "test_file": "test_ml_encryption.py",
      "passed": false,
      "total_tests": 0,
      "passed_tests": 0,
      "failed_tests": 0,
      "skipped_tests": 0,
      "duration": 5.796497821807861,
      "stdout": "============================= test session starts =============================\ncollected 0 items / 1 error\n\n=================================== ERRORS ====================================\n____________ ERROR collecting tests/security/test_ml_encryption.py ____________\nImportError while importing test module '\\\\wsl$\\Ubuntu-22.04\\home\\jj\\dev\\Novamind-Backend\\tests\\security\\test_ml_encryption.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\nC:\\Program Files\\Python311\\Lib\\importlib\\__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nC:\\Program Files\\Python311\\Lib\\site-packages\\ddtrace\\internal\\module.py:295: in _exec_module\n    self.loader.exec_module(module)\ntests\\security\\test_ml_encryption.py:7: in <module>\n    from app.infrastructure.security.encryption import EncryptionService, FieldEncryptor\nE   ImportError: cannot import name 'FieldEncryptor' from 'app.infrastructure.security.encryption' (\\\\wsl$\\Ubuntu-22.04\\home\\jj\\dev\\Novamind-Backend\\app\\infrastructure\\security\\encryption.py)\n=========================== short test summary info ===========================\nERROR tests/security/test_ml_encryption.py\n!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n============================== 1 error in 1.85s ===============================\n",
      "stderr": "C:\\Users\\JJ\\AppData\\Roaming\\Python\\Python311\\site-packages\\pytest_asyncio\\plugin.py:207: PytestDeprecationWarning: The configuration option \"asyncio_default_fixture_loop_scope\" is unset.\nThe event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: \"function\", \"class\", \"module\", \"package\", \"session\"\n\n  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))\n"
    },
    {
      "test_file": "test_ml_phi_security.py",
      "passed": false,
      "total_tests": 0,
      "passed_tests": 0,
      "failed_tests": 0,
      "skipped_tests": 0,
      "duration": 5.371785640716553,
      "stdout": "============================= test session starts =============================\ncollected 0 items / 1 error\n\n=================================== ERRORS ====================================\n___________ ERROR collecting tests/security/test_ml_phi_security.py ___________\nImportError while importing test module '\\\\wsl$\\Ubuntu-22.04\\home\\jj\\dev\\Novamind-Backend\\tests\\security\\test_ml_phi_security.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\nC:\\Program Files\\Python311\\Lib\\importlib\\__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nC:\\Program Files\\Python311\\Lib\\site-packages\\ddtrace\\internal\\module.py:295: in _exec_module\n    self.loader.exec_module(module)\ntests\\security\\test_ml_phi_security.py:15: in <module>\n    from app.infrastructure.ml.data_processing import PHIProcessor\nE   ModuleNotFoundError: No module named 'app.infrastructure.ml.data_processing'\n=========================== short test summary info ===========================\nERROR tests/security/test_ml_phi_security.py\n!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n============================== 1 error in 1.25s ===============================\n",
      "stderr": "C:\\Users\\JJ\\AppData\\Roaming\\Python\\Python311\\site-packages\\pytest_asyncio\\plugin.py:207: PytestDeprecationWarning: The configuration option \"asyncio_default_fixture_loop_scope\" is unset.\nThe event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: \"function\", \"class\", \"module\", \"package\", \"session\"\n\n  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))\n"
    },
    {
      "test_file": "test_phi_middleware.py",
      "passed": true,
      "total_tests": 0,
      "passed_tests": 0,
      "failed_tests": 0,
      "skipped_tests": 0,
      "duration": 4.8388142585754395,
      "stdout": "============================= test session starts =============================\ncollected 7 items\n\ntests\\security\\test_phi_middleware.py sssssss                            [100%]\n\n============================= 7 skipped in 0.85s ==============================\n",
      "stderr": "C:\\Users\\JJ\\AppData\\Roaming\\Python\\Python311\\site-packages\\pytest_asyncio\\plugin.py:207: PytestDeprecationWarning: The configuration option \"asyncio_default_fixture_loop_scope\" is unset.\nThe event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: \"function\", \"class\", \"module\", \"package\", \"session\"\n\n  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))\n"
    },
    {
      "test_file": "test_repository_security.py",
      "passed": false,
      "total_tests": 10,
      "passed_tests": 0,
      "failed_tests": 0,
      "skipped_tests": 0,
      "duration": 7.393441200256348,
      "stdout": "============================= test session starts =============================\ncollected 10 items\n\ntests\\security\\test_repository_security.py EEEEEEEEEE                    [100%]\n\n=================================== ERRORS ====================================\n____________ ERROR at setup of test_patient_creation_encrypts_phi _____________\ntests\\security\\test_repository_security.py:29: in encryption_service\n    with patch.object(service, '_load_encryption_key') as mock_load:\nC:\\Program Files\\Python311\\Lib\\unittest\\mock.py:1443: in __enter__\n    original, local = self.get_original()\nC:\\Program Files\\Python311\\Lib\\unittest\\mock.py:1416: in get_original\n    raise AttributeError(\nE   AttributeError: <app.infrastructure.security.encryption_service.EncryptionService object at 0x000002BA33D92F10> does not have the attribute '_load_encryption_key'\n----------------------------- Captured log setup ------------------------------\nWARNING  encryption_service:encryption_service.py:54 No encryption key provided or found in environment. Generated a new one. This should be stored securely.\nWARNING  encryption_service:encryption_service.py:69 No encryption salt provided or found in environment. Generated a new one. This should be stored securely.\n____________ ERROR at setup of test_patient_retrieval_decrypts_phi ____________\ntests\\security\\test_repository_security.py:29: in encryption_service\n    with patch.object(service, '_load_encryption_key') as mock_load:\nC:\\Program Files\\Python311\\Lib\\unittest\\mock.py:1443: in __enter__\n    original, local = self.get_original()\nC:\\Program Files\\Python311\\Lib\\unittest\\mock.py:1416: in get_original\n    raise AttributeError(\nE   AttributeError: <app.infrastructure.security.encryption_service.EncryptionService object at 0x000002BA33EE0250> does not have the attribute '_load_encryption_key'\n----------------------------- Captured log setup ------------------------------\nWARNING  encryption_service:encryption_service.py:54 No encryption key provided or found in environment. Generated a new one. This should be stored securely.\nWARNING  encryption_service:encryption_service.py:69 No encryption salt provided or found in environment. Generated a new one. This should be stored securely.\n_________ ERROR at setup of test_repository_filters_inactive_records __________\ntests\\security\\test_repository_security.py:29: in encryption_service\n    with patch.object(service, '_load_encryption_key') as mock_load:\nC:\\Program Files\\Python311\\Lib\\unittest\\mock.py:1443: in __enter__\n    original, local = self.get_original()\nC:\\Program Files\\Python311\\Lib\\unittest\\mock.py:1416: in get_original\n    raise AttributeError(\nE   AttributeError: <app.infrastructure.security.encryption_service.EncryptionService object at 0x000002BA352B8C50> does not have the attribute '_load_encryption_key'\n----------------------------- Captured log setup ------------------------------\nWARNING  encryption_service:encryption_service.py:54 No encryption key provided or found in environment. Generated a new one. This should be stored securely.\nWARNING  encryption_service:encryption_service.py:69 No encryption salt provided or found in environment. Generated a new one. This should be stored securely.\n___________ ERROR at setup of test_audit_logging_on_patient_changes ___________\ntests\\security\\test_repository_security.py:29: in encryption_service\n    with patch.object(service, '_load_encryption_key') as mock_load:\nC:\\Program Files\\Python311\\Lib\\unittest\\mock.py:1443: in __enter__\n    original, local = self.get_original()\nC:\\Program Files\\Python311\\Lib\\unittest\\mock.py:1416: in get_original\n    raise AttributeError(\nE   AttributeError: <app.infrastructure.security.encryption_service.EncryptionService object at 0x000002BA33FC5A90> does not have the attribute '_load_encryption_key'\n----------------------------- Captured log setup ------------------------------\nWARNING  encryption_service:encryption_service.py:54 No encryption key provided or found in environment. Generated a new one. This should be stored securely.\nWARNING  encryption_service:encryption_service.py:69 No encryption salt provided or found in environment. Generated a new one. This should be stored securely.\n________ ERROR at setup of test_authorization_check_before_operations _________\ntests\\security\\test_repository_security.py:29: in encryption_service\n    with patch.object(service, '_load_encryption_key') as mock_load:\nC:\\Program Files\\Python311\\Lib\\unittest\\mock.py:1443: in __enter__\n    original, local = self.get_original()\nC:\\Program Files\\Python311\\Lib\\unittest\\mock.py:1416: in get_original\n    raise AttributeError(\nE   AttributeError: <app.infrastructure.security.encryption_service.EncryptionService object at 0x000002BA33FCAE50> does not have the attribute '_load_encryption_key'\n----------------------------- Captured log setup ------------------------------\nWARNING  encryption_service:encryption_service.py:54 No encryption key provided or found in environment. Generated a new one. This should be stored securely.\nWARNING  encryption_service:encryption_service.py:69 No encryption salt provided or found in environment. Generated a new one. This should be stored securely.\n___________ ERROR at setup of test_phi_never_appears_in_exceptions ____________\ntests\\security\\test_repository_security.py:29: in encryption_service\n    with patch.object(service, '_load_encryption_key') as mock_load:\nC:\\Program Files\\Python311\\Lib\\unittest\\mock.py:1443: in __enter__\n    original, local = self.get_original()\nC:\\Program Files\\Python311\\Lib\\unittest\\mock.py:1416: in get_original\n    raise AttributeError(\nE   AttributeError: <app.infrastructure.security.encryption_service.EncryptionService object at 0x000002BA33F8CA90> does not have the attribute '_load_encryption_key'\n----------------------------- Captured log setup ------------------------------\nWARNING  encryption_service:encryption_service.py:54 No encryption key provided or found in environment. Generated a new one. This should be stored securely.\nWARNING  encryption_service:encryption_service.py:69 No encryption salt provided or found in environment. Generated a new one. This should be stored securely.\n_________ ERROR at setup of test_bulk_operations_maintain_encryption __________\ntests\\security\\test_repository_security.py:29: in encryption_service\n    with patch.object(service, '_load_encryption_key') as mock_load:\nC:\\Program Files\\Python311\\Lib\\unittest\\mock.py:1443: in __enter__\n    original, local = self.get_original()\nC:\\Program Files\\Python311\\Lib\\unittest\\mock.py:1416: in get_original\n    raise AttributeError(\nE   AttributeError: <app.infrastructure.security.encryption_service.EncryptionService object at 0x000002BA33FF6CD0> does not have the attribute '_load_encryption_key'\n----------------------------- Captured log setup ------------------------------\nWARNING  encryption_service:encryption_service.py:54 No encryption key provided or found in environment. Generated a new one. This should be stored securely.\nWARNING  encryption_service:encryption_service.py:69 No encryption salt provided or found in environment. Generated a new one. This should be stored securely.\n_________ ERROR at setup of test_search_filters_without_exposing_phi __________\ntests\\security\\test_repository_security.py:29: in encryption_service\n    with patch.object(service, '_load_encryption_key') as mock_load:\nC:\\Program Files\\Python311\\Lib\\unittest\\mock.py:1443: in __enter__\n    original, local = self.get_original()\nC:\\Program Files\\Python311\\Lib\\unittest\\mock.py:1416: in get_original\n    raise AttributeError(\nE   AttributeError: <app.infrastructure.security.encryption_service.EncryptionService object at 0x000002BA33F0E6D0> does not have the attribute '_load_encryption_key'\n----------------------------- Captured log setup ------------------------------\nWARNING  encryption_service:encryption_service.py:54 No encryption key provided or found in environment. Generated a new one. This should be stored securely.\nWARNING  encryption_service:encryption_service.py:69 No encryption salt provided or found in environment. Generated a new one. This should be stored securely.\n_______________ ERROR at setup of test_encryption_key_rotation ________________\ntests\\security\\test_repository_security.py:29: in encryption_service\n    with patch.object(service, '_load_encryption_key') as mock_load:\nC:\\Program Files\\Python311\\Lib\\unittest\\mock.py:1443: in __enter__\n    original, local = self.get_original()\nC:\\Program Files\\Python311\\Lib\\unittest\\mock.py:1416: in get_original\n    raise AttributeError(\nE   AttributeError: <app.infrastructure.security.encryption_service.EncryptionService object at 0x000002BA352CC3D0> does not have the attribute '_load_encryption_key'\n----------------------------- Captured log setup ------------------------------\nWARNING  encryption_service:encryption_service.py:54 No encryption key provided or found in environment. Generated a new one. This should be stored securely.\nWARNING  encryption_service:encryption_service.py:69 No encryption salt provided or found in environment. Generated a new one. This should be stored securely.\n________________ ERROR at setup of test_field_level_encryption ________________\ntests\\security\\test_repository_security.py:29: in encryption_service\n    with patch.object(service, '_load_encryption_key') as mock_load:\nC:\\Program Files\\Python311\\Lib\\unittest\\mock.py:1443: in __enter__\n    original, local = self.get_original()\nC:\\Program Files\\Python311\\Lib\\unittest\\mock.py:1416: in get_original\n    raise AttributeError(\nE   AttributeError: <app.infrastructure.security.encryption_service.EncryptionService object at 0x000002BA33DFEA10> does not have the attribute '_load_encryption_key'\n----------------------------- Captured log setup ------------------------------\nWARNING  encryption_service:encryption_service.py:54 No encryption key provided or found in environment. Generated a new one. This should be stored securely.\nWARNING  encryption_service:encryption_service.py:69 No encryption salt provided or found in environment. Generated a new one. This should be stored securely.\n=========================== short test summary info ===========================\nERROR tests/security/test_repository_security.py::test_patient_creation_encrypts_phi\nERROR tests/security/test_repository_security.py::test_patient_retrieval_decrypts_phi\nERROR tests/security/test_repository_security.py::test_repository_filters_inactive_records\nERROR tests/security/test_repository_security.py::test_audit_logging_on_patient_changes\nERROR tests/security/test_repository_security.py::test_authorization_check_before_operations\nERROR tests/security/test_repository_security.py::test_phi_never_appears_in_exceptions\nERROR tests/security/test_repository_security.py::test_bulk_operations_maintain_encryption\nERROR tests/security/test_repository_security.py::test_search_filters_without_exposing_phi\nERROR tests/security/test_repository_security.py::test_encryption_key_rotation\nERROR tests/security/test_repository_security.py::test_field_level_encryption\n============================= 10 errors in 3.44s ==============================\n",
      "stderr": "C:\\Users\\JJ\\AppData\\Roaming\\Python\\Python311\\site-packages\\pytest_asyncio\\plugin.py:207: PytestDeprecationWarning: The configuration option \"asyncio_default_fixture_loop_scope\" is unset.\nThe event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: \"function\", \"class\", \"module\", \"package\", \"session\"\n\n  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))\n"
    },
    {
      "test_file": "test_unit_of_work.py",
      "passed": false,
      "total_tests": 0,
      "passed_tests": 0,
      "failed_tests": 0,
      "skipped_tests": 0,
      "duration": 6.286414384841919,
      "stdout": "============================= test session starts =============================\ncollected 0 items / 1 error\n\n=================================== ERRORS ====================================\n____________ ERROR collecting tests/security/test_unit_of_work.py _____________\nImportError while importing test module '\\\\wsl$\\Ubuntu-22.04\\home\\jj\\dev\\Novamind-Backend\\tests\\security\\test_unit_of_work.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\nC:\\Program Files\\Python311\\Lib\\importlib\\__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nC:\\Program Files\\Python311\\Lib\\site-packages\\ddtrace\\internal\\module.py:295: in _exec_module\n    self.loader.exec_module(module)\ntests\\security\\test_unit_of_work.py:6: in <module>\n    from app.domain.exceptions import TransactionError\nE   ImportError: cannot import name 'TransactionError' from 'app.domain.exceptions' (\\\\wsl$\\Ubuntu-22.04\\home\\jj\\dev\\Novamind-Backend\\app\\domain\\exceptions\\__init__.py)\n=========================== short test summary info ===========================\nERROR tests/security/test_unit_of_work.py\n!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n============================== 1 error in 2.14s ===============================\n",
      "stderr": "C:\\Users\\JJ\\AppData\\Roaming\\Python\\Python311\\site-packages\\pytest_asyncio\\plugin.py:207: PytestDeprecationWarning: The configuration option \"asyncio_default_fixture_loop_scope\" is unset.\nThe event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: \"function\", \"class\", \"module\", \"package\", \"session\"\n\n  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))\n"
    }
  ],
  "summary": {
    "total_files": 13,
    "passed_files": 3,
    "total_tests": 34,
    "passed_tests": 0,
    "failed_tests": 9,
    "skipped_tests": 0,
    "total_duration": 75.14908623695374
  }
}