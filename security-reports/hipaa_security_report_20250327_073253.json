{
  "timestamp": "2025-03-27T07:32:53.645566",
  "results": [
    {
      "test_file": "test_api_security.py",
      "passed": false,
      "total_tests": 0,
      "passed_tests": 0,
      "failed_tests": 0,
      "skipped_tests": 0,
      "duration": 0.7201671600341797,
      "stdout": "============================= test session starts ==============================\ncollecting ... collected 0 items / 1 error\n\n==================================== ERRORS ====================================\n_____________ ERROR collecting tests/security/test_api_security.py _____________\nImportError while importing test module '/home/jj/dev/Novamind-Backend/tests/security/test_api_security.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/security/test_api_security.py:18: in <module>\n    from app.main import app\nE   ModuleNotFoundError: No module named 'app.main'\n=========================== short test summary info ============================\nERROR tests/security/test_api_security.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.06s ===============================\n",
      "stderr": "/home/jj/.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:207: PytestDeprecationWarning: The configuration option \"asyncio_default_fixture_loop_scope\" is unset.\nThe event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: \"function\", \"class\", \"module\", \"package\", \"session\"\n\n  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))\n"
    },
    {
      "test_file": "test_audit_logging.py",
      "passed": true,
      "total_tests": 10,
      "passed_tests": 0,
      "failed_tests": 0,
      "skipped_tests": 5,
      "duration": 0.48412370681762695,
      "stdout": "============================= test session starts ==============================\ncollecting ... collected 5 items\n\ntests/security/test_audit_logging.py::TestAuditLogging::test_log_phi_access SKIPPED [ 20%]\ntests/security/test_audit_logging.py::TestAuditLogging::test_search_audit_logs SKIPPED [ 40%]\ntests/security/test_audit_logging.py::TestAuditLogging::test_tamper_resistance SKIPPED [ 60%]\ntests/security/test_audit_logging.py::TestAuditLogging::test_log_security SKIPPED [ 80%]\ntests/security/test_audit_logging.py::TestAuditLogging::test_log_export SKIPPED [100%]\n\n============================== 5 skipped in 0.01s ==============================\n",
      "stderr": "/home/jj/.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:207: PytestDeprecationWarning: The configuration option \"asyncio_default_fixture_loop_scope\" is unset.\nThe event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: \"function\", \"class\", \"module\", \"package\", \"session\"\n\n  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))\n"
    },
    {
      "test_file": "test_auth_middleware.py",
      "passed": false,
      "total_tests": 0,
      "passed_tests": 0,
      "failed_tests": 0,
      "skipped_tests": 0,
      "duration": 0.5633194446563721,
      "stdout": "============================= test session starts ==============================\ncollecting ... collected 0 items / 1 error\n\n==================================== ERRORS ====================================\n___________ ERROR collecting tests/security/test_auth_middleware.py ____________\nImportError while importing test module '/home/jj/dev/Novamind-Backend/tests/security/test_auth_middleware.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/security/test_auth_middleware.py:6: in <module>\n    from app.infrastructure.security.auth_middleware import (\nE   ImportError: cannot import name 'JWTAuthMiddleware' from 'app.infrastructure.security.auth_middleware' (/home/jj/dev/Novamind-Backend/app/infrastructure/security/auth_middleware.py)\n=========================== short test summary info ============================\nERROR tests/security/test_auth_middleware.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.08s ===============================\n",
      "stderr": "/home/jj/.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:207: PytestDeprecationWarning: The configuration option \"asyncio_default_fixture_loop_scope\" is unset.\nThe event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: \"function\", \"class\", \"module\", \"package\", \"session\"\n\n  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))\n"
    },
    {
      "test_file": "test_encryption.py",
      "passed": false,
      "total_tests": 18,
      "passed_tests": 7,
      "failed_tests": 2,
      "skipped_tests": 0,
      "duration": 0.5476295948028564,
      "stdout": "============================= test session starts ==============================\ncollecting ... collected 8 items\n\ntests/security/test_encryption.py::TestEncryption::test_data_integrity PASSED [ 12%]\ntests/security/test_encryption.py::TestEncryption::test_dict_encryption PASSED [ 25%]\ntests/security/test_encryption.py::TestEncryption::test_empty_values PASSED [ 37%]\ntests/security/test_encryption.py::TestEncryption::test_error_handling PASSED [ 50%]\ntests/security/test_encryption.py::TestEncryption::test_field_encryption PASSED [ 62%]\ntests/security/test_encryption.py::TestEncryption::test_hipaa_compliance PASSED [ 75%]\ntests/security/test_encryption.py::TestEncryption::test_key_management FAILED [ 87%]\ntests/security/test_encryption.py::TestEncryption::test_nested_data_handling PASSED [100%]\n\n=================================== FAILURES ===================================\n______________________ TestEncryption.test_key_management ______________________\ntests/security/test_encryption.py:132: in test_key_management\n    self.assertEqual(len(key), 32)  # AES-256 key length\nE   AssertionError: 36 != 32\n=========================== short test summary info ============================\nFAILED tests/security/test_encryption.py::TestEncryption::test_key_management\n========================= 1 failed, 7 passed in 0.06s ==========================\n",
      "stderr": "/home/jj/.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:207: PytestDeprecationWarning: The configuration option \"asyncio_default_fixture_loop_scope\" is unset.\nThe event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: \"function\", \"class\", \"module\", \"package\", \"session\"\n\n  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))\n"
    },
    {
      "test_file": "test_hipaa_compliance.py",
      "passed": false,
      "total_tests": 58,
      "passed_tests": 7,
      "failed_tests": 16,
      "skipped_tests": 0,
      "duration": 0.6780006885528564,
      "stdout": "============================= test session starts ==============================\ncollecting ... collected 18 items\n\ntests/security/test_hipaa_compliance.py::TestPHIEncryption::test_encrypt_decrypt_phi FAILED [  5%]\ntests/security/test_hipaa_compliance.py::TestPHIEncryption::test_encrypt_field_sensitive_data FAILED [ 11%]\ntests/security/test_hipaa_compliance.py::TestPHIEncryption::test_encryption_key_requirements FAILED [ 16%]\ntests/security/test_hipaa_compliance.py::TestAuthentication::test_create_access_token PASSED [ 22%]\ntests/security/test_hipaa_compliance.py::TestAuthentication::test_decode_access_token FAILED [ 27%]\ntests/security/test_hipaa_compliance.py::TestAuthentication::test_expired_token_rejection FAILED [ 33%]\ntests/security/test_hipaa_compliance.py::TestAuthentication::test_invalid_token_rejection FAILED [ 38%]\ntests/security/test_hipaa_compliance.py::TestAuthorization::test_rbac_permission_check ERROR [ 44%]\ntests/security/test_hipaa_compliance.py::TestAuthorization::test_rbac_permission_denied ERROR [ 50%]\ntests/security/test_hipaa_compliance.py::TestAuthorization::test_cross_patient_data_access_prevented PASSED [ 55%]\ntests/security/test_hipaa_compliance.py::TestAuditLogging::test_phi_access_logging ERROR [ 61%]\ntests/security/test_hipaa_compliance.py::TestAuditLogging::test_phi_sanitization PASSED [ 66%]\ntests/security/test_hipaa_compliance.py::TestSecurityBoundaries::test_unauthorized_request_rejection PASSED [ 72%]\ntests/security/test_hipaa_compliance.py::TestSecurityBoundaries::test_phi_access_error_handling PASSED [ 77%]\ntests/security/test_hipaa_compliance.py::TestHIPAACompliance::test_field_level_encryption FAILED [ 83%]\ntests/security/test_hipaa_compliance.py::TestHIPAACompliance::test_minimum_necessary_principle PASSED [ 88%]\ntests/security/test_hipaa_compliance.py::TestHIPAACompliance::test_secure_configuration FAILED [ 94%]\ntests/security/test_hipaa_compliance.py::TestHIPAACompliance::test_password_policy PASSED [100%]\n\n==================================== ERRORS ====================================\n________ ERROR at setup of TestAuthorization.test_rbac_permission_check ________\n/usr/lib/python3.10/unittest/mock.py:1248: in _dot_lookup\n    return getattr(thing, comp)\nE   AttributeError: module 'app.infrastructure.security.rbac' has no attribute 'role_manager'\n\nDuring handling of the above exception, another exception occurred:\ntests/security/test_hipaa_compliance.py:148: in mock_rbac\n    with mock.patch(\"app.infrastructure.security.rbac.role_manager.check_permission\") as mock_check:\n/usr/lib/python3.10/unittest/mock.py:1431: in __enter__\n    self.target = self.getter()\n/usr/lib/python3.10/unittest/mock.py:1618: in <lambda>\n    getter = lambda: _importer(target)\n/usr/lib/python3.10/unittest/mock.py:1261: in _importer\n    thing = _dot_lookup(thing, comp, import_path)\n/usr/lib/python3.10/unittest/mock.py:1250: in _dot_lookup\n    __import__(import_path)\napp/infrastructure/security/rbac/role_manager.py:30: in <module>\n    from app.domain.exceptions import UnauthorizedAccessError\nE   ImportError: cannot import name 'UnauthorizedAccessError' from 'app.domain.exceptions' (/home/jj/dev/Novamind-Backend/app/domain/exceptions/__init__.py)\n_______ ERROR at setup of TestAuthorization.test_rbac_permission_denied ________\n/usr/lib/python3.10/unittest/mock.py:1248: in _dot_lookup\n    return getattr(thing, comp)\nE   AttributeError: module 'app.infrastructure.security.rbac' has no attribute 'role_manager'\n\nDuring handling of the above exception, another exception occurred:\ntests/security/test_hipaa_compliance.py:148: in mock_rbac\n    with mock.patch(\"app.infrastructure.security.rbac.role_manager.check_permission\") as mock_check:\n/usr/lib/python3.10/unittest/mock.py:1431: in __enter__\n    self.target = self.getter()\n/usr/lib/python3.10/unittest/mock.py:1618: in <lambda>\n    getter = lambda: _importer(target)\n/usr/lib/python3.10/unittest/mock.py:1261: in _importer\n    thing = _dot_lookup(thing, comp, import_path)\n/usr/lib/python3.10/unittest/mock.py:1250: in _dot_lookup\n    __import__(import_path)\napp/infrastructure/security/rbac/role_manager.py:30: in <module>\n    from app.domain.exceptions import UnauthorizedAccessError\nE   ImportError: cannot import name 'UnauthorizedAccessError' from 'app.domain.exceptions' (/home/jj/dev/Novamind-Backend/app/domain/exceptions/__init__.py)\n__________ ERROR at setup of TestAuditLogging.test_phi_access_logging __________\ntests/security/test_hipaa_compliance.py:141: in mock_audit_logger\n    with mock.patch(\"app.infrastructure.logging.audit_logger.log_phi_access\") as mock_logger:\n/usr/lib/python3.10/unittest/mock.py:1447: in __enter__\n    original, local = self.get_original()\n/usr/lib/python3.10/unittest/mock.py:1420: in get_original\n    raise AttributeError(\nE   AttributeError: <module 'app.infrastructure.logging.audit_logger' from '/home/jj/dev/Novamind-Backend/app/infrastructure/logging/audit_logger.py'> does not have the attribute 'log_phi_access'\n=================================== FAILURES ===================================\n__________________ TestPHIEncryption.test_encrypt_decrypt_phi __________________\ntests/security/test_hipaa_compliance.py:170: in test_encrypt_decrypt_phi\n    assert decrypted_data == test_phi_data\nE   AssertionError: assert 'decrypted_data' == {'diagnosis': 'Test Diagnosis', 'dob': '1990-01-01', 'first_name': 'Test', 'last_name': 'Patient', ...}\n_____________ TestPHIEncryption.test_encrypt_field_sensitive_data ______________\ntests/security/test_hipaa_compliance.py:185: in test_encrypt_field_sensitive_data\n    assert decrypted_ssn == ssn\nE   AssertionError: assert 'decrypted_field' == '123-45-6789'\nE     \nE     - 123-45-6789\nE     + decrypted_field\n______________ TestPHIEncryption.test_encryption_key_requirements ______________\ntests/security/test_hipaa_compliance.py:194: in test_encryption_key_requirements\n    assert len(key) >= 32, \"Encryption key must be at least 32 characters\"\nE   AssertionError: Encryption key must be at least 32 characters\nE   assert 13 >= 32\nE    +  where 13 = len('generated_key')\n_________________ TestAuthentication.test_decode_access_token __________________\ntests/security/test_hipaa_compliance.py:216: in test_decode_access_token\n    assert decoded[\"sub\"] == test_user[\"username\"]\nE   AssertionError: assert 'test_user' == 'test_user_51f4b6fd'\nE     \nE     - test_user_51f4b6fd\nE     + test_user\n_______________ TestAuthentication.test_expired_token_rejection ________________\ntests/security/test_hipaa_compliance.py:231: in test_expired_token_rejection\n    with pytest.raises((jwt.JWTError, AuthenticationError)):\nE   Failed: DID NOT RAISE (<class 'jose.exceptions.JWTError'>, <class 'test_hipaa_compliance.AuthenticationError'>)\n_______________ TestAuthentication.test_invalid_token_rejection ________________\ntests/security/test_hipaa_compliance.py:240: in test_invalid_token_rejection\n    with pytest.raises((jwt.JWTError, AuthenticationError)):\nE   Failed: DID NOT RAISE (<class 'jose.exceptions.JWTError'>, <class 'test_hipaa_compliance.AuthenticationError'>)\n_______________ TestHIPAACompliance.test_field_level_encryption ________________\ntests/security/test_hipaa_compliance.py:360: in test_field_level_encryption\n    assert decrypted == value\nE   AssertionError: assert 'decrypted_field' == '123-45-6789'\nE     \nE     - 123-45-6789\nE     + decrypted_field\n________________ TestHIPAACompliance.test_secure_configuration _________________\ntests/security/test_hipaa_compliance.py:385: in test_secure_configuration\n    assert settings.USE_TLS is True\nE   AssertionError: assert <MagicMock name='mock.USE_TLS' id='140010452912448'> is True\nE    +  where <MagicMock name='mock.USE_TLS' id='140010452912448'> = <MagicMock id='140010460832976'>.USE_TLS\n=========================== short test summary info ============================\nFAILED tests/security/test_hipaa_compliance.py::TestPHIEncryption::test_encrypt_decrypt_phi\nFAILED tests/security/test_hipaa_compliance.py::TestPHIEncryption::test_encrypt_field_sensitive_data\nFAILED tests/security/test_hipaa_compliance.py::TestPHIEncryption::test_encryption_key_requirements\nFAILED tests/security/test_hipaa_compliance.py::TestAuthentication::test_decode_access_token\nFAILED tests/security/test_hipaa_compliance.py::TestAuthentication::test_expired_token_rejection\nFAILED tests/security/test_hipaa_compliance.py::TestAuthentication::test_invalid_token_rejection\nFAILED tests/security/test_hipaa_compliance.py::TestHIPAACompliance::test_field_level_encryption\nFAILED tests/security/test_hipaa_compliance.py::TestHIPAACompliance::test_secure_configuration\nERROR tests/security/test_hipaa_compliance.py::TestAuthorization::test_rbac_permission_check\nERROR tests/security/test_hipaa_compliance.py::TestAuthorization::test_rbac_permission_denied\nERROR tests/security/test_hipaa_compliance.py::TestAuditLogging::test_phi_access_logging\n==================== 8 failed, 7 passed, 3 errors in 0.20s =====================\n",
      "stderr": "/home/jj/.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:207: PytestDeprecationWarning: The configuration option \"asyncio_default_fixture_loop_scope\" is unset.\nThe event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: \"function\", \"class\", \"module\", \"package\", \"session\"\n\n  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))\n"
    },
    {
      "test_file": "test_jwt_auth.py",
      "passed": true,
      "total_tests": 16,
      "passed_tests": 0,
      "failed_tests": 0,
      "skipped_tests": 8,
      "duration": 0.49848127365112305,
      "stdout": "============================= test session starts ==============================\ncollecting ... collected 8 items\n\ntests/security/test_jwt_auth.py::TestJWTAuthentication::test_token_creation SKIPPED [ 12%]\ntests/security/test_jwt_auth.py::TestJWTAuthentication::test_token_validation SKIPPED [ 25%]\ntests/security/test_jwt_auth.py::TestJWTAuthentication::test_role_based_access SKIPPED [ 37%]\ntests/security/test_jwt_auth.py::TestJWTAuthentication::test_token_from_request SKIPPED [ 50%]\ntests/security/test_jwt_auth.py::TestJWTAuthentication::test_unauthorized_response SKIPPED [ 62%]\ntests/security/test_jwt_auth.py::TestJWTAuthentication::test_refresh_token SKIPPED [ 75%]\ntests/security/test_jwt_auth.py::TestJWTAuthentication::test_hipaa_compliance_in_errors SKIPPED [ 87%]\ntests/security/test_jwt_auth.py::TestJWTAuthentication::test_token_security_properties SKIPPED [100%]\n\n============================== 8 skipped in 0.01s ==============================\n",
      "stderr": "/home/jj/.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:207: PytestDeprecationWarning: The configuration option \"asyncio_default_fixture_loop_scope\" is unset.\nThe event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: \"function\", \"class\", \"module\", \"package\", \"session\"\n\n  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))\n"
    },
    {
      "test_file": "test_jwt_service.py",
      "passed": false,
      "total_tests": 0,
      "passed_tests": 0,
      "failed_tests": 0,
      "skipped_tests": 0,
      "duration": 0.5316507816314697,
      "stdout": "============================= test session starts ==============================\ncollecting ... collected 0 items / 1 error\n\n==================================== ERRORS ====================================\n_____________ ERROR collecting tests/security/test_jwt_service.py ______________\nImportError while importing test module '/home/jj/dev/Novamind-Backend/tests/security/test_jwt_service.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/security/test_jwt_service.py:9: in <module>\n    from app.core.config import settings\nE   ImportError: cannot import name 'settings' from 'app.core.config' (/home/jj/dev/Novamind-Backend/app/core/config.py)\n=========================== short test summary info ============================\nERROR tests/security/test_jwt_service.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.06s ===============================\n",
      "stderr": "/home/jj/.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:207: PytestDeprecationWarning: The configuration option \"asyncio_default_fixture_loop_scope\" is unset.\nThe event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: \"function\", \"class\", \"module\", \"package\", \"session\"\n\n  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))\n"
    },
    {
      "test_file": "test_log_sanitizer.py",
      "passed": false,
      "total_tests": 0,
      "passed_tests": 0,
      "failed_tests": 0,
      "skipped_tests": 0,
      "duration": 0.5255062580108643,
      "stdout": "============================= test session starts ==============================\ncollecting ... collected 0 items / 1 error\n\n==================================== ERRORS ====================================\n____________ ERROR collecting tests/security/test_log_sanitizer.py _____________\nImportError while importing test module '/home/jj/dev/Novamind-Backend/tests/security/test_log_sanitizer.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/security/test_log_sanitizer.py:4: in <module>\n    from app.infrastructure.security.log_sanitizer import LogSanitizer\nE   ImportError: cannot import name 'LogSanitizer' from 'app.infrastructure.security.log_sanitizer' (/home/jj/dev/Novamind-Backend/app/infrastructure/security/log_sanitizer.py)\n=========================== short test summary info ============================\nERROR tests/security/test_log_sanitizer.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.05s ===============================\n",
      "stderr": "/home/jj/.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:207: PytestDeprecationWarning: The configuration option \"asyncio_default_fixture_loop_scope\" is unset.\nThe event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: \"function\", \"class\", \"module\", \"package\", \"session\"\n\n  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))\n"
    },
    {
      "test_file": "test_ml_encryption.py",
      "passed": false,
      "total_tests": 0,
      "passed_tests": 0,
      "failed_tests": 0,
      "skipped_tests": 0,
      "duration": 0.558917760848999,
      "stdout": "============================= test session starts ==============================\ncollecting ... collected 0 items / 1 error\n\n==================================== ERRORS ====================================\n____________ ERROR collecting tests/security/test_ml_encryption.py _____________\nImportError while importing test module '/home/jj/dev/Novamind-Backend/tests/security/test_ml_encryption.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/security/test_ml_encryption.py:7: in <module>\n    from app.infrastructure.security.encryption import EncryptionService, FieldEncryptor\nE   ImportError: cannot import name 'FieldEncryptor' from 'app.infrastructure.security.encryption' (/home/jj/dev/Novamind-Backend/app/infrastructure/security/encryption.py)\n=========================== short test summary info ============================\nERROR tests/security/test_ml_encryption.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.08s ===============================\n",
      "stderr": "/home/jj/.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:207: PytestDeprecationWarning: The configuration option \"asyncio_default_fixture_loop_scope\" is unset.\nThe event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: \"function\", \"class\", \"module\", \"package\", \"session\"\n\n  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))\n"
    },
    {
      "test_file": "test_ml_phi_security.py",
      "passed": false,
      "total_tests": 0,
      "passed_tests": 0,
      "failed_tests": 0,
      "skipped_tests": 0,
      "duration": 0.5289349555969238,
      "stdout": "============================= test session starts ==============================\ncollecting ... collected 0 items / 1 error\n\n==================================== ERRORS ====================================\n___________ ERROR collecting tests/security/test_ml_phi_security.py ____________\nImportError while importing test module '/home/jj/dev/Novamind-Backend/tests/security/test_ml_phi_security.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/security/test_ml_phi_security.py:15: in <module>\n    from app.infrastructure.ml.data_processing import PHIProcessor\nE   ModuleNotFoundError: No module named 'app.infrastructure.ml.data_processing'\n=========================== short test summary info ============================\nERROR tests/security/test_ml_phi_security.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.05s ===============================\n",
      "stderr": "/home/jj/.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:207: PytestDeprecationWarning: The configuration option \"asyncio_default_fixture_loop_scope\" is unset.\nThe event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: \"function\", \"class\", \"module\", \"package\", \"session\"\n\n  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))\n"
    },
    {
      "test_file": "test_phi_middleware.py",
      "passed": true,
      "total_tests": 14,
      "passed_tests": 0,
      "failed_tests": 0,
      "skipped_tests": 7,
      "duration": 0.4777228832244873,
      "stdout": "============================= test session starts ==============================\ncollecting ... collected 7 items\n\ntests/security/test_phi_middleware.py::TestPHIMiddleware::test_detects_phi_in_text SKIPPED [ 14%]\ntests/security/test_phi_middleware.py::TestPHIMiddleware::test_redacts_phi_from_text SKIPPED [ 28%]\ntests/security/test_phi_middleware.py::TestPHIMiddleware::test_sanitizes_log_message SKIPPED [ 42%]\ntests/security/test_phi_middleware.py::TestPHIMiddleware::test_sanitizes_error_response SKIPPED [ 57%]\ntests/security/test_phi_middleware.py::TestPHIMiddleware::test_sanitizes_request_logs SKIPPED [ 71%]\ntests/security/test_phi_middleware.py::TestPHIMiddleware::test_handles_nested_phi SKIPPED [ 85%]\ntests/security/test_phi_middleware.py::TestPHIMiddleware::test_preserves_non_phi SKIPPED [100%]\n\n============================== 7 skipped in 0.01s ==============================\n",
      "stderr": "/home/jj/.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:207: PytestDeprecationWarning: The configuration option \"asyncio_default_fixture_loop_scope\" is unset.\nThe event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: \"function\", \"class\", \"module\", \"package\", \"session\"\n\n  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))\n"
    },
    {
      "test_file": "test_repository_security.py",
      "passed": false,
      "total_tests": 20,
      "passed_tests": 0,
      "failed_tests": 0,
      "skipped_tests": 0,
      "duration": 1.085015058517456,
      "stdout": "============================= test session starts ==============================\ncollecting ... collected 10 items\n\ntests/security/test_repository_security.py::test_patient_creation_encrypts_phi ERROR [ 10%]\ntests/security/test_repository_security.py::test_patient_retrieval_decrypts_phi ERROR [ 20%]\ntests/security/test_repository_security.py::test_repository_filters_inactive_records ERROR [ 30%]\ntests/security/test_repository_security.py::test_audit_logging_on_patient_changes ERROR [ 40%]\ntests/security/test_repository_security.py::test_authorization_check_before_operations ERROR [ 50%]\ntests/security/test_repository_security.py::test_phi_never_appears_in_exceptions ERROR [ 60%]\ntests/security/test_repository_security.py::test_bulk_operations_maintain_encryption ERROR [ 70%]\ntests/security/test_repository_security.py::test_search_filters_without_exposing_phi ERROR [ 80%]\ntests/security/test_repository_security.py::test_encryption_key_rotation ERROR [ 90%]\ntests/security/test_repository_security.py::test_field_level_encryption ERROR [100%]\n\n==================================== ERRORS ====================================\n_____________ ERROR at setup of test_patient_creation_encrypts_phi _____________\ntests/security/test_repository_security.py:29: in encryption_service\n    with patch.object(service, '_load_encryption_key') as mock_load:\n/usr/lib/python3.10/unittest/mock.py:1447: in __enter__\n    original, local = self.get_original()\n/usr/lib/python3.10/unittest/mock.py:1420: in get_original\n    raise AttributeError(\nE   AttributeError: <app.infrastructure.security.encryption_service.EncryptionService object at 0x7efddbe9f310> does not have the attribute '_load_encryption_key'\n------------------------------ Captured log setup ------------------------------\nWARNING  encryption_service:encryption_service.py:54 No encryption key provided or found in environment. Generated a new one. This should be stored securely.\nWARNING  encryption_service:encryption_service.py:69 No encryption salt provided or found in environment. Generated a new one. This should be stored securely.\n____________ ERROR at setup of test_patient_retrieval_decrypts_phi _____________\ntests/security/test_repository_security.py:29: in encryption_service\n    with patch.object(service, '_load_encryption_key') as mock_load:\n/usr/lib/python3.10/unittest/mock.py:1447: in __enter__\n    original, local = self.get_original()\n/usr/lib/python3.10/unittest/mock.py:1420: in get_original\n    raise AttributeError(\nE   AttributeError: <app.infrastructure.security.encryption_service.EncryptionService object at 0x7efddb94a200> does not have the attribute '_load_encryption_key'\n------------------------------ Captured log setup ------------------------------\nWARNING  encryption_service:encryption_service.py:54 No encryption key provided or found in environment. Generated a new one. This should be stored securely.\nWARNING  encryption_service:encryption_service.py:69 No encryption salt provided or found in environment. Generated a new one. This should be stored securely.\n__________ ERROR at setup of test_repository_filters_inactive_records __________\ntests/security/test_repository_security.py:29: in encryption_service\n    with patch.object(service, '_load_encryption_key') as mock_load:\n/usr/lib/python3.10/unittest/mock.py:1447: in __enter__\n    original, local = self.get_original()\n/usr/lib/python3.10/unittest/mock.py:1420: in get_original\n    raise AttributeError(\nE   AttributeError: <app.infrastructure.security.encryption_service.EncryptionService object at 0x7efddba28d00> does not have the attribute '_load_encryption_key'\n------------------------------ Captured log setup ------------------------------\nWARNING  encryption_service:encryption_service.py:54 No encryption key provided or found in environment. Generated a new one. This should be stored securely.\nWARNING  encryption_service:encryption_service.py:69 No encryption salt provided or found in environment. Generated a new one. This should be stored securely.\n___________ ERROR at setup of test_audit_logging_on_patient_changes ____________\ntests/security/test_repository_security.py:29: in encryption_service\n    with patch.object(service, '_load_encryption_key') as mock_load:\n/usr/lib/python3.10/unittest/mock.py:1447: in __enter__\n    original, local = self.get_original()\n/usr/lib/python3.10/unittest/mock.py:1420: in get_original\n    raise AttributeError(\nE   AttributeError: <app.infrastructure.security.encryption_service.EncryptionService object at 0x7efddb94efe0> does not have the attribute '_load_encryption_key'\n------------------------------ Captured log setup ------------------------------\nWARNING  encryption_service:encryption_service.py:54 No encryption key provided or found in environment. Generated a new one. This should be stored securely.\nWARNING  encryption_service:encryption_service.py:69 No encryption salt provided or found in environment. Generated a new one. This should be stored securely.\n_________ ERROR at setup of test_authorization_check_before_operations _________\ntests/security/test_repository_security.py:29: in encryption_service\n    with patch.object(service, '_load_encryption_key') as mock_load:\n/usr/lib/python3.10/unittest/mock.py:1447: in __enter__\n    original, local = self.get_original()\n/usr/lib/python3.10/unittest/mock.py:1420: in get_original\n    raise AttributeError(\nE   AttributeError: <app.infrastructure.security.encryption_service.EncryptionService object at 0x7efddba17490> does not have the attribute '_load_encryption_key'\n------------------------------ Captured log setup ------------------------------\nWARNING  encryption_service:encryption_service.py:54 No encryption key provided or found in environment. Generated a new one. This should be stored securely.\nWARNING  encryption_service:encryption_service.py:69 No encryption salt provided or found in environment. Generated a new one. This should be stored securely.\n____________ ERROR at setup of test_phi_never_appears_in_exceptions ____________\ntests/security/test_repository_security.py:29: in encryption_service\n    with patch.object(service, '_load_encryption_key') as mock_load:\n/usr/lib/python3.10/unittest/mock.py:1447: in __enter__\n    original, local = self.get_original()\n/usr/lib/python3.10/unittest/mock.py:1420: in get_original\n    raise AttributeError(\nE   AttributeError: <app.infrastructure.security.encryption_service.EncryptionService object at 0x7efddba2be80> does not have the attribute '_load_encryption_key'\n------------------------------ Captured log setup ------------------------------\nWARNING  encryption_service:encryption_service.py:54 No encryption key provided or found in environment. Generated a new one. This should be stored securely.\nWARNING  encryption_service:encryption_service.py:69 No encryption salt provided or found in environment. Generated a new one. This should be stored securely.\n__________ ERROR at setup of test_bulk_operations_maintain_encryption __________\ntests/security/test_repository_security.py:29: in encryption_service\n    with patch.object(service, '_load_encryption_key') as mock_load:\n/usr/lib/python3.10/unittest/mock.py:1447: in __enter__\n    original, local = self.get_original()\n/usr/lib/python3.10/unittest/mock.py:1420: in get_original\n    raise AttributeError(\nE   AttributeError: <app.infrastructure.security.encryption_service.EncryptionService object at 0x7efddbe43460> does not have the attribute '_load_encryption_key'\n------------------------------ Captured log setup ------------------------------\nWARNING  encryption_service:encryption_service.py:54 No encryption key provided or found in environment. Generated a new one. This should be stored securely.\nWARNING  encryption_service:encryption_service.py:69 No encryption salt provided or found in environment. Generated a new one. This should be stored securely.\n__________ ERROR at setup of test_search_filters_without_exposing_phi __________\ntests/security/test_repository_security.py:29: in encryption_service\n    with patch.object(service, '_load_encryption_key') as mock_load:\n/usr/lib/python3.10/unittest/mock.py:1447: in __enter__\n    original, local = self.get_original()\n/usr/lib/python3.10/unittest/mock.py:1420: in get_original\n    raise AttributeError(\nE   AttributeError: <app.infrastructure.security.encryption_service.EncryptionService object at 0x7efddb954f70> does not have the attribute '_load_encryption_key'\n------------------------------ Captured log setup ------------------------------\nWARNING  encryption_service:encryption_service.py:54 No encryption key provided or found in environment. Generated a new one. This should be stored securely.\nWARNING  encryption_service:encryption_service.py:69 No encryption salt provided or found in environment. Generated a new one. This should be stored securely.\n________________ ERROR at setup of test_encryption_key_rotation ________________\ntests/security/test_repository_security.py:29: in encryption_service\n    with patch.object(service, '_load_encryption_key') as mock_load:\n/usr/lib/python3.10/unittest/mock.py:1447: in __enter__\n    original, local = self.get_original()\n/usr/lib/python3.10/unittest/mock.py:1420: in get_original\n    raise AttributeError(\nE   AttributeError: <app.infrastructure.security.encryption_service.EncryptionService object at 0x7efddbe81f90> does not have the attribute '_load_encryption_key'\n------------------------------ Captured log setup ------------------------------\nWARNING  encryption_service:encryption_service.py:54 No encryption key provided or found in environment. Generated a new one. This should be stored securely.\nWARNING  encryption_service:encryption_service.py:69 No encryption salt provided or found in environment. Generated a new one. This should be stored securely.\n________________ ERROR at setup of test_field_level_encryption _________________\ntests/security/test_repository_security.py:29: in encryption_service\n    with patch.object(service, '_load_encryption_key') as mock_load:\n/usr/lib/python3.10/unittest/mock.py:1447: in __enter__\n    original, local = self.get_original()\n/usr/lib/python3.10/unittest/mock.py:1420: in get_original\n    raise AttributeError(\nE   AttributeError: <app.infrastructure.security.encryption_service.EncryptionService object at 0x7efddb8ec880> does not have the attribute '_load_encryption_key'\n------------------------------ Captured log setup ------------------------------\nWARNING  encryption_service:encryption_service.py:54 No encryption key provided or found in environment. Generated a new one. This should be stored securely.\nWARNING  encryption_service:encryption_service.py:69 No encryption salt provided or found in environment. Generated a new one. This should be stored securely.\n=========================== short test summary info ============================\nERROR tests/security/test_repository_security.py::test_patient_creation_encrypts_phi\nERROR tests/security/test_repository_security.py::test_patient_retrieval_decrypts_phi\nERROR tests/security/test_repository_security.py::test_repository_filters_inactive_records\nERROR tests/security/test_repository_security.py::test_audit_logging_on_patient_changes\nERROR tests/security/test_repository_security.py::test_authorization_check_before_operations\nERROR tests/security/test_repository_security.py::test_phi_never_appears_in_exceptions\nERROR tests/security/test_repository_security.py::test_bulk_operations_maintain_encryption\nERROR tests/security/test_repository_security.py::test_search_filters_without_exposing_phi\nERROR tests/security/test_repository_security.py::test_encryption_key_rotation\nERROR tests/security/test_repository_security.py::test_field_level_encryption\n============================== 10 errors in 0.59s ==============================\n",
      "stderr": "/home/jj/.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:207: PytestDeprecationWarning: The configuration option \"asyncio_default_fixture_loop_scope\" is unset.\nThe event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: \"function\", \"class\", \"module\", \"package\", \"session\"\n\n  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))\n"
    },
    {
      "test_file": "test_unit_of_work.py",
      "passed": false,
      "total_tests": 0,
      "passed_tests": 0,
      "failed_tests": 0,
      "skipped_tests": 0,
      "duration": 0.662921667098999,
      "stdout": "============================= test session starts ==============================\ncollecting ... collected 0 items / 1 error\n\n==================================== ERRORS ====================================\n_____________ ERROR collecting tests/security/test_unit_of_work.py _____________\nImportError while importing test module '/home/jj/dev/Novamind-Backend/tests/security/test_unit_of_work.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/security/test_unit_of_work.py:6: in <module>\n    from app.domain.exceptions import TransactionError\nE   ImportError: cannot import name 'TransactionError' from 'app.domain.exceptions' (/home/jj/dev/Novamind-Backend/app/domain/exceptions/__init__.py)\n=========================== short test summary info ============================\nERROR tests/security/test_unit_of_work.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.15s ===============================\n",
      "stderr": "/home/jj/.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:207: PytestDeprecationWarning: The configuration option \"asyncio_default_fixture_loop_scope\" is unset.\nThe event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: \"function\", \"class\", \"module\", \"package\", \"session\"\n\n  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))\n"
    }
  ],
  "summary": {
    "total_files": 13,
    "passed_files": 3,
    "total_tests": 136,
    "passed_tests": 14,
    "failed_tests": 18,
    "skipped_tests": 20,
    "total_duration": 7.862391233444214
  }
}