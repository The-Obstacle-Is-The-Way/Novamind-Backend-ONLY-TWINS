name: Novamind Backend Test Pipeline

on:
  push:
    branches: [main, develop]
    paths:
      - "backend/**"
  pull_request:
    branches: [main, develop]
    paths:
      - "backend/**"
  workflow_dispatch:

defaults:
  run:
    working-directory: ./backend

jobs:
  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: backend/requirements-dev.txt

      - name: Install linting dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run Ruff linter
        run: ruff check .

      - name: Run mypy type checker
        run: mypy .

  security:
    name: Security Checks
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: |
            backend/requirements.txt
            backend/requirements-dev.txt
            backend/requirements-test.txt
            backend/requirements-security.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install security tools first
          pip install -r requirements-security.txt
          # Install other potentially needed deps for safety check
          pip install -r requirements.txt -r requirements-dev.txt -r requirements-test.txt

      - name: Run Bandit
        run: bandit -r app/ -f json -o ../security-reports/bandit-report.json || echo "Bandit found issues"

      - name: Run Safety
        run: safety check -r requirements.txt -r requirements-dev.txt -r requirements-test.txt --json --output ../security-reports/safety-report.json || echo "Safety found issues"

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            security-reports/bandit-report.json
            security-reports/safety-report.json
          retention-days: 7

  standalone:
    name: Standalone Tests
    runs-on: ubuntu-latest
    needs: lint # Can run in parallel with security
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: |
            backend/requirements-standalone.txt
            backend/requirements-test.txt

      - name: Install standalone dependencies
        run: |
          python -m pip install --upgrade pip
          # Only install minimal dependencies needed for standalone tests
          pip install -r requirements-standalone.txt -r requirements-test.txt

      - name: Run standalone tests
        run: |
          export PYTHONPATH=$PYTHONPATH:$(pwd)
          export TESTING=1
          export ENVIRONMENT=testing
          # Run tests using the updated script and generate coverage data
          python -m backend.scripts.run_tests --standalone --coverage --xml --json
        # Note: Coverage reports (html/xml/json) are generated here but will be combined later

      - name: Upload standalone test results
        uses: actions/upload-artifact@v4
        with:
          name: standalone-test-results
          path: backend/test-results/ # Assuming run_tests.py puts results here
          retention-days: 7

      - name: Upload standalone coverage data
        uses: actions/upload-artifact@v4
        with:
          name: standalone-coverage-data
          path: backend/.coverage.standalone # Assuming coverage generates a data file
          retention-days: 7

  venv:
    name: VENV-Dependent Tests
    runs-on: ubuntu-latest
    needs: standalone
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: |
            backend/requirements.txt
            backend/requirements-dev.txt
            backend/requirements-test.txt

      - name: Install VENV dependencies
        run: |
          python -m pip install --upgrade pip
          # Install app dependencies + test dependencies (excluding DB drivers if possible, but likely install all for simplicity)
          pip install -r requirements.txt -r requirements-dev.txt -r requirements-test.txt

      - name: Run VENV-dependent tests
        run: |
          export PYTHONPATH=$PYTHONPATH:$(pwd)
          export TESTING=1
          export ENVIRONMENT=testing
          python -m backend.scripts.run_tests --venv --coverage --xml --json

      - name: Upload venv test results
        uses: actions/upload-artifact@v4
        with:
          name: venv-test-results
          path: backend/test-results/
          retention-days: 7

      - name: Upload venv coverage data
        uses: actions/upload-artifact@v4
        with:
          name: venv-coverage-data
          path: backend/.coverage.venv
          retention-days: 7

  db:
    name: DB-Dependent Tests
    runs-on: ubuntu-latest
    needs: venv
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: novamind_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: |
            backend/requirements.txt
            backend/requirements-dev.txt
            backend/requirements-test.txt

      - name: Install all dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt -r requirements-test.txt
          # Ensure DB drivers are installed
          pip install asyncpg>=0.28.0 aiosqlite>=0.19.0 redis>=4.0.0

      - name: Run DB-dependent tests
        env:
          TESTING: 1
          ENVIRONMENT: testing
          POSTGRES_SERVER: localhost
          POSTGRES_PORT: 5432 # Default, but explicit
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: novamind_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379 # Default, but explicit
          SECRET_KEY: test_secret_key_for_ci
          PYTHONPATH: ${{ github.workspace }}/backend
        run: |
          # Wait for services if needed (though health checks should handle this)
          # sleep 10
          python -m backend.scripts.run_tests --db --coverage --xml --json

      - name: Upload db test results
        uses: actions/upload-artifact@v4
        with:
          name: db-test-results
          path: backend/test-results/
          retention-days: 7

      - name: Upload db coverage data
        uses: actions/upload-artifact@v4
        with:
          name: db-coverage-data
          path: backend/.coverage.db
          retention-days: 7

  report:
    name: Generate Reports
    runs-on: ubuntu-latest
    needs: [standalone, venv, db] # Wait for all test stages
    if: always() # Run even if previous jobs failed to generate reports

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: backend/requirements-test.txt # For coverage tool

      - name: Install reporting dependencies
        run: |
          python -m pip install --upgrade pip
          pip install coverage[toml] junitparser # Install tools needed for reporting

      - name: Download test results artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Combine JUnit XML reports
        run: |
          mkdir -p combined-results
          junitparser merge artifacts/*/test-results/*.xml combined-results/combined-test-results.xml || echo "Failed to merge JUnit reports"

      - name: Combine Coverage data
        run: |
          # Copy coverage data files from artifacts
          find artifacts -name '.coverage.*' -exec cp {} . \;
          coverage combine || echo "No coverage files found to combine."
          coverage report # Print combined report to logs
          coverage html -d coverage_html || echo "Failed to generate HTML coverage report."
          coverage xml -o coverage.xml || echo "Failed to generate XML coverage report."
          coverage json -o coverage.json || echo "Failed to generate JSON coverage report."

      - name: Upload combined test results
        uses: actions/upload-artifact@v4
        with:
          name: combined-test-results
          path: combined-results/combined-test-results.xml
          retention-days: 7

      - name: Upload combined coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: combined-coverage-report
          path: |
            coverage_html/
            coverage.xml
            coverage.json
          retention-days: 7

      # Optional: Upload to Codecov
      # - name: Upload coverage to Codecov
      #   uses: codecov/codecov-action@v4
      #   with:
      #     files: ./coverage.xml # Use combined XML report
      #     fail_ci_if_error: false
      #     token: ${{ secrets.CODECOV_TOKEN }} # Optional: if needed for private repos
