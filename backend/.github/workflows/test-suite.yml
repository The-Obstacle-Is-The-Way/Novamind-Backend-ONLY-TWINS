name: Novamind Backend Test Suite

on:
  push:
    branches: [main, develop]
    paths:
      - "backend/**"
  pull_request:
    branches: [main, develop]
    paths:
      - "backend/**"
  workflow_dispatch: # Allow manual triggering

jobs:
  # First stage: Run standalone tests (no dependencies)
  standalone-tests:
    name: Standalone Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-standalone.txt
          pip install -r requirements-test.txt

      - name: Run standalone tests
        run: python -m pytest -m standalone -v --junitxml=test-results/standalone-results.xml

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: standalone-test-results
          path: backend/test-results/standalone-results.xml

  # Second stage: Run VENV-only tests (require Python packages but no services)
  venv-tests:
    name: VENV-Only Tests
    runs-on: ubuntu-latest
    needs: standalone-tests
    defaults:
      run:
        working-directory: backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt

      - name: Run VENV-only tests
        run: python -m pytest -m venv_only -v --junitxml=test-results/venv-results.xml

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: venv-test-results
          path: backend/test-results/venv-results.xml

  # Third stage: Run DB-required tests (with Docker container)
  db-tests:
    name: DB-Required Tests
    runs-on: ubuntu-latest
    needs: venv-tests
    defaults:
      run:
        working-directory: backend

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: novamind_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt

      - name: Run database migrations
        run: |
          python -m alembic upgrade head
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/novamind_test
          REDIS_URL: redis://localhost:6379/0

      - name: Run DB-required tests
        run: python -m pytest -m db_required -v --junitxml=test-results/db-results.xml
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/novamind_test
          REDIS_URL: redis://localhost:6379/0
          TESTING: "True"

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: db-test-results
          path: backend/test-results/db-results.xml

  # Linting and code quality
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run flake8
        run: flake8 app

      - name: Run isort check
        run: isort --check-only --diff app

      - name: Run black check
        run: black --check app

      - name: Run mypy
        run: mypy app

  # Test report generation
  test-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [standalone-tests, venv-tests, db-tests]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download all test results
        uses: actions/download-artifact@v3
        with:
          path: test-results

      - name: Display structure of downloaded files
        run: ls -R test-results

      - name: Publish test report
        uses: mikepenz/action-junit-report@v3
        with:
          report_paths: "test-results/**/*.xml"
          fail_on_failure: true
