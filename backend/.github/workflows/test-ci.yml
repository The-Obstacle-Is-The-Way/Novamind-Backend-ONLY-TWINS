name: Novamind Backend CI

on:
  push:
    branches: [main, master, develop]
    paths:
      - "backend/**"
  pull_request:
    branches: [main, master, develop]
    paths:
      - "backend/**"
  workflow_dispatch:

jobs:
  lint:
    name: Lint Python code
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run Black
        run: |
          black --check .

      - name: Run isort
        run: |
          isort --check .

      - name: Run Ruff
        run: |
          ruff check .

  standalone-tests:
    name: Standalone Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-standalone.txt
          pip install -r requirements-test.txt

      - name: Run standalone tests
        run: |
          ./scripts/test_runner.sh -l standalone -j test-reports/standalone -c

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: standalone-test-results
          path: backend/test-reports/standalone

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        if: success()
        with:
          name: standalone-coverage
          path: backend/.coverage

  venv-tests:
    name: VENV-Only Tests
    runs-on: ubuntu-latest
    needs: standalone-tests
    defaults:
      run:
        working-directory: ./backend

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt

      - name: Run VENV-only tests
        run: |
          ./scripts/test_runner.sh -l venv_only -j test-reports/venv -c

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: venv-test-results
          path: backend/test-reports/venv

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        if: success()
        with:
          name: venv-coverage
          path: backend/.coverage

  db-tests:
    name: DB-Required Tests
    runs-on: ubuntu-latest
    needs: venv-tests
    defaults:
      run:
        working-directory: ./backend

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt

      - name: Initialize database
        run: |
          alembic upgrade head
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

      - name: Run DB-required tests
        run: |
          ./scripts/test_runner.sh -l db_required -j test-reports/db -c
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: db-test-results
          path: backend/test-reports/db

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        if: success()
        with:
          name: db-coverage
          path: backend/.coverage

  coverage-report:
    name: Generate Coverage Report
    runs-on: ubuntu-latest
    needs: [standalone-tests, venv-tests, db-tests]
    if: success()
    defaults:
      run:
        working-directory: ./backend

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install coverage
        run: pip install coverage

      - name: Download standalone coverage
        uses: actions/download-artifact@v3
        with:
          name: standalone-coverage
          path: backend/coverage-reports/standalone

      - name: Download venv coverage
        uses: actions/download-artifact@v3
        with:
          name: venv-coverage
          path: backend/coverage-reports/venv

      - name: Download db coverage
        uses: actions/download-artifact@v3
        with:
          name: db-coverage
          path: backend/coverage-reports/db

      - name: Combine coverage reports
        run: |
          mkdir -p coverage-reports
          cp coverage-reports/standalone/.coverage .coverage.standalone
          cp coverage-reports/venv/.coverage .coverage.venv
          cp coverage-reports/db/.coverage .coverage.db
          coverage combine .coverage.standalone .coverage.venv .coverage.db
          coverage report
          coverage html
          coverage xml

      - name: Upload combined coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: |
            backend/htmlcov
            backend/coverage.xml
