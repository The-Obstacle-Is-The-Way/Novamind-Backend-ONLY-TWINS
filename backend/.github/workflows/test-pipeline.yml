name: Novamind Backend Test Pipeline

on:
  push:
    branches: [main, master, develop]
    paths:
      - "backend/**"
  pull_request:
    branches: [main, master, develop]
    paths:
      - "backend/**"
  workflow_dispatch:

jobs:
  # Code quality checks
  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Install linting dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run Ruff linter
        run: |
          ruff check ./app

      - name: Run mypy type checker
        run: |
          mypy ./app

      - name: Upload lint results
        uses: actions/upload-artifact@v3
        with:
          name: lint-results
          path: backend/lint-results.txt
          if-no-files-found: ignore

  # First stage: Standalone tests (no dependencies beyond Python)
  standalone-tests:
    name: Standalone Tests
    runs-on: ubuntu-latest
    needs: lint
    defaults:
      run:
        working-directory: ./backend

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Install standalone dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-standalone.txt

      - name: Run standalone tests
        run: |
          ./run_tests.sh --standalone --xml

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: standalone-test-results
          path: backend/test-results/standalone-results.xml

      - name: Upload coverage
        uses: actions/upload-artifact@v3
        with:
          name: standalone-coverage
          path: backend/coverage.json

  # Second stage: VENV-dependent tests (require Python packages but no external services)
  venv-tests:
    name: VENV-dependent Tests
    runs-on: ubuntu-latest
    needs: standalone-tests
    defaults:
      run:
        working-directory: ./backend

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Install all dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install -r requirements-test.txt

      - name: Run VENV-dependent tests
        run: |
          ./run_tests.sh --venv --xml

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: venv-test-results
          path: backend/test-results/venv-results.xml

      - name: Upload coverage
        uses: actions/upload-artifact@v3
        with:
          name: venv-coverage
          path: backend/coverage.json

  # Third stage: DB-dependent tests (require database or other external services)
  db-tests:
    name: DB-dependent Tests
    runs-on: ubuntu-latest
    needs: venv-tests
    defaults:
      run:
        working-directory: ./backend

    services:
      # PostgreSQL service container
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: novamind_test
        ports:
          - 5432:5432
        # Health checks to verify database is ready
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      # Redis service container
      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        # Health checks to verify redis is ready
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Install all dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install -r requirements-test.txt

      - name: Set up environment
        run: |
          ./run_tests.sh --setup-env

      - name: Run DB-dependent tests
        env:
          TEST_DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/novamind_test
          TEST_REDIS_URL: redis://localhost:6379/0
        run: |
          ./run_tests.sh --db --xml --html

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: db-test-results
          path: backend/test-results/db-results.xml

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: full-coverage-report
          path: |
            backend/coverage.json
            backend/coverage_html/**

      - name: Clean up environment
        if: always()
        run: |
          ./run_tests.sh --cleanup-env

  # Final stage: Combine test results and generate reports
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [standalone-tests, venv-tests, db-tests]
    defaults:
      run:
        working-directory: ./backend

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install reporting dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov coverage junitparser

      - name: Download all test results
        uses: actions/download-artifact@v3
        with:
          path: test-artifacts

      - name: Generate combined reports
        run: |
          mkdir -p test-results
          cp test-artifacts/standalone-test-results/standalone-results.xml test-results/
          cp test-artifacts/venv-test-results/venv-results.xml test-results/
          cp test-artifacts/db-test-results/db-results.xml test-results/

          python -c "
          import junitparser
          from pathlib import Path

          # Combine all JUnit XML files
          combined = junitparser.JUnitXml()
          for xml_file in Path('test-results').glob('*-results.xml'):
              combined += junitparser.JUnitXml.fromfile(xml_file)

          # Save combined report
          combined.write('test-results/combined-results.xml')

          # Calculate totals
          total_tests = 0
          total_failures = 0
          total_errors = 0
          total_skipped = 0

          for suite in combined:
              total_tests += suite.tests
              total_failures += suite.failures
              total_errors += suite.errors
              total_skipped += suite.skipped

          print(f'Total tests: {total_tests}')
          print(f'Failures: {total_failures}')
          print(f'Errors: {total_errors}')
          print(f'Skipped: {total_skipped}')
          "

      - name: Upload combined results
        uses: actions/upload-artifact@v3
        with:
          name: combined-test-results
          path: backend/test-results/combined-results.xml
