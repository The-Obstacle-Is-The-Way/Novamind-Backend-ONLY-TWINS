name: Novamind Test Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # Phase 1: Lint and security checks
  lint-and-security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r requirements-security.txt

      - name: Run linters
        run: |
          black --check --line-length 100 .
          isort --check-only --profile black .
          flake8 .

      - name: Run security checks
        run: |
          bandit -r app -f json -o security-reports/bandit-results.json
          safety check -r requirements.txt -r requirements-dev.txt -r requirements-security.txt --json > security-reports/safety-results.json

  # Phase 2: Standalone tests
  standalone-tests:
    runs-on: ubuntu-latest
    needs: lint-and-security
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Install minimal dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-standalone.txt

      - name: Run standalone tests
        run: |
          python -m pytest -m standalone --junitxml=test-results/standalone-results.xml -v

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: standalone-test-results
          path: test-results/standalone-results.xml

  # Phase 3: VENV-only tests
  venv-tests:
    runs-on: ubuntu-latest
    needs: standalone-tests
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Install all dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run venv-only tests
        run: |
          python -m pytest -m venv_only --junitxml=test-results/venv-results.xml -v

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: venv-test-results
          path: test-results/venv-results.xml

  # Phase 4: Database-dependent tests
  db-tests:
    runs-on: ubuntu-latest
    needs: venv-tests
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: novamind_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Install all dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Initialize database
        run: |
          alembic upgrade head

      - name: Run database-dependent tests
        run: |
          python -m pytest -m db_required --junitxml=test-results/db-results.xml -v
        env:
          DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/novamind_test
          REDIS_URL: redis://localhost:6379/0

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: db-test-results
          path: test-results/db-results.xml

  # Phase 5: Generate test report
  generate-report:
    runs-on: ubuntu-latest
    needs: [standalone-tests, venv-tests, db-tests]
    if: always()
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Download all test results
        uses: actions/download-artifact@v3
        with:
          path: test-results

      - name: Install reporting dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest-html

      - name: Generate combined report
        run: |
          python scripts/run_dependency_tests.py --report
          mkdir -p combined-report
          cp -r test-results combined-report/
          cp test-results/test-dependency-report-*.txt combined-report/

      - name: Upload combined report
        uses: actions/upload-artifact@v3
        with:
          name: test-report
          path: combined-report
