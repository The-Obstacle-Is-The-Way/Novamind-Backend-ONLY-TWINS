name: Novamind Test Pipeline

on:
  push:
    branches: [main, develop]
    paths:
      - "backend/**"
  pull_request:
    branches: [main, develop]
    paths:
      - "backend/**"
  workflow_dispatch:
    inputs:
      debug:
        description: "Run with debug logging enabled"
        required: false
        default: false
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # First stage: Standalone tests (no dependencies)
  standalone-tests:
    name: Standalone Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Install standalone test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-standalone.txt
          pip install -r requirements-test.txt

      - name: Run standalone tests
        run: |
          chmod +x run_tests.sh
          ./run_tests.sh --standalone --xml --ci
        env:
          PYTHONPATH: ${{ github.workspace }}/backend

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: standalone-test-results
          path: |
            backend/test-results/standalone-*.xml
          if-no-files-found: warn

  # Second stage: VENV-only tests (require packages but no external services)
  venv-tests:
    name: VENV-Only Tests
    runs-on: ubuntu-latest
    needs: standalone-tests
    defaults:
      run:
        working-directory: backend

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Install all dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt
          pip install -r requirements-dev.txt

      - name: Run VENV-only tests
        run: |
          chmod +x run_tests.sh
          ./run_tests.sh --venv --xml --ci
        env:
          PYTHONPATH: ${{ github.workspace }}/backend

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: venv-test-results
          path: |
            backend/test-results/venv-*.xml
          if-no-files-found: warn

  # Third stage: DB-required tests (require database connections)
  db-tests:
    name: Database Tests
    runs-on: ubuntu-latest
    needs: [standalone-tests, venv-tests]
    defaults:
      run:
        working-directory: backend

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: novamind_test
        ports:
          - 15432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:alpine
        ports:
          - 16379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Install all dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt
          pip install -r requirements-dev.txt

      - name: Run database migrations
        run: |
          alembic upgrade head
        env:
          PYTHONPATH: ${{ github.workspace }}/backend
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_HOST: localhost
          DB_PORT: 15432
          DB_NAME: novamind_test

      - name: Run DB-required tests
        run: |
          chmod +x run_tests.sh
          ./run_tests.sh --db --xml --html --ci
        env:
          PYTHONPATH: ${{ github.workspace }}/backend
          TEST_DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:15432/novamind_test
          TEST_REDIS_URL: redis://localhost:16379/0

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: db-test-results
          path: |
            backend/test-results/db-*.xml
          if-no-files-found: warn

      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: |
            backend/coverage_html/
          if-no-files-found: warn

  # Final stage: Test summary and reporting
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [standalone-tests, venv-tests, db-tests]
    if: always()

    steps:
      - name: Download all test results
        uses: actions/download-artifact@v3
        with:
          path: test-results

      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: |
            test-results/**/*.xml

      - name: Process test results
        run: |
          echo "Test Summary:"
          echo "=============="
          echo "Standalone Tests: ${{ needs.standalone-tests.result }}"
          echo "VENV-Only Tests: ${{ needs.venv-tests.result }}"
          echo "DB-Required Tests: ${{ needs.db-tests.result }}"

          if [[ "${{ needs.standalone-tests.result }}" == "success" && \
                "${{ needs.venv-tests.result }}" == "success" && \
                "${{ needs.db-tests.result }}" == "success" ]]; then
            echo "All tests passed!"
            exit 0
          else
            echo "Some tests failed!"
            exit 1
          fi
