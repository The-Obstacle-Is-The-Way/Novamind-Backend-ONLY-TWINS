<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="10" skipped="58" tests="335" time="1.360" timestamp="2025-04-11T04:34:07.386780" hostname="codespaces-703d42"><testcase classname="app.tests.standalone.test_appointment.TestAppointment" name="test_create_appointment" time="0.190" /><testcase classname="app.tests.standalone.test_appointment.TestAppointment" name="test_create_appointment_with_string_enums" time="0.001" /><testcase classname="app.tests.standalone.test_appointment.TestAppointment" name="test_create_appointment_with_auto_id" time="0.001" /><testcase classname="app.tests.standalone.test_appointment.TestAppointment" name="test_validate_required_fields" time="0.001" /><testcase classname="app.tests.standalone.test_appointment.TestAppointment" name="test_validate_appointment_times" time="0.001" /><testcase classname="app.tests.standalone.test_appointment.TestAppointment" name="test_confirm_appointment" time="0.001" /><testcase classname="app.tests.standalone.test_appointment.TestAppointment" name="test_confirm_non_scheduled_appointment" time="0.001" /><testcase classname="app.tests.standalone.test_appointment.TestAppointment" name="test_check_in_appointment" time="0.001" /><testcase classname="app.tests.standalone.test_appointment.TestAppointment" name="test_check_in_confirmed_appointment" time="0.001" /><testcase classname="app.tests.standalone.test_appointment.TestAppointment" name="test_check_in_invalid_appointment" time="0.001" /><testcase classname="app.tests.standalone.test_appointment.TestAppointment" name="test_start_appointment" time="0.001" /><testcase classname="app.tests.standalone.test_appointment.TestAppointment" name="test_start_invalid_appointment" time="0.001" /><testcase classname="app.tests.standalone.test_appointment.TestAppointment" name="test_complete_appointment" time="0.001" /><testcase classname="app.tests.standalone.test_appointment.TestAppointment" name="test_complete_invalid_appointment" time="0.001" /><testcase classname="app.tests.standalone.test_appointment.TestAppointment" name="test_cancel_appointment" time="0.001" /><testcase classname="app.tests.standalone.test_appointment.TestAppointment" name="test_cancel_invalid_appointment" time="0.001" /><testcase classname="app.tests.standalone.test_appointment.TestAppointment" name="test_mark_no_show" time="0.001" /><testcase classname="app.tests.standalone.test_appointment.TestAppointment" name="test_mark_no_show_confirmed_appointment" time="0.001" /><testcase classname="app.tests.standalone.test_appointment.TestAppointment" name="test_mark_no_show_invalid_appointment" time="0.001" /><testcase classname="app.tests.standalone.test_appointment.TestAppointment" name="test_reschedule_appointment" time="0.001" /><testcase classname="app.tests.standalone.test_appointment.TestAppointment" name="test_reschedule_invalid_appointment" time="0.001" /><testcase classname="app.tests.standalone.test_appointment.TestAppointment" name="test_reschedule_invalid_times" time="0.001" /><testcase classname="app.tests.standalone.test_appointment.TestAppointment" name="test_schedule_follow_up" time="0.001" /><testcase classname="app.tests.standalone.test_appointment.TestAppointment" name="test_schedule_follow_up_invalid_appointment" time="0.001" /><testcase classname="app.tests.standalone.test_appointment.TestAppointment" name="test_send_reminder" time="0.001" /><testcase classname="app.tests.standalone.test_appointment.TestAppointment" name="test_update_notes" time="0.002" /><testcase classname="app.tests.standalone.test_appointment.TestAppointment" name="test_to_dict" time="0.001" /><testcase classname="app.tests.standalone.test_appointment.TestAppointment" name="test_from_dict" time="0.001" /><testcase classname="app.tests.standalone.test_appointment.TestAppointment" name="test_equality" time="0.001" /><testcase classname="app.tests.standalone.test_appointment.TestAppointment" name="test_inequality" time="0.001" /><testcase classname="app.tests.standalone.test_appointment.TestAppointment" name="test_string_representation" time="0.001" /><testcase classname="app.tests.standalone.test_base_security_test.TestBaseSecurityTest" name="test_default_attributes" time="0.001" /><testcase classname="app.tests.standalone.test_base_security_test.TestBaseSecurityTest" name="test_mock_auth_service" time="0.001" /><testcase classname="app.tests.standalone.test_base_security_test.AdminSecurityTest" name="test_admin_roles" time="0.001" /><testcase classname="app.tests.standalone.test_base_security_test.ClinicianSecurityTest" name="test_clinician_roles" time="0.001" /><testcase classname="app.tests.standalone.test_biometric_event_processor.TestBiometricEventProcessor" name="test_add_rule" time="0.001" /><testcase classname="app.tests.standalone.test_biometric_event_processor.TestBiometricEventProcessor" name="test_remove_rule" time="0.001" /><testcase classname="app.tests.standalone.test_biometric_event_processor.TestBiometricEventProcessor" name="test_register_observer" time="0.002" /><testcase classname="app.tests.standalone.test_biometric_event_processor.TestBiometricEventProcessor" name="test_unregister_observer" time="0.002" /><testcase classname="app.tests.standalone.test_biometric_event_processor.TestBiometricEventProcessor" name="test_process_data_point_no_patient_id" time="0.001"><failure message="pydantic_core._pydantic_core.ValidationError: 1 validation error for BiometricDataPoint&#10;patient_id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.9/v/uuid_type">self = &lt;app.tests.standalone.test_biometric_event_processor.TestBiometricEventProcessor object at 0x7b2e3930ab70&gt;

    @pytest.mark.standalone
    def test_process_data_point_no_patient_id(self):
        """Test that process_data_point raises an error if the data point has no patient ID."""
        processor = BiometricEventProcessor()
&gt;       data_point = BiometricDataPoint(
            data_id=UUID("00000000-0000-0000-0000-000000000002"),
            patient_id=None,
            data_type="heart_rate",
            value=120.0,
            timestamp=datetime.now(UTC),
            source="apple_watch",
            metadata={"activity": "resting"},
            confidence=0.95
        )
E       pydantic_core._pydantic_core.ValidationError: 1 validation error for BiometricDataPoint
E       patient_id
E         UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E           For further information visit https://errors.pydantic.dev/2.9/v/uuid_type

app/tests/standalone/test_biometric_event_processor.py:127: ValidationError</failure></testcase><testcase classname="app.tests.standalone.test_biometric_event_processor.TestBiometricEventProcessor" name="test_process_data_point_no_matching_rules" time="0.001" /><testcase classname="app.tests.standalone.test_biometric_event_processor.TestBiometricEventProcessor" name="test_process_data_point_matching_rule" time="0.002" /><testcase classname="app.tests.standalone.test_biometric_event_processor.TestBiometricEventProcessor" name="test_process_data_point_patient_specific_rule" time="0.001" /><testcase classname="app.tests.standalone.test_biometric_event_processor.TestBiometricEventProcessor" name="test_process_data_point_inactive_rule" time="0.001" /><testcase classname="app.tests.standalone.test_biometric_event_processor.TestBiometricEventProcessor" name="test_process_data_point_updates_context" time="0.001" /><testcase classname="app.tests.standalone.test_biometric_event_processor.TestAlertRule" name="test_evaluate_data_type_mismatch" time="0.001" /><testcase classname="app.tests.standalone.test_biometric_event_processor.TestAlertRule" name="test_evaluate_greater_than" time="0.001" /><testcase classname="app.tests.standalone.test_biometric_event_processor.TestAlertRule" name="test_evaluate_greater_than_or_equal" time="0.001" /><testcase classname="app.tests.standalone.test_biometric_event_processor.TestAlertRule" name="test_evaluate_less_than" time="0.002" /><testcase classname="app.tests.standalone.test_biometric_event_processor.TestAlertRule" name="test_evaluate_less_than_or_equal" time="0.001" /><testcase classname="app.tests.standalone.test_biometric_event_processor.TestAlertRule" name="test_evaluate_equal" time="0.001" /><testcase classname="app.tests.standalone.test_biometric_event_processor.TestAlertRule" name="test_evaluate_not_equal" time="0.001" /><testcase classname="app.tests.standalone.test_biometric_event_processor.TestBiometricAlert" name="test_acknowledge" time="0.001" /><testcase classname="app.tests.standalone.test_biometric_event_processor.TestAlertObservers" name="test_email_alert_observer" time="0.001" /><testcase classname="app.tests.standalone.test_biometric_event_processor.TestAlertObservers" name="test_sms_alert_observer_urgent" time="0.001" /><testcase classname="app.tests.standalone.test_biometric_event_processor.TestAlertObservers" name="test_sms_alert_observer_non_urgent" time="0.001" /><testcase classname="app.tests.standalone.test_biometric_event_processor.TestAlertObservers" name="test_in_app_alert_observer" time="0.001" /><testcase classname="app.tests.standalone.test_biometric_event_processor.TestClinicalRuleEngine" name="test_register_rule_template" time="0.001"><failure message="TypeError: ClinicalRuleEngine.register_rule_template() missing 1 required positional argument: 'template'">self = &lt;app.tests.standalone.test_biometric_event_processor.TestClinicalRuleEngine object at 0x7b2e3930ab40&gt;

    @pytest.mark.standalone
    def test_register_rule_template(self):
        """Test that register_rule_template correctly registers a template."""
        engine = ClinicalRuleEngine()
    
        # Create a template
        template = {
            "id": "high_blood_pressure",
            "name": "High Blood Pressure",
            "description": "Alert when blood pressure exceeds a threshold",
            "priority": AlertPriority.WARNING,
            "condition": {
                "data_type": "blood_pressure",
                "operator": "&gt;",
                "threshold": "${threshold}"
            },
            "parameters": ["threshold"]
        }
    
&gt;       engine.register_rule_template(template)
E       TypeError: ClinicalRuleEngine.register_rule_template() missing 1 required positional argument: 'template'

app/tests/standalone/test_biometric_event_processor.py:538: TypeError</failure></testcase><testcase classname="app.tests.standalone.test_biometric_event_processor.TestClinicalRuleEngine" name="test_register_custom_condition" time="0.001" /><testcase classname="app.tests.standalone.test_biometric_event_processor.TestClinicalRuleEngine" name="test_create_rule_from_template" time="0.001"><failure message="TypeError: ClinicalRuleEngine.register_rule_template() missing 1 required positional argument: 'template'">self = &lt;app.tests.standalone.test_biometric_event_processor.TestClinicalRuleEngine object at 0x7b2e395ab290&gt;
sample_clinician_id = UUID('00000000-0000-0000-0000-000000000001')

    @pytest.mark.standalone
    def test_create_rule_from_template(self, sample_clinician_id):
        """Test that create_rule_from_template correctly creates a rule from a template."""
        engine = ClinicalRuleEngine()
    
        # Register a template
        template = {
            "id": "high_heart_rate",
            "name": "High Heart Rate",
            "description": "Alert when heart rate exceeds a threshold",
            "priority": AlertPriority.WARNING,
            "condition": {
                "data_type": "heart_rate",
                "operator": "&gt;",
                "threshold": "${threshold}"
            },
            "parameters": ["threshold"]
        }
&gt;       engine.register_rule_template(template)
E       TypeError: ClinicalRuleEngine.register_rule_template() missing 1 required positional argument: 'template'

app/tests/standalone/test_biometric_event_processor.py:575: TypeError</failure></testcase><testcase classname="app.tests.standalone.test_biometric_event_processor.TestClinicalRuleEngine" name="test_create_rule_from_template_missing_parameter" time="0.001"><failure message="TypeError: ClinicalRuleEngine.register_rule_template() missing 1 required positional argument: 'template'">self = &lt;app.tests.standalone.test_biometric_event_processor.TestClinicalRuleEngine object at 0x7b2e395aa4e0&gt;
sample_clinician_id = UUID('00000000-0000-0000-0000-000000000001')

    @pytest.mark.standalone
    def test_create_rule_from_template_missing_parameter(self, sample_clinician_id):
        """Test that create_rule_from_template raises an error if a required parameter is missing."""
        engine = ClinicalRuleEngine()
    
        # Register a template
        template = {
            "id": "high_heart_rate",
            "name": "High Heart Rate",
            "description": "Alert when heart rate exceeds a threshold",
            "priority": AlertPriority.WARNING,
            "condition": {
                "data_type": "heart_rate",
                "operator": "&gt;",
                "threshold": "${threshold}"
            },
            "parameters": ["threshold"]
        }
&gt;       engine.register_rule_template(template)
E       TypeError: ClinicalRuleEngine.register_rule_template() missing 1 required positional argument: 'template'

app/tests/standalone/test_biometric_event_processor.py:612: TypeError</failure></testcase><testcase classname="app.tests.standalone.test_biometric_event_processor.TestClinicalRuleEngine" name="test_create_rule_from_template_unknown_template" time="0.001"><failure message="TypeError: ClinicalRuleEngine.create_rule_from_template() missing 3 required positional arguments: 'name', 'description', and 'priority'">self = &lt;app.tests.standalone.test_biometric_event_processor.TestClinicalRuleEngine object at 0x7b2e395a9e50&gt;
sample_clinician_id = UUID('00000000-0000-0000-0000-000000000001')

    @pytest.mark.standalone
    def test_create_rule_from_template_unknown_template(self, sample_clinician_id):
        """Test that create_rule_from_template raises an error if the template doesn't exist."""
        engine = ClinicalRuleEngine()
    
        # Try to create a rule from a non-existent template
        with pytest.raises(ValueError):
&gt;           engine.create_rule_from_template(
                template_id="non_existent_template",
                rule_id="test-rule-1",
                created_by=sample_clinician_id,
                parameters={"threshold": 100.0}
            )
E           TypeError: ClinicalRuleEngine.create_rule_from_template() missing 3 required positional arguments: 'name', 'description', and 'priority'

app/tests/standalone/test_biometric_event_processor.py:630: TypeError</failure></testcase><testcase classname="app.tests.standalone.test_debugging" name="test_enum_behavior" time="0.001" /><testcase classname="app.tests.standalone.test_enhanced_log_sanitizer.TestPHIPattern" name="test_phi_pattern_matches_regex" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_enhanced_log_sanitizer.py:20: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_enhanced_log_sanitizer.TestPHIPattern" name="test_phi_pattern_matches_exact" time="0.001" /><testcase classname="app.tests.standalone.test_enhanced_log_sanitizer.TestPHIPattern" name="test_phi_pattern_matches_fuzzy" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_enhanced_log_sanitizer.py:60: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_enhanced_log_sanitizer.TestPHIPattern" name="test_phi_pattern_matches_context" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_enhanced_log_sanitizer.py:79: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_enhanced_log_sanitizer.TestPatternRepository" name="test_default_patterns" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_enhanced_log_sanitizer.py:104: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_enhanced_log_sanitizer.TestPatternRepository" name="test_load_patterns_from_file" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_enhanced_log_sanitizer.py:117: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_enhanced_log_sanitizer.TestPatternRepository" name="test_add_pattern" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_enhanced_log_sanitizer.py:169: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_enhanced_log_sanitizer.TestRedactionStrategies" name="test_full_redaction_strategy" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_enhanced_log_sanitizer.py:192: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_enhanced_log_sanitizer.TestRedactionStrategies" name="test_partial_redaction_strategy_ssn" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_enhanced_log_sanitizer.py:203: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_enhanced_log_sanitizer.TestRedactionStrategies" name="test_partial_redaction_strategy_email" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_enhanced_log_sanitizer.py:216: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_enhanced_log_sanitizer.TestRedactionStrategies" name="test_partial_redaction_strategy_phone" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_enhanced_log_sanitizer.py:225: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_enhanced_log_sanitizer.TestRedactionStrategies" name="test_partial_redaction_strategy_patient_id" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_enhanced_log_sanitizer.py:234: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_enhanced_log_sanitizer.TestRedactionStrategies" name="test_partial_redaction_strategy_default" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_enhanced_log_sanitizer.py:243: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_enhanced_log_sanitizer.TestRedactionStrategies" name="test_hash_redaction_strategy" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_enhanced_log_sanitizer.py:255: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_enhanced_log_sanitizer.TestRedactionStrategies" name="test_redaction_strategy_factory" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_enhanced_log_sanitizer.py:273: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_enhanced_log_sanitizer.TestSanitizerConfig" name="test_default_config" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_enhanced_log_sanitizer.py:300: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_enhanced_log_sanitizer.TestSanitizerConfig" name="test_custom_config" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_enhanced_log_sanitizer.py:313: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_enhanced_log_sanitizer.TestLogSanitizer" name="test_sanitize_simple_string" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_enhanced_log_sanitizer.py:340: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_enhanced_log_sanitizer.TestLogSanitizer" name="test_sanitize_with_partial_redaction" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_enhanced_log_sanitizer.py:363: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_enhanced_log_sanitizer.TestLogSanitizer" name="test_sanitize_complex_string" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_enhanced_log_sanitizer.py:376: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_enhanced_log_sanitizer.TestLogSanitizer" name="test_sanitize_dict" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_enhanced_log_sanitizer.py:403: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_enhanced_log_sanitizer.TestLogSanitizer" name="test_sanitize_list" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_enhanced_log_sanitizer.py:437: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_enhanced_log_sanitizer.TestLogSanitizer" name="test_sanitize_structured_log" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_enhanced_log_sanitizer.py:454: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_enhanced_log_sanitizer.TestLogSanitizer" name="test_is_sensitive_key" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_enhanced_log_sanitizer.py:484: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_enhanced_log_sanitizer.TestLogSanitizer" name="test_sanitization_hooks" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_enhanced_log_sanitizer.py:500: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_enhanced_log_sanitizer.TestLogSanitizer" name="test_disabled_sanitizer" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_enhanced_log_sanitizer.py:521: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_enhanced_log_sanitizer.TestLogSanitizer" name="test_max_log_size" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_enhanced_log_sanitizer.py:530: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_enhanced_log_sanitizer.TestLoggingIntegration" name="test_phi_formatter" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_enhanced_log_sanitizer.py:548: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_enhanced_log_sanitizer.TestLoggingIntegration" name="test_phi_redaction_handler" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_enhanced_log_sanitizer.py:568: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_enhanced_log_sanitizer.TestLoggingIntegration" name="test_sanitized_logger" time="0.001"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_enhanced_log_sanitizer.py:600: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_enhanced_log_sanitizer.TestLoggingIntegration" name="test_sanitize_logs_decorator" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_enhanced_log_sanitizer.py:624: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_mfa_service.TestMFAService" name="test_generate_secret_key" time="0.001" /><testcase classname="app.tests.standalone.test_mfa_service.TestMFAService" name="test_setup_totp" time="0.003" /><testcase classname="app.tests.standalone.test_mfa_service.TestMFAService" name="test_verify_totp_valid" time="0.002" /><testcase classname="app.tests.standalone.test_mfa_service.TestMFAService" name="test_verify_totp_invalid" time="0.002" /><testcase classname="app.tests.standalone.test_mfa_service.TestMFAService" name="test_generate_verification_code" time="0.001" /><testcase classname="app.tests.standalone.test_mfa_service.TestMFAService" name="test_setup_sms_mfa" time="0.002" /><testcase classname="app.tests.standalone.test_mfa_service.TestMFAService" name="test_setup_email_mfa" time="0.001" /><testcase classname="app.tests.standalone.test_mfa_service.TestMFAService" name="test_verify_code_valid" time="0.001" /><testcase classname="app.tests.standalone.test_mfa_service.TestMFAService" name="test_verify_code_expired" time="0.001" /><testcase classname="app.tests.standalone.test_mfa_service.TestMFAService" name="test_verify_code_invalid" time="0.001" /><testcase classname="app.tests.standalone.test_mfa_service.TestMFAService" name="test_get_backup_codes" time="0.002"><failure message="assert False&#10; +  where False = all(&lt;generator object TestMFAService.test_get_backup_codes.&lt;locals&gt;.&lt;genexpr&gt; at 0x7b2e37d335e0&gt;)">self = &lt;app.tests.standalone.test_mfa_service.TestMFAService object at 0x7b2e392983b0&gt;
mock_uuid = &lt;MagicMock name='uuid4' id='135438433638960'&gt;
mfa_service = &lt;app.infrastructure.security.mfa_service.MFAService object at 0x7b2e37b9dd00&gt;

    @patch('uuid.uuid4')
    @pytest.mark.standalone
    def test_get_backup_codes(self, mock_uuid, mfa_service):
        """Test generating backup codes."""
        # Mock the UUID
        mock_uuid.return_value.hex = "abcdef1234567890"
    
        # Generate backup codes
        codes = mfa_service.get_backup_codes(3)
    
        # Check the codes
        assert len(codes) == 3
        assert all(len(code) == 10 for code in codes)
&gt;       assert all(code == "ABCDEF1234" for code in codes)  # All the same due to our mock
E       assert False
E        +  where False = all(&lt;generator object TestMFAService.test_get_backup_codes.&lt;locals&gt;.&lt;genexpr&gt; at 0x7b2e37d335e0&gt;)

app/tests/standalone/test_mfa_service.py:215: AssertionError</failure></testcase><testcase classname="app.tests.standalone.test_mfa_service.TestMFAService" name="test_hash_backup_code" time="0.001" /><testcase classname="app.tests.standalone.test_mfa_service.TestMFAService" name="test_verify_backup_code_valid" time="0.001" /><testcase classname="app.tests.standalone.test_mfa_service.TestMFAService" name="test_verify_backup_code_invalid" time="0.001" /><testcase classname="app.tests.standalone.test_mfa_service.TestMFAStrategyFactory" name="test_create_totp_strategy" time="0.001" /><testcase classname="app.tests.standalone.test_mfa_service.TestMFAStrategyFactory" name="test_create_sms_strategy" time="0.001" /><testcase classname="app.tests.standalone.test_mfa_service.TestMFAStrategyFactory" name="test_create_email_strategy" time="0.001" /><testcase classname="app.tests.standalone.test_mfa_service.TestMFAStrategyFactory" name="test_create_invalid_strategy" time="0.001" /><testcase classname="app.tests.standalone.test_mfa_service.TestTOTPStrategy" name="test_setup" time="0.001" /><testcase classname="app.tests.standalone.test_mfa_service.TestTOTPStrategy" name="test_setup_missing_email" time="0.001" /><testcase classname="app.tests.standalone.test_mfa_service.TestTOTPStrategy" name="test_verify" time="0.001" /><testcase classname="app.tests.standalone.test_mfa_service.TestTOTPStrategy" name="test_verify_missing_parameters" time="0.001" /><testcase classname="app.tests.standalone.test_mfa_service.TestSMSStrategy" name="test_setup" time="0.001" /><testcase classname="app.tests.standalone.test_mfa_service.TestSMSStrategy" name="test_setup_missing_phone_number" time="0.001" /><testcase classname="app.tests.standalone.test_mfa_service.TestSMSStrategy" name="test_verify" time="0.001" /><testcase classname="app.tests.standalone.test_mfa_service.TestSMSStrategy" name="test_verify_missing_parameters" time="0.001" /><testcase classname="app.tests.standalone.test_mfa_service.TestEmailStrategy" name="test_setup" time="0.001" /><testcase classname="app.tests.standalone.test_mfa_service.TestEmailStrategy" name="test_setup_missing_email" time="0.001" /><testcase classname="app.tests.standalone.test_mfa_service.TestEmailStrategy" name="test_verify" time="0.002" /><testcase classname="app.tests.standalone.test_mfa_service.TestEmailStrategy" name="test_verify_missing_parameters" time="0.001" /><testcase classname="app.tests.standalone.test_ml_exceptions.TestMLExceptions" name="test_base_error" time="0.001" /><testcase classname="app.tests.standalone.test_ml_exceptions.TestMLExceptions" name="test_inference_error" time="0.001" /><testcase classname="app.tests.standalone.test_ml_exceptions.TestMLExceptions" name="test_validation_error" time="0.001" /><testcase classname="app.tests.standalone.test_pat_mock.TestMockPATInitialization" name="test_initialize_success" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_pat_mock.py:68: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_pat_mock.TestMockPATInitialization" name="test_initialize_with_empty_config" time="0.001" /><testcase classname="app.tests.standalone.test_pat_mock.TestMockPATInitialization" name="test_not_initialized_check" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_pat_mock.py:84: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_pat_mock.TestMockPATAnalyzeActigraphy" name="test_analyze_actigraphy_success" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_pat_mock.py:93: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_pat_mock.TestMockPATAnalyzeActigraphy" name="test_analyze_actigraphy_not_initialized" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_pat_mock.py:125: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_pat_mock.TestMockPATAnalyzeActigraphy" name="test_analyze_actigraphy_empty_readings" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_pat_mock.py:138: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_pat_mock.TestMockPATAnalyzeActigraphy" name="test_analyze_actigraphy_invalid_readings" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_pat_mock.py:151: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_pat_mock.TestMockPATAnalyzeActigraphy" name="test_analyze_actigraphy_negative_sampling_rate" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_pat_mock.py:169: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_pat_mock.TestMockPATAnalyzeActigraphy" name="test_analyze_actigraphy_empty_device_info" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_pat_mock.py:182: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_pat_mock.TestMockPATAnalyzeActigraphy" name="test_analyze_actigraphy_invalid_device_info" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_pat_mock.py:195: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_pat_mock.TestMockPATAnalyzeActigraphy" name="test_analyze_actigraphy_empty_analysis_types" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_pat_mock.py:213: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_pat_mock.TestMockPATAnalyzeActigraphy" name="test_analyze_actigraphy_invalid_analysis_types" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_pat_mock.py:226: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_pat_mock.TestMockPATGetActigraphyEmbeddings" name="test_get_actigraphy_embeddings_success" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_pat_mock.py:245: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_pat_mock.TestMockPATGetActigraphyEmbeddings" name="test_get_actigraphy_embeddings_not_initialized" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_pat_mock.py:269: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_pat_mock.TestMockPATGetActigraphyEmbeddings" name="test_get_actigraphy_embeddings_empty_readings" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_pat_mock.py:280: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_pat_mock.TestMockPATGetActigraphyEmbeddings" name="test_get_actigraphy_embeddings_negative_sampling_rate" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_pat_mock.py:291: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_pat_mock.TestMockPATGetAnalysisById" name="test_get_analysis_by_id_success" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_pat_mock.py:306: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_pat_mock.TestMockPATGetAnalysisById" name="test_get_analysis_by_id_not_initialized" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_pat_mock.py:329: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_pat_mock.TestMockPATGetAnalysisById" name="test_get_analysis_by_id_not_found" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_pat_mock.py:334: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_pat_mock.TestMockPATGetPatientAnalyses" name="test_get_patient_analyses_success" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_pat_mock.py:343: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_pat_mock.TestMockPATGetPatientAnalyses" name="test_get_patient_analyses_with_pagination" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_pat_mock.py:370: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_pat_mock.TestMockPATGetPatientAnalyses" name="test_get_patient_analyses_not_initialized" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_pat_mock.py:399: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_pat_mock.TestMockPATGetPatientAnalyses" name="test_get_patient_analyses_empty" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_pat_mock.py:405: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_pat_mock.TestMockPATGetModelInfo" name="test_get_model_info_success" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_pat_mock.py:417: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_pat_mock.TestMockPATGetModelInfo" name="test_get_model_info_not_initialized" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_pat_mock.py:432: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_pat_mock.TestMockPATIntegrateWithDigitalTwin" name="test_integrate_with_digital_twin_success" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_pat_mock.py:441: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_pat_mock.TestMockPATIntegrateWithDigitalTwin" name="test_integrate_with_digital_twin_not_initialized" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_pat_mock.py:481: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_pat_mock.TestMockPATIntegrateWithDigitalTwin" name="test_integrate_with_digital_twin_analysis_not_found" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_pat_mock.py:490: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_pat_mock.TestMockPATIntegrateWithDigitalTwin" name="test_integrate_with_digital_twin_wrong_patient" time="0.000"><skipped type="pytest.skip" message="Test is not marked as standalone">/workspaces/Novamind-Backend-ONLY-TWINS/backend/app/tests/standalone/test_pat_mock.py:499: Test is not marked as standalone</skipped></testcase><testcase classname="app.tests.standalone.test_patient.TestPatient" name="test_create_patient" time="0.001" /><testcase classname="app.tests.standalone.test_patient.TestPatient" name="test_create_patient_with_string_enums" time="0.001" /><testcase classname="app.tests.standalone.test_patient.TestPatient" name="test_create_patient_with_string_date" time="0.002" /><testcase classname="app.tests.standalone.test_patient.TestPatient" name="test_create_patient_with_auto_id" time="0.001" /><testcase classname="app.tests.standalone.test_patient.TestPatient" name="test_validate_required_fields" time="0.001" /><testcase classname="app.tests.standalone.test_patient.TestPatient" name="test_validate_email_format" time="0.001" /><testcase classname="app.tests.standalone.test_patient.TestPatient" name="test_validate_phone_format" time="0.001" /><testcase classname="app.tests.standalone.test_patient.TestPatient" name="test_update_personal_info" time="0.001" /><testcase classname="app.tests.standalone.test_patient.TestPatient" name="test_update_personal_info_with_string_date" time="0.001" /><testcase classname="app.tests.standalone.test_patient.TestPatient" name="test_update_personal_info_with_string_gender" time="0.001" /><testcase classname="app.tests.standalone.test_patient.TestPatient" name="test_update_insurance_info" time="0.001" /><testcase classname="app.tests.standalone.test_patient.TestPatient" name="test_update_insurance_info_with_string_status" time="0.001" /><testcase classname="app.tests.standalone.test_patient.TestPatient" name="test_add_emergency_contact" time="0.001" /><testcase classname="app.tests.standalone.test_patient.TestPatient" name="test_add_emergency_contact_validation" time="0.001" /><testcase classname="app.tests.standalone.test_patient.TestPatient" name="test_remove_emergency_contact" time="0.001" /><testcase classname="app.tests.standalone.test_patient.TestPatient" name="test_remove_emergency_contact_invalid_index" time="0.002" /><testcase classname="app.tests.standalone.test_patient.TestPatient" name="test_add_medical_history_item" time="0.001" /><testcase classname="app.tests.standalone.test_patient.TestPatient" name="test_add_medical_history_item_validation" time="0.001" /><testcase classname="app.tests.standalone.test_patient.TestPatient" name="test_add_medication" time="0.001" /><testcase classname="app.tests.standalone.test_patient.TestPatient" name="test_add_medication_validation" time="0.001" /><testcase classname="app.tests.standalone.test_patient.TestPatient" name="test_remove_medication" time="0.001" /><testcase classname="app.tests.standalone.test_patient.TestPatient" name="test_remove_medication_invalid_index" time="0.001" /><testcase classname="app.tests.standalone.test_patient.TestPatient" name="test_add_allergy" time="0.001" /><testcase classname="app.tests.standalone.test_patient.TestPatient" name="test_add_existing_allergy" time="0.002" /><testcase classname="app.tests.standalone.test_patient.TestPatient" name="test_remove_allergy" time="0.001" /><testcase classname="app.tests.standalone.test_patient.TestPatient" name="test_remove_nonexistent_allergy" time="0.002" /><testcase classname="app.tests.standalone.test_patient.TestPatient" name="test_update_status" time="0.001" /><testcase classname="app.tests.standalone.test_patient.TestPatient" name="test_update_status_with_string" time="0.001" /><testcase classname="app.tests.standalone.test_patient.TestPatient" name="test_update_notes" time="0.001" /><testcase classname="app.tests.standalone.test_patient.TestPatient" name="test_update_appointment_times" time="0.001" /><testcase classname="app.tests.standalone.test_patient.TestPatient" name="test_set_preferred_provider" time="0.001" /><testcase classname="app.tests.standalone.test_patient.TestPatient" name="test_to_dict" time="0.001" /><testcase classname="app.tests.standalone.test_patient.TestPatient" name="test_from_dict" time="0.001" /><testcase classname="app.tests.standalone.test_patient.TestPatient" name="test_equality" time="0.001" /><testcase classname="app.tests.standalone.test_patient.TestPatient" name="test_inequality" time="0.001" /><testcase classname="app.tests.standalone.test_patient.TestPatient" name="test_string_representation" time="0.001" /><testcase classname="app.tests.standalone.test_phi_sanitizer.TestPHISanitizer" name="test_sanitize_string_with_ssn" time="0.005" /><testcase classname="app.tests.standalone.test_phi_sanitizer.TestPHISanitizer" name="test_sanitize_string_with_multiple_phi" time="0.001" /><testcase classname="app.tests.standalone.test_phi_sanitizer.TestPHISanitizer" name="test_sanitize_json_with_phi" time="0.001" /><testcase classname="app.tests.standalone.test_phi_sanitizer.TestPHISanitizer" name="test_sanitize_dict_with_phi" time="0.001" /><testcase classname="app.tests.standalone.test_phi_sanitizer.TestPHISanitizer" name="test_sanitize_nested_dict_with_phi" time="0.001" /><testcase classname="app.tests.standalone.test_phi_sanitizer.TestPHISanitizer" name="test_sanitize_list_with_phi" time="0.001" /><testcase classname="app.tests.standalone.test_phi_sanitizer.TestPHISanitizer" name="test_sanitize_complex_structure" time="0.001" /><testcase classname="app.tests.standalone.test_phi_sanitizer.TestPHISanitizer" name="test_sanitize_phi_in_logs" time="0.001" /><testcase classname="app.tests.standalone.test_phi_sanitizer.TestPHISanitizer" name="test_phi_detection_integration" time="0.002" /><testcase classname="app.tests.standalone.test_phi_sanitizer.TestPHISanitizer" name="test_phi_sanitizer_performance" time="0.002" /><testcase classname="app.tests.standalone.test_phi_sanitizer.TestPHISanitizer" name="test_preservation_of_non_phi" time="0.001" /><testcase classname="app.tests.standalone.test_phi_sanitizer.TestPHISanitizer" name="test_sanitizer_edge_cases" time="0.001" /><testcase classname="app.tests.standalone.test_phi_sanitizer.TestPHISanitizer" name="test_redaction_format_consistency" time="0.001" /><testcase classname="app.tests.standalone.test_provider.TestProvider" name="test_create_provider" time="0.001" /><testcase classname="app.tests.standalone.test_provider.TestProvider" name="test_create_provider_with_string_enums" time="0.001" /><testcase classname="app.tests.standalone.test_provider.TestProvider" name="test_create_provider_with_auto_id" time="0.001" /><testcase classname="app.tests.standalone.test_provider.TestProvider" name="test_validate_required_fields" time="0.001" /><testcase classname="app.tests.standalone.test_provider.TestProvider" name="test_validate_psychiatrist_license" time="0.001" /><testcase classname="app.tests.standalone.test_provider.TestProvider" name="test_validate_email_format" time="0.001" /><testcase classname="app.tests.standalone.test_provider.TestProvider" name="test_validate_phone_format" time="0.001" /><testcase classname="app.tests.standalone.test_provider.TestProvider" name="test_update_personal_info" time="0.001" /><testcase classname="app.tests.standalone.test_provider.TestProvider" name="test_update_professional_info" time="0.001" /><testcase classname="app.tests.standalone.test_provider.TestProvider" name="test_update_professional_info_with_string_provider_type" time="0.001" /><testcase classname="app.tests.standalone.test_provider.TestProvider" name="test_update_status" time="0.001" /><testcase classname="app.tests.standalone.test_provider.TestProvider" name="test_update_status_with_string" time="0.001" /><testcase classname="app.tests.standalone.test_provider.TestProvider" name="test_add_specialty" time="0.001" /><testcase classname="app.tests.standalone.test_provider.TestProvider" name="test_add_existing_specialty" time="0.002" /><testcase classname="app.tests.standalone.test_provider.TestProvider" name="test_remove_specialty" time="0.001" /><testcase classname="app.tests.standalone.test_provider.TestProvider" name="test_remove_nonexistent_specialty" time="0.002" /><testcase classname="app.tests.standalone.test_provider.TestProvider" name="test_add_language" time="0.001" /><testcase classname="app.tests.standalone.test_provider.TestProvider" name="test_add_existing_language" time="0.002" /><testcase classname="app.tests.standalone.test_provider.TestProvider" name="test_remove_language" time="0.001" /><testcase classname="app.tests.standalone.test_provider.TestProvider" name="test_remove_nonexistent_language" time="0.002" /><testcase classname="app.tests.standalone.test_provider.TestProvider" name="test_add_education" time="0.001" /><testcase classname="app.tests.standalone.test_provider.TestProvider" name="test_add_education_validation" time="0.001" /><testcase classname="app.tests.standalone.test_provider.TestProvider" name="test_add_certification" time="0.001" /><testcase classname="app.tests.standalone.test_provider.TestProvider" name="test_add_certification_validation" time="0.001" /><testcase classname="app.tests.standalone.test_provider.TestProvider" name="test_set_availability" time="0.001" /><testcase classname="app.tests.standalone.test_provider.TestProvider" name="test_set_availability_validation" time="0.001" /><testcase classname="app.tests.standalone.test_provider.TestProvider" name="test_add_availability_slot" time="0.001" /><testcase classname="app.tests.standalone.test_provider.TestProvider" name="test_add_availability_slot_with_time_objects" time="0.001" /><testcase classname="app.tests.standalone.test_provider.TestProvider" name="test_add_availability_slot_validation" time="0.001" /><testcase classname="app.tests.standalone.test_provider.TestProvider" name="test_remove_availability_slot" time="0.001" /><testcase classname="app.tests.standalone.test_provider.TestProvider" name="test_remove_availability_slot_invalid_day" time="0.001" /><testcase classname="app.tests.standalone.test_provider.TestProvider" name="test_remove_availability_slot_invalid_index" time="0.001" /><testcase classname="app.tests.standalone.test_provider.TestProvider" name="test_is_available" time="0.001"><failure message="AssertionError: assert not True&#10; +  where True = &lt;bound method Provider.is_available of &lt;app.domain.entities.provider.Provider object at 0x7b2e37c85100&gt;&gt;(day='monday', start=datetime.time(12, 30), end=datetime.time(13, 30))&#10; +    where &lt;bound method Provider.is_available of &lt;app.domain.entities.provider.Provider object at 0x7b2e37c85100&gt;&gt; = &lt;app.domain.entities.provider.Provider object at 0x7b2e37c85100&gt;.is_available&#10; +    and   datetime.time(12, 30) = time(12, 30)&#10; +    and   datetime.time(13, 30) = time(13, 30)">self = &lt;app.tests.standalone.test_provider.TestProvider object at 0x7b2e3877ac30&gt;
valid_provider = &lt;app.domain.entities.provider.Provider object at 0x7b2e37c85100&gt;

    @pytest.mark.standalone
    def test_is_available(self, valid_provider):
        """Test checking if a provider is available."""
        # Available time
        assert valid_provider.is_available(
            day="monday",
            start=time(10, 0),
            end=time(11, 0)
        )
    
        # Unavailable time
&gt;       assert not valid_provider.is_available(
            day="monday",
            start=time(12, 30),
            end=time(13, 30)
        )
E       AssertionError: assert not True
E        +  where True = &lt;bound method Provider.is_available of &lt;app.domain.entities.provider.Provider object at 0x7b2e37c85100&gt;&gt;(day='monday', start=datetime.time(12, 30), end=datetime.time(13, 30))
E        +    where &lt;bound method Provider.is_available of &lt;app.domain.entities.provider.Provider object at 0x7b2e37c85100&gt;&gt; = &lt;app.domain.entities.provider.Provider object at 0x7b2e37c85100&gt;.is_available
E        +    and   datetime.time(12, 30) = time(12, 30)
E        +    and   datetime.time(13, 30) = time(13, 30)

app/tests/standalone/test_provider.py:551: AssertionError</failure></testcase><testcase classname="app.tests.standalone.test_provider.TestProvider" name="test_is_available_inactive_provider" time="0.001" /><testcase classname="app.tests.standalone.test_provider.TestProvider" name="test_update_patient_count" time="0.001" /><testcase classname="app.tests.standalone.test_provider.TestProvider" name="test_update_patient_count_validation" time="0.001" /><testcase classname="app.tests.standalone.test_provider.TestProvider" name="test_increment_patient_count" time="0.001" /><testcase classname="app.tests.standalone.test_provider.TestProvider" name="test_increment_patient_count_at_max" time="0.001" /><testcase classname="app.tests.standalone.test_provider.TestProvider" name="test_decrement_patient_count" time="0.001" /><testcase classname="app.tests.standalone.test_provider.TestProvider" name="test_decrement_patient_count_at_zero" time="0.001" /><testcase classname="app.tests.standalone.test_provider.TestProvider" name="test_to_dict" time="0.001" /><testcase classname="app.tests.standalone.test_provider.TestProvider" name="test_from_dict" time="0.001" /><testcase classname="app.tests.standalone.test_provider.TestProvider" name="test_equality" time="0.001" /><testcase classname="app.tests.standalone.test_provider.TestProvider" name="test_inequality" time="0.001" /><testcase classname="app.tests.standalone.test_provider.TestProvider" name="test_string_representation" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_biometric_processor.TestBiometricEventProcessor" name="test_add_rule" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_biometric_processor.TestBiometricEventProcessor" name="test_process_data_point_inactive_rule" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_biometric_processor.TestBiometricEventProcessor" name="test_process_data_point_matching_rule" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_biometric_processor.TestBiometricEventProcessor" name="test_process_data_point_no_matching_rules" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_biometric_processor.TestBiometricEventProcessor" name="test_process_data_point_no_patient_id" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_biometric_processor.TestBiometricEventProcessor" name="test_process_data_point_patient_specific_rule" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_biometric_processor.TestBiometricEventProcessor" name="test_process_data_point_updates_context" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_biometric_processor.TestBiometricEventProcessor" name="test_register_observer" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_biometric_processor.TestBiometricEventProcessor" name="test_remove_rule" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_biometric_processor.TestBiometricEventProcessor" name="test_unregister_observer" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_biometric_processor.TestAlertRule" name="test_evaluate_data_type_mismatch" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_biometric_processor.TestAlertRule" name="test_evaluate_equal" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_biometric_processor.TestAlertRule" name="test_evaluate_greater_than" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_biometric_processor.TestAlertRule" name="test_evaluate_greater_than_or_equal" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_biometric_processor.TestAlertRule" name="test_evaluate_less_than" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_biometric_processor.TestAlertRule" name="test_evaluate_less_than_or_equal" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_biometric_processor.TestAlertRule" name="test_evaluate_not_equal" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_biometric_processor.TestBiometricAlert" name="test_acknowledge" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_biometric_processor.TestAlertObservers" name="test_email_alert_observer" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_biometric_processor.TestAlertObservers" name="test_in_app_alert_observer" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_biometric_processor.TestAlertObservers" name="test_sms_alert_observer_non_urgent" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_biometric_processor.TestAlertObservers" name="test_sms_alert_observer_urgent" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_biometric_processor.TestClinicalRuleEngine" name="test_create_rule_from_template" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_biometric_processor.TestClinicalRuleEngine" name="test_create_rule_from_template_missing_parameter" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_biometric_processor.TestClinicalRuleEngine" name="test_create_rule_from_template_unknown_template" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_biometric_processor.TestClinicalRuleEngine" name="test_register_custom_condition" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_biometric_processor.TestClinicalRuleEngine" name="test_register_rule_template" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_digital_twin.TestDigitalTwin" name="test_add_model" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_digital_twin.TestDigitalTwin" name="test_creation" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_digital_twin.TestDigitalTwin" name="test_generate_biometric_alert_rules" time="0.001"><failure message="AssertionError: 'heart_rate' not found in {'blood_pressure': 3}">self = &lt;app.tests.standalone.test_standalone_digital_twin.TestDigitalTwin testMethod=test_generate_biometric_alert_rules&gt;

    @pytest.mark.standalone
    def test_generate_biometric_alert_rules(self):
        """Test generating biometric alert rules."""
        # Create and add a biometric model
        model = BiometricTwinModel(
            name="Heart Rate Model",
            patient_id=self.patient_id,
            biometric_types=[BiometricDataType.HEART_RATE, BiometricDataType.BLOOD_PRESSURE]
        )
        self.digital_twin.add_model(model)
    
        # Generate alert rules
        rules_info = self.digital_twin.generate_biometric_alert_rules()
    
        # Check the results
        self.assertEqual(rules_info["models_updated"], 1)
        self.assertGreater(rules_info["generated_rules_count"], 0)
&gt;       self.assertIn(BiometricDataType.HEART_RATE.value, rules_info["rules_by_type"])
E       AssertionError: 'heart_rate' not found in {'blood_pressure': 3}

app/tests/standalone/test_standalone_digital_twin.py:759: AssertionError</failure></testcase><testcase classname="app.tests.standalone.test_standalone_digital_twin.TestDigitalTwin" name="test_get_models_by_type" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_digital_twin.TestDigitalTwin" name="test_predict_symptoms" time="0.002" /><testcase classname="app.tests.standalone.test_standalone_digital_twin.TestDigitalTwin" name="test_process_biometric_data" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_digital_twin.TestDigitalTwin" name="test_remove_model" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_digital_twin.TestDigitalTwin" name="test_to_dict" time="0.002" /><testcase classname="app.tests.standalone.test_standalone_digital_twin.TestTimeSeriesModel" name="test_creation" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_digital_twin.TestTimeSeriesModel" name="test_predict" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_digital_twin.TestTimeSeriesModel" name="test_to_dict" time="0.002" /><testcase classname="app.tests.standalone.test_standalone_digital_twin.TestTimeSeriesModel" name="test_train" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_digital_twin.TestBiometricTwinModel" name="test_add_alert_rule" time="0.002" /><testcase classname="app.tests.standalone.test_standalone_digital_twin.TestBiometricTwinModel" name="test_creation" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_digital_twin.TestBiometricTwinModel" name="test_process_biometric_data" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_digital_twin.TestBiometricTwinModel" name="test_remove_alert_rule" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_digital_twin.TestBiometricTwinModel" name="test_set_baseline" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_digital_twin.TestBiometricTwinModel" name="test_to_dict" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_ml_exceptions.TestMLExceptions" name="test_base_error" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_ml_exceptions.TestMLExceptions" name="test_error_hierarchy" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_ml_exceptions.TestMLExceptions" name="test_inference_error" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_ml_exceptions.TestMLExceptions" name="test_model_not_found_error" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_ml_exceptions.TestMLExceptions" name="test_rate_limit_error" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_ml_exceptions.TestMLExceptions" name="test_service_unavailable_error" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_ml_exceptions.TestMLExceptions" name="test_validation_error" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_patient.TestPatient" name="test_add_emergency_contact" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_patient.TestPatient" name="test_add_emergency_contact_validation" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_patient.TestPatient" name="test_create_patient" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_patient.TestPatient" name="test_create_patient_with_auto_id" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_patient.TestPatient" name="test_create_patient_with_string_date" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_patient.TestPatient" name="test_create_patient_with_string_enums" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_patient.TestPatient" name="test_remove_emergency_contact" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_patient.TestPatient" name="test_remove_emergency_contact_invalid_index" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_patient.TestPatient" name="test_update_insurance_info" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_patient.TestPatient" name="test_update_insurance_info_with_string_status" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_patient.TestPatient" name="test_update_personal_info" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_patient.TestPatient" name="test_update_personal_info_with_string_date" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_patient.TestPatient" name="test_update_personal_info_with_string_gender" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_patient.TestPatient" name="test_validate_email_format" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_patient.TestPatient" name="test_validate_phone_format" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_patient.TestPatient" name="test_validate_required_fields" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_phi_sanitizer.TestPHISanitizer" name="test_phi_detection_integration" time="0.002" /><testcase classname="app.tests.standalone.test_standalone_phi_sanitizer.TestPHISanitizer" name="test_phi_sanitizer_performance" time="0.004" /><testcase classname="app.tests.standalone.test_standalone_phi_sanitizer.TestPHISanitizer" name="test_preservation_of_non_phi" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_phi_sanitizer.TestPHISanitizer" name="test_redaction_format_consistency" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_phi_sanitizer.TestPHISanitizer" name="test_sanitize_complex_structure" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_phi_sanitizer.TestPHISanitizer" name="test_sanitize_dict_with_phi" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_phi_sanitizer.TestPHISanitizer" name="test_sanitize_json_with_phi" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_phi_sanitizer.TestPHISanitizer" name="test_sanitize_list_with_phi" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_phi_sanitizer.TestPHISanitizer" name="test_sanitize_nested_dict_with_phi" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_phi_sanitizer.TestPHISanitizer" name="test_sanitize_phi_in_logs" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_phi_sanitizer.TestPHISanitizer" name="test_sanitize_string_with_multiple_phi" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_phi_sanitizer.TestPHISanitizer" name="test_sanitize_string_with_ssn" time="0.001" /><testcase classname="app.tests.standalone.test_standalone_phi_sanitizer.TestPHISanitizer" name="test_sanitizer_edge_cases" time="0.001" /><testcase classname="app.tests.standalone.test_utils" name="test_is_date_in_range" time="0.001" /><testcase classname="app.tests.standalone.test_utils" name="test_format_date_iso" time="0.001" /><testcase classname="app.tests.standalone.test_utils" name="test_sanitize_name" time="0.001"><failure message="AssertionError: assert 'Alice' == 'Alice script'&#10;  - Alice script&#10;  + Alice">@pytest.mark.standalone
    def test_sanitize_name():
        """Test name sanitization for security and consistency."""
        # Test basic sanitization
        assert sanitize_name("John O'Connor") == "John OConnor"
        assert sanitize_name(" Bob Smith ") == "Bob Smith"
    
        # Test special character removal
&gt;       assert sanitize_name("Alice &lt;script&gt;") == "Alice script"
E       AssertionError: assert 'Alice' == 'Alice script'
E         - Alice script
E         + Alice

app/tests/standalone/test_utils.py:75: AssertionError</failure></testcase><testcase classname="app.tests.standalone.test_utils" name="test_truncate_text" time="0.004"><failure message="AssertionError: assert 'This text is too ...' == 'This text is too lo...'&#10;  - This text is too lo...&#10;  ?                  --&#10;  + This text is too ...">@pytest.mark.standalone
    def test_truncate_text():
        """Test text truncation utility."""
        # Test no truncation needed
        assert truncate_text("Short text", 20) == "Short text"
    
        # Test exact length
        assert truncate_text("Exactly twenty chars", 20) == "Exactly twenty chars"
    
        # Test truncation
&gt;       assert truncate_text("This text is too long and should be truncated", 20) == "This text is too lo..."
E       AssertionError: assert 'This text is too ...' == 'This text is too lo...'
E         - This text is too lo...
E         ?                  --
E         + This text is too ...

app/tests/standalone/test_utils.py:93: AssertionError</failure></testcase></testsuite></testsuites>