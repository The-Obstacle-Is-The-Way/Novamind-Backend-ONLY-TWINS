{
  "timestamp": "2025-04-14T17:51:32.769474",
  "tests": {
    "Core Encryption": {
      "path": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/tests/security/test_ml_encryption.py",
      "results": {
        "total": 1,
        "passed": 0,
        "failed": 0,
        "errors": 1,
        "details": [
          {
            "name": "__________",
            "status": "error",
            "full_line": "__________ ERROR collecting app/tests/security/test_ml_encryption.py ___________"
          }
        ]
      },
      "output": "============================= test session starts ==============================\nplatform darwin -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0 -- /Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/venv_py313/bin/python\ncachedir: .pytest_cache\nrootdir: /Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend\nconfigfile: pytest.ini\nplugins: anyio-4.9.0, asyncio-0.26.0, mock-3.14.0\nasyncio: mode=Mode.AUTO, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function\ncollecting ... collected 0 items / 1 error\n\n==================================== ERRORS ====================================\n__________ ERROR collecting app/tests/security/test_ml_encryption.py ___________\n../../../../venv_py313/lib/python3.13/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../../../venv_py313/lib/python3.13/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/opt/homebrew/Cellar/python@3.13/3.13.2/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1387: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1360: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1331: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:935: in _load_unlocked\n    ???\n../../../../venv_py313/lib/python3.13/site-packages/_pytest/assertion/rewrite.py:176: in exec_module\n    source_stat, co = _rewrite_test(fn, self.config)\n../../../../venv_py313/lib/python3.13/site-packages/_pytest/assertion/rewrite.py:356: in _rewrite_test\n    tree = ast.parse(source, filename=strfn)\n/opt/homebrew/Cellar/python@3.13/3.13.2/Frameworks/Python.framework/Versions/3.13/lib/python3.13/ast.py:54: in parse\n    return compile(source, filename, mode, flags,\nE     File \"/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/tests/security/test_ml_encryption.py\", line 40\nE       direct_key=\"test_key_for_unit_tests_only_12345678\")@pytest.fixture\nE                                                         ^\nE   SyntaxError: unmatched ')'\n=========================== short test summary info ============================\nERROR test_ml_encryption.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.10s ===============================\n"
    },
    "PHI Field Handling": {
      "path": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/tests/security/test_address_helper.py",
      "results": {
        "total": 1,
        "passed": 0,
        "failed": 0,
        "errors": 1,
        "details": [
          {
            "name": "__________",
            "status": "error",
            "full_line": "__________ ERROR collecting app/tests/security/test_address_helper.py __________"
          }
        ]
      },
      "output": "============================= test session starts ==============================\nplatform darwin -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0 -- /Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/venv_py313/bin/python\ncachedir: .pytest_cache\nrootdir: /Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend\nconfigfile: pytest.ini\nplugins: anyio-4.9.0, asyncio-0.26.0, mock-3.14.0\nasyncio: mode=Mode.AUTO, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function\ncollecting ... collected 0 items / 1 error\n\n==================================== ERRORS ====================================\n__________ ERROR collecting app/tests/security/test_address_helper.py __________\n../../../../venv_py313/lib/python3.13/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../../../venv_py313/lib/python3.13/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/opt/homebrew/Cellar/python@3.13/3.13.2/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1387: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1360: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1331: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:935: in _load_unlocked\n    ???\n../../../../venv_py313/lib/python3.13/site-packages/_pytest/assertion/rewrite.py:176: in exec_module\n    source_stat, co = _rewrite_test(fn, self.config)\n../../../../venv_py313/lib/python3.13/site-packages/_pytest/assertion/rewrite.py:356: in _rewrite_test\n    tree = ast.parse(source, filename=strfn)\n/opt/homebrew/Cellar/python@3.13/3.13.2/Frameworks/Python.framework/Versions/3.13/lib/python3.13/ast.py:54: in parse\n    return compile(source, filename, mode, flags,\nE     File \"/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/tests/security/test_address_helper.py\", line 52\nE       test_address_field_encryption()\nE       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE   IndentationError: expected an indented block after 'if' statement on line 51\n=========================== short test summary info ============================\nERROR test_address_helper.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.10s ===============================\n"
    },
    "Enhanced Encryption": {
      "path": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/tests/security/../unit/infrastructure/security/test_encryption_enhanced.py",
      "results": {
        "total": 19,
        "passed": 4,
        "failed": 1,
        "errors": 14,
        "details": [
          {
            "name": "test_derive_key",
            "status": "passed",
            "full_line": "../unit/infrastructure/security/test_encryption_enhanced.py::TestEncryptionUtils::test_derive_key PASSED [  8%]"
          },
          {
            "name": "test_encrypt_decrypt_data",
            "status": "passed",
            "full_line": "../unit/infrastructure/security/test_encryption_enhanced.py::TestEncryptionUtils::test_encrypt_decrypt_data PASSED [ 16%]"
          },
          {
            "name": "test_hash_data",
            "status": "passed",
            "full_line": "../unit/infrastructure/security/test_encryption_enhanced.py::TestEncryptionUtils::test_hash_data PASSED [ 25%]"
          },
          {
            "name": "test_secure_compare",
            "status": "passed",
            "full_line": "../unit/infrastructure/security/test_encryption_enhanced.py::TestEncryptionUtils::test_secure_compare PASSED [ 33%]"
          },
          {
            "name": "test_initialization",
            "status": "error",
            "full_line": "../unit/infrastructure/security/test_encryption_enhanced.py::TestEncryptionService::test_initialization ERROR [ 41%]"
          },
          {
            "name": "test_encrypt_decrypt",
            "status": "error",
            "full_line": "../unit/infrastructure/security/test_encryption_enhanced.py::TestEncryptionService::test_encrypt_decrypt ERROR [ 50%]"
          },
          {
            "name": "test_encrypt_decrypt_dict",
            "status": "error",
            "full_line": "../unit/infrastructure/security/test_encryption_enhanced.py::TestEncryptionService::test_encrypt_decrypt_dict ERROR [ 58%]"
          },
          {
            "name": "test_key_rotation",
            "status": "failed",
            "full_line": "../unit/infrastructure/security/test_encryption_enhanced.py::TestEncryptionService::test_key_rotation FAILED [ 66%]"
          },
          {
            "name": "test_file_encryption",
            "status": "error",
            "full_line": "../unit/infrastructure/security/test_encryption_enhanced.py::TestEncryptionService::test_file_encryption ERROR [ 75%]"
          },
          {
            "name": "test_encrypt_file_nonexistent",
            "status": "error",
            "full_line": "../unit/infrastructure/security/test_encryption_enhanced.py::TestEncryptionService::test_encrypt_file_nonexistent ERROR [ 83%]"
          },
          {
            "name": "test_decrypt_file_nonexistent",
            "status": "error",
            "full_line": "../unit/infrastructure/security/test_encryption_enhanced.py::TestEncryptionService::test_decrypt_file_nonexistent ERROR [ 91%]"
          },
          {
            "name": "test_decrypt_invalid_file_content",
            "status": "error",
            "full_line": "../unit/infrastructure/security/test_encryption_enhanced.py::TestEncryptionService::test_decrypt_invalid_file_content ERROR [100%]"
          },
          {
            "name": "_________",
            "status": "error",
            "full_line": "_________ ERROR at setup of TestEncryptionService.test_initialization __________"
          },
          {
            "name": "_________",
            "status": "error",
            "full_line": "_________ ERROR at setup of TestEncryptionService.test_encrypt_decrypt _________"
          },
          {
            "name": "______",
            "status": "error",
            "full_line": "______ ERROR at setup of TestEncryptionService.test_encrypt_decrypt_dict _______"
          },
          {
            "name": "_________",
            "status": "error",
            "full_line": "_________ ERROR at setup of TestEncryptionService.test_file_encryption _________"
          },
          {
            "name": "____",
            "status": "error",
            "full_line": "____ ERROR at setup of TestEncryptionService.test_encrypt_file_nonexistent _____"
          },
          {
            "name": "____",
            "status": "error",
            "full_line": "____ ERROR at setup of TestEncryptionService.test_decrypt_file_nonexistent _____"
          },
          {
            "name": "__",
            "status": "error",
            "full_line": "__ ERROR at setup of TestEncryptionService.test_decrypt_invalid_file_content ___"
          }
        ]
      },
      "output": "============================= test session starts ==============================\nplatform darwin -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0 -- /Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/venv_py313/bin/python\ncachedir: .pytest_cache\nrootdir: /Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend\nconfigfile: pytest.ini\nplugins: anyio-4.9.0, asyncio-0.26.0, mock-3.14.0\nasyncio: mode=Mode.AUTO, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function\ncollecting ... collected 12 items\n\n../unit/infrastructure/security/test_encryption_enhanced.py::TestEncryptionUtils::test_derive_key PASSED [  8%]\n../unit/infrastructure/security/test_encryption_enhanced.py::TestEncryptionUtils::test_encrypt_decrypt_data PASSED [ 16%]\n../unit/infrastructure/security/test_encryption_enhanced.py::TestEncryptionUtils::test_hash_data PASSED [ 25%]\n../unit/infrastructure/security/test_encryption_enhanced.py::TestEncryptionUtils::test_secure_compare PASSED [ 33%]\n../unit/infrastructure/security/test_encryption_enhanced.py::TestEncryptionService::test_initialization ERROR [ 41%]\n../unit/infrastructure/security/test_encryption_enhanced.py::TestEncryptionService::test_encrypt_decrypt ERROR [ 50%]\n../unit/infrastructure/security/test_encryption_enhanced.py::TestEncryptionService::test_encrypt_decrypt_dict ERROR [ 58%]\n../unit/infrastructure/security/test_encryption_enhanced.py::TestEncryptionService::test_key_rotation FAILED [ 66%]\n../unit/infrastructure/security/test_encryption_enhanced.py::TestEncryptionService::test_file_encryption ERROR [ 75%]\n../unit/infrastructure/security/test_encryption_enhanced.py::TestEncryptionService::test_encrypt_file_nonexistent ERROR [ 83%]\n../unit/infrastructure/security/test_encryption_enhanced.py::TestEncryptionService::test_decrypt_file_nonexistent ERROR [ 91%]\n../unit/infrastructure/security/test_encryption_enhanced.py::TestEncryptionService::test_decrypt_invalid_file_content ERROR [100%]\n\n==================================== ERRORS ====================================\n_________ ERROR at setup of TestEncryptionService.test_initialization __________\n\n    @pytest.fixture\n    def encryption_service():\n        \"\"\"Create an EncryptionService instance for testing.\"\"\"\n        # Mock environment variables using a valid Fernet key format\n        test_key = Fernet.generate_key().decode() # Generate a valid key for the test\n        test_salt = os.urandom(16).hex() # Generate a valid salt\n        env_vars = {\n            \"ENCRYPTION_KEY\": test_key,\n            \"ENCRYPTION_SALT\": test_salt,\n            \"PYTEST_CURRENT_TEST\": \"True\", # Keep if needed by service logic\n        }\n    \n        # Patch os.environ for the duration of the fixture setup\n        with patch.dict(os.environ, env_vars):\n            # Patch get_settings if EncryptionService uses it internally\n>           with patch(\"app.infrastructure.security.encryption.get_settings\", return_value=MagicMock(ENCRYPTION_KEY=test_key, ENCRYPTION_SALT=test_salt)):\n\n../unit/infrastructure/security/test_encryption_enhanced.py:129: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/homebrew/Cellar/python@3.13/3.13.2/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1495: in __enter__\n    original, local = self.get_original()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <unittest.mock._patch object at 0x104eb6a50>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n>           raise AttributeError(\n                \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'app.infrastructure.security.encryption' from '/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/infrastructure/security/encryption.py'> does not have the attribute 'get_settings'\n\n/opt/homebrew/Cellar/python@3.13/3.13.2/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1465: AttributeError\n_________ ERROR at setup of TestEncryptionService.test_encrypt_decrypt _________\n\n    @pytest.fixture\n    def encryption_service():\n        \"\"\"Create an EncryptionService instance for testing.\"\"\"\n        # Mock environment variables using a valid Fernet key format\n        test_key = Fernet.generate_key().decode() # Generate a valid key for the test\n        test_salt = os.urandom(16).hex() # Generate a valid salt\n        env_vars = {\n            \"ENCRYPTION_KEY\": test_key,\n            \"ENCRYPTION_SALT\": test_salt,\n            \"PYTEST_CURRENT_TEST\": \"True\", # Keep if needed by service logic\n        }\n    \n        # Patch os.environ for the duration of the fixture setup\n        with patch.dict(os.environ, env_vars):\n            # Patch get_settings if EncryptionService uses it internally\n>           with patch(\"app.infrastructure.security.encryption.get_settings\", return_value=MagicMock(ENCRYPTION_KEY=test_key, ENCRYPTION_SALT=test_salt)):\n\n../unit/infrastructure/security/test_encryption_enhanced.py:129: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/homebrew/Cellar/python@3.13/3.13.2/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1495: in __enter__\n    original, local = self.get_original()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <unittest.mock._patch object at 0x104eb4590>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n>           raise AttributeError(\n                \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'app.infrastructure.security.encryption' from '/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/infrastructure/security/encryption.py'> does not have the attribute 'get_settings'\n\n/opt/homebrew/Cellar/python@3.13/3.13.2/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1465: AttributeError\n______ ERROR at setup of TestEncryptionService.test_encrypt_decrypt_dict _______\n\n    @pytest.fixture\n    def encryption_service():\n        \"\"\"Create an EncryptionService instance for testing.\"\"\"\n        # Mock environment variables using a valid Fernet key format\n        test_key = Fernet.generate_key().decode() # Generate a valid key for the test\n        test_salt = os.urandom(16).hex() # Generate a valid salt\n        env_vars = {\n            \"ENCRYPTION_KEY\": test_key,\n            \"ENCRYPTION_SALT\": test_salt,\n            \"PYTEST_CURRENT_TEST\": \"True\", # Keep if needed by service logic\n        }\n    \n        # Patch os.environ for the duration of the fixture setup\n        with patch.dict(os.environ, env_vars):\n            # Patch get_settings if EncryptionService uses it internally\n>           with patch(\"app.infrastructure.security.encryption.get_settings\", return_value=MagicMock(ENCRYPTION_KEY=test_key, ENCRYPTION_SALT=test_salt)):\n\n../unit/infrastructure/security/test_encryption_enhanced.py:129: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/homebrew/Cellar/python@3.13/3.13.2/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1495: in __enter__\n    original, local = self.get_original()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <unittest.mock._patch object at 0x104eb5ef0>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n>           raise AttributeError(\n                \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'app.infrastructure.security.encryption' from '/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/infrastructure/security/encryption.py'> does not have the attribute 'get_settings'\n\n/opt/homebrew/Cellar/python@3.13/3.13.2/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1465: AttributeError\n_________ ERROR at setup of TestEncryptionService.test_file_encryption _________\n\n    @pytest.fixture\n    def encryption_service():\n        \"\"\"Create an EncryptionService instance for testing.\"\"\"\n        # Mock environment variables using a valid Fernet key format\n        test_key = Fernet.generate_key().decode() # Generate a valid key for the test\n        test_salt = os.urandom(16).hex() # Generate a valid salt\n        env_vars = {\n            \"ENCRYPTION_KEY\": test_key,\n            \"ENCRYPTION_SALT\": test_salt,\n            \"PYTEST_CURRENT_TEST\": \"True\", # Keep if needed by service logic\n        }\n    \n        # Patch os.environ for the duration of the fixture setup\n        with patch.dict(os.environ, env_vars):\n            # Patch get_settings if EncryptionService uses it internally\n>           with patch(\"app.infrastructure.security.encryption.get_settings\", return_value=MagicMock(ENCRYPTION_KEY=test_key, ENCRYPTION_SALT=test_salt)):\n\n../unit/infrastructure/security/test_encryption_enhanced.py:129: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/homebrew/Cellar/python@3.13/3.13.2/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1495: in __enter__\n    original, local = self.get_original()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <unittest.mock._patch object at 0x104fdd710>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n>           raise AttributeError(\n                \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'app.infrastructure.security.encryption' from '/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/infrastructure/security/encryption.py'> does not have the attribute 'get_settings'\n\n/opt/homebrew/Cellar/python@3.13/3.13.2/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1465: AttributeError\n____ ERROR at setup of TestEncryptionService.test_encrypt_file_nonexistent _____\n\n    @pytest.fixture\n    def encryption_service():\n        \"\"\"Create an EncryptionService instance for testing.\"\"\"\n        # Mock environment variables using a valid Fernet key format\n        test_key = Fernet.generate_key().decode() # Generate a valid key for the test\n        test_salt = os.urandom(16).hex() # Generate a valid salt\n        env_vars = {\n            \"ENCRYPTION_KEY\": test_key,\n            \"ENCRYPTION_SALT\": test_salt,\n            \"PYTEST_CURRENT_TEST\": \"True\", # Keep if needed by service logic\n        }\n    \n        # Patch os.environ for the duration of the fixture setup\n        with patch.dict(os.environ, env_vars):\n            # Patch get_settings if EncryptionService uses it internally\n>           with patch(\"app.infrastructure.security.encryption.get_settings\", return_value=MagicMock(ENCRYPTION_KEY=test_key, ENCRYPTION_SALT=test_salt)):\n\n../unit/infrastructure/security/test_encryption_enhanced.py:129: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/homebrew/Cellar/python@3.13/3.13.2/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1495: in __enter__\n    original, local = self.get_original()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <unittest.mock._patch object at 0x104fde270>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n>           raise AttributeError(\n                \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'app.infrastructure.security.encryption' from '/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/infrastructure/security/encryption.py'> does not have the attribute 'get_settings'\n\n/opt/homebrew/Cellar/python@3.13/3.13.2/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1465: AttributeError\n____ ERROR at setup of TestEncryptionService.test_decrypt_file_nonexistent _____\n\n    @pytest.fixture\n    def encryption_service():\n        \"\"\"Create an EncryptionService instance for testing.\"\"\"\n        # Mock environment variables using a valid Fernet key format\n        test_key = Fernet.generate_key().decode() # Generate a valid key for the test\n        test_salt = os.urandom(16).hex() # Generate a valid salt\n        env_vars = {\n            \"ENCRYPTION_KEY\": test_key,\n            \"ENCRYPTION_SALT\": test_salt,\n            \"PYTEST_CURRENT_TEST\": \"True\", # Keep if needed by service logic\n        }\n    \n        # Patch os.environ for the duration of the fixture setup\n        with patch.dict(os.environ, env_vars):\n            # Patch get_settings if EncryptionService uses it internally\n>           with patch(\"app.infrastructure.security.encryption.get_settings\", return_value=MagicMock(ENCRYPTION_KEY=test_key, ENCRYPTION_SALT=test_salt)):\n\n../unit/infrastructure/security/test_encryption_enhanced.py:129: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/homebrew/Cellar/python@3.13/3.13.2/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1495: in __enter__\n    original, local = self.get_original()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <unittest.mock._patch object at 0x104eb50f0>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n>           raise AttributeError(\n                \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'app.infrastructure.security.encryption' from '/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/infrastructure/security/encryption.py'> does not have the attribute 'get_settings'\n\n/opt/homebrew/Cellar/python@3.13/3.13.2/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1465: AttributeError\n__ ERROR at setup of TestEncryptionService.test_decrypt_invalid_file_content ___\n\n    @pytest.fixture\n    def encryption_service():\n        \"\"\"Create an EncryptionService instance for testing.\"\"\"\n        # Mock environment variables using a valid Fernet key format\n        test_key = Fernet.generate_key().decode() # Generate a valid key for the test\n        test_salt = os.urandom(16).hex() # Generate a valid salt\n        env_vars = {\n            \"ENCRYPTION_KEY\": test_key,\n            \"ENCRYPTION_SALT\": test_salt,\n            \"PYTEST_CURRENT_TEST\": \"True\", # Keep if needed by service logic\n        }\n    \n        # Patch os.environ for the duration of the fixture setup\n        with patch.dict(os.environ, env_vars):\n            # Patch get_settings if EncryptionService uses it internally\n>           with patch(\"app.infrastructure.security.encryption.get_settings\", return_value=MagicMock(ENCRYPTION_KEY=test_key, ENCRYPTION_SALT=test_salt)):\n\n../unit/infrastructure/security/test_encryption_enhanced.py:129: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/homebrew/Cellar/python@3.13/3.13.2/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1495: in __enter__\n    original, local = self.get_original()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <unittest.mock._patch object at 0x104eb4750>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n>           raise AttributeError(\n                \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'app.infrastructure.security.encryption' from '/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/infrastructure/security/encryption.py'> does not have the attribute 'get_settings'\n\n/opt/homebrew/Cellar/python@3.13/3.13.2/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1465: AttributeError\n=================================== FAILURES ===================================\n___________________ TestEncryptionService.test_key_rotation ____________________\n\nself = <test_encryption_enhanced.TestEncryptionService object at 0x104f455b0>\n\n    def test_key_rotation(self):\n        \"\"\"Test encryption key rotation.\"\"\"\n        # Initialize with original key\n        original_key = Fernet.generate_key()\n        original_salt = os.urandom(16)\n        env_vars_orig = {\n            \"ENCRYPTION_KEY\": original_key.decode(),\n            \"ENCRYPTION_SALT\": original_salt.hex(),\n            \"PYTEST_CURRENT_TEST\": \"True\",\n        }\n    \n        with patch.dict(os.environ, env_vars_orig):\n>            with patch(\"app.infrastructure.security.encryption.get_settings\", return_value=MagicMock(ENCRYPTION_KEY=original_key.decode(), ENCRYPTION_SALT=original_salt.hex())):\n\n../unit/infrastructure/security/test_encryption_enhanced.py:230: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/homebrew/Cellar/python@3.13/3.13.2/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1495: in __enter__\n    original, local = self.get_original()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <unittest.mock._patch object at 0x104eb5550>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n>           raise AttributeError(\n                \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'app.infrastructure.security.encryption' from '/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/infrastructure/security/encryption.py'> does not have the attribute 'get_settings'\n\n/opt/homebrew/Cellar/python@3.13/3.13.2/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1465: AttributeError\n=========================== short test summary info ============================\nFAILED ../unit/infrastructure/security/test_encryption_enhanced.py::TestEncryptionService::test_key_rotation\nERROR ../unit/infrastructure/security/test_encryption_enhanced.py::TestEncryptionService::test_initialization\nERROR ../unit/infrastructure/security/test_encryption_enhanced.py::TestEncryptionService::test_encrypt_decrypt\nERROR ../unit/infrastructure/security/test_encryption_enhanced.py::TestEncryptionService::test_encrypt_decrypt_dict\nERROR ../unit/infrastructure/security/test_encryption_enhanced.py::TestEncryptionService::test_file_encryption\nERROR ../unit/infrastructure/security/test_encryption_enhanced.py::TestEncryptionService::test_encrypt_file_nonexistent\nERROR ../unit/infrastructure/security/test_encryption_enhanced.py::TestEncryptionService::test_decrypt_file_nonexistent\nERROR ../unit/infrastructure/security/test_encryption_enhanced.py::TestEncryptionService::test_decrypt_invalid_file_content\n==================== 1 failed, 4 passed, 7 errors in 0.50s =====================\n"
    }
  },
  "summary": {
    "total": 21,
    "passed": 4,
    "failed": 1,
    "errors": 16
  },
  "start_time": "2025-04-14T17:51:32.769481",
  "end_time": "2025-04-14T17:51:33.987571",
  "duration_seconds": 1.21809,
  "success_rate": 19.047619047619047
}