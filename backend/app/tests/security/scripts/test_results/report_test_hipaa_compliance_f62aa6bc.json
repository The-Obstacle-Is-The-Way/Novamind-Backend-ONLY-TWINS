{"created": 1744671633.722124, "duration": 0.3092811107635498, "exitcode": 1, "root": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend", "environment": {}, "summary": {"failed": 7, "passed": 8, "error": 3, "total": 18, "collected": 18}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "app/tests/security/hipaa/test_hipaa_compliance.py", "type": "Module"}]}, {"nodeid": "app/tests/security/hipaa/test_hipaa_compliance.py::TestPHIEncryption", "outcome": "passed", "result": [{"nodeid": "app/tests/security/hipaa/test_hipaa_compliance.py::TestPHIEncryption::test_encrypt_decrypt_phi", "type": "Function", "lineno": 179}, {"nodeid": "app/tests/security/hipaa/test_hipaa_compliance.py::TestPHIEncryption::test_encrypt_field_sensitive_data", "type": "Function", "lineno": 194}, {"nodeid": "app/tests/security/hipaa/test_hipaa_compliance.py::TestPHIEncryption::test_encryption_key_requirements", "type": "Function", "lineno": 209}]}, {"nodeid": "app/tests/security/hipaa/test_hipaa_compliance.py::TestAuthentication", "outcome": "passed", "result": [{"nodeid": "app/tests/security/hipaa/test_hipaa_compliance.py::TestAuthentication::test_create_access_token", "type": "Function", "lineno": 222}, {"nodeid": "app/tests/security/hipaa/test_hipaa_compliance.py::TestAuthentication::test_decode_access_token", "type": "Function", "lineno": 230}, {"nodeid": "app/tests/security/hipaa/test_hipaa_compliance.py::TestAuthentication::test_expired_token_rejection", "type": "Function", "lineno": 238}, {"nodeid": "app/tests/security/hipaa/test_hipaa_compliance.py::TestAuthentication::test_invalid_token_rejection", "type": "Function", "lineno": 251}]}, {"nodeid": "app/tests/security/hipaa/test_hipaa_compliance.py::TestAuthorization", "outcome": "passed", "result": [{"nodeid": "app/tests/security/hipaa/test_hipaa_compliance.py::TestAuthorization::test_rbac_permission_check", "type": "Function", "lineno": 264}, {"nodeid": "app/tests/security/hipaa/test_hipaa_compliance.py::TestAuthorization::test_rbac_permission_denied", "type": "Function", "lineno": 277}, {"nodeid": "app/tests/security/hipaa/test_hipaa_compliance.py::TestAuthorization::test_cross_patient_data_access_prevented", "type": "Function", "lineno": 292}]}, {"nodeid": "app/tests/security/hipaa/test_hipaa_compliance.py::TestAuditLogging", "outcome": "passed", "result": [{"nodeid": "app/tests/security/hipaa/test_hipaa_compliance.py::TestAuditLogging::test_phi_access_logging", "type": "Function", "lineno": 308}, {"nodeid": "app/tests/security/hipaa/test_hipaa_compliance.py::TestAuditLogging::test_phi_sanitization", "type": "Function", "lineno": 324}]}, {"nodeid": "app/tests/security/hipaa/test_hipaa_compliance.py::TestSecurityBoundaries", "outcome": "passed", "result": [{"nodeid": "app/tests/security/hipaa/test_hipaa_compliance.py::TestSecurityBoundaries::test_unauthorized_request_rejection", "type": "Function", "lineno": 337}, {"nodeid": "app/tests/security/hipaa/test_hipaa_compliance.py::TestSecurityBoundaries::test_phi_access_error_handling", "type": "Function", "lineno": 345}]}, {"nodeid": "app/tests/security/hipaa/test_hipaa_compliance.py::TestHIPAACompliance", "outcome": "passed", "result": [{"nodeid": "app/tests/security/hipaa/test_hipaa_compliance.py::TestHIPAACompliance::test_field_level_encryption", "type": "Function", "lineno": 363}, {"nodeid": "app/tests/security/hipaa/test_hipaa_compliance.py::TestHIPAACompliance::test_minimum_necessary_principle", "type": "Function", "lineno": 375}, {"nodeid": "app/tests/security/hipaa/test_hipaa_compliance.py::TestHIPAACompliance::test_secure_configuration", "type": "Function", "lineno": 386}, {"nodeid": "app/tests/security/hipaa/test_hipaa_compliance.py::TestHIPAACompliance::test_password_policy", "type": "Function", "lineno": 401}]}, {"nodeid": "app/tests/security/hipaa/test_hipaa_compliance.py", "outcome": "passed", "result": [{"nodeid": "app/tests/security/hipaa/test_hipaa_compliance.py::TestPHIEncryption", "type": "Class"}, {"nodeid": "app/tests/security/hipaa/test_hipaa_compliance.py::TestAuthentication", "type": "Class"}, {"nodeid": "app/tests/security/hipaa/test_hipaa_compliance.py::TestAuthorization", "type": "Class"}, {"nodeid": "app/tests/security/hipaa/test_hipaa_compliance.py::TestAuditLogging", "type": "Class"}, {"nodeid": "app/tests/security/hipaa/test_hipaa_compliance.py::TestSecurityBoundaries", "type": "Class"}, {"nodeid": "app/tests/security/hipaa/test_hipaa_compliance.py::TestHIPAACompliance", "type": "Class"}]}], "tests": [{"nodeid": "app/tests/security/hipaa/test_hipaa_compliance.py::TestPHIEncryption::test_encrypt_decrypt_phi", "lineno": 179, "outcome": "failed", "keywords": ["test_encrypt_decrypt_phi", "TestPHIEncryption", "test_hipaa_compliance.py", "hipaa", "security", "tests", "app", "backend", ""], "setup": {"duration": 0.0013563329703174531, "outcome": "passed", "stdout": "Loaded test environment variables from: /Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/.env.test\n"}, "call": {"duration": 0.00021700002253055573, "outcome": "failed", "crash": {"path": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/tests/security/hipaa/test_hipaa_compliance.py", "lineno": 193, "message": "AssertionError: assert 'decrypted_data' == {'diagnosis': 'Test Diagnosis', 'dob': '1990-01-01', 'first_name': 'Test', 'last_name': 'Patient', ...}"}, "traceback": [{"path": "hipaa/test_hipaa_compliance.py", "lineno": 193, "message": "AssertionError"}], "longrepr": "self = <test_hipaa_compliance.TestPHIEncryption object at 0x1065c3750>\ntest_phi_data = {'diagnosis': 'Test Diagnosis', 'dob': '1990-01-01', 'first_name': 'Test', 'last_name': 'Patient', ...}\n\n    def test_encrypt_decrypt_phi(self, test_phi_data):\n        \"\"\"Test that PHI can be encrypted and decrypted correctly.\"\"\"\n        # Encrypt the data\n        encrypted_data = encrypt_phi(test_phi_data)\n    \n        # Verify the encrypted data is not the same as the original\n        assert encrypted_data != test_phi_data\n        assert isinstance(encrypted_data, str)\n    \n        # Decrypt the data\n        decrypted_data = decrypt_phi(encrypted_data)\n    \n        # Verify the decrypted data matches the original\n>       assert decrypted_data == test_phi_data\nE       AssertionError: assert 'decrypted_data' == {'diagnosis': 'Test Diagnosis', 'dob': '1990-01-01', 'first_name': 'Test', 'last_name': 'Patient', ...}\n\nhipaa/test_hipaa_compliance.py:193: AssertionError"}, "teardown": {"duration": 0.00014687504153698683, "outcome": "passed"}}, {"nodeid": "app/tests/security/hipaa/test_hipaa_compliance.py::TestPHIEncryption::test_encrypt_field_sensitive_data", "lineno": 194, "outcome": "failed", "keywords": ["test_encrypt_field_sensitive_data", "TestPHIEncryption", "test_hipaa_compliance.py", "hipaa", "security", "tests", "app", "backend", ""], "setup": {"duration": 9.175000013783574e-05, "outcome": "passed"}, "call": {"duration": 0.00022124999668449163, "outcome": "failed", "crash": {"path": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/tests/security/hipaa/test_hipaa_compliance.py", "lineno": 208, "message": "AssertionError: assert 'decrypted_field' == '123-45-6789'\n  \n  - 123-45-6789\n  + decrypted_field"}, "traceback": [{"path": "hipaa/test_hipaa_compliance.py", "lineno": 208, "message": "AssertionError"}], "longrepr": "self = <test_hipaa_compliance.TestPHIEncryption object at 0x1065c3b10>\n\n    def test_encrypt_field_sensitive_data(self):\n        \"\"\"Test that specific fields can be encrypted individually.\"\"\"\n        ssn = \"123-45-6789\"\n        encrypted_ssn = encrypt_field(ssn)\n    \n        # Verify the encrypted field is not the same as the original\n        assert encrypted_ssn != ssn\n        assert isinstance(encrypted_ssn, str)\n    \n        # Decrypt the field\n        decrypted_ssn = decrypt_field(encrypted_ssn)\n    \n        # Verify the decrypted field matches the original\n>       assert decrypted_ssn == ssn\nE       AssertionError: assert 'decrypted_field' == '123-45-6789'\nE         \nE         - 123-45-6789\nE         + decrypted_field\n\nhipaa/test_hipaa_compliance.py:208: AssertionError"}, "teardown": {"duration": 6.88750296831131e-05, "outcome": "passed"}}, {"nodeid": "app/tests/security/hipaa/test_hipaa_compliance.py::TestPHIEncryption::test_encryption_key_requirements", "lineno": 209, "outcome": "failed", "keywords": ["test_encryption_key_requirements", "TestPHIEncryption", "test_hipaa_compliance.py", "hipaa", "security", "tests", "app", "backend", ""], "setup": {"duration": 7.291696965694427e-05, "outcome": "passed"}, "call": {"duration": 0.00016804196638986468, "outcome": "failed", "crash": {"path": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/tests/security/hipaa/test_hipaa_compliance.py", "lineno": 217, "message": "AssertionError: Encryption key must be at least 32 characters\nassert 13 >= 32\n +  where 13 = len('generated_key')"}, "traceback": [{"path": "hipaa/test_hipaa_compliance.py", "lineno": 217, "message": "AssertionError"}], "longrepr": "self = <test_hipaa_compliance.TestPHIEncryption object at 0x1064ffe10>\n\n    def test_encryption_key_requirements(self):\n        \"\"\"Test that encryption key meets strength requirements.\"\"\"\n        # Generate a new key\n        key = generate_phi_key()\n    \n        # Verify the key meets strength requirements\n        assert isinstance(key, str)\n>       assert len(key) >= 32, \"Encryption key must be at least 32 characters\"\nE       AssertionError: Encryption key must be at least 32 characters\nE       assert 13 >= 32\nE        +  where 13 = len('generated_key')\n\nhipaa/test_hipaa_compliance.py:217: AssertionError"}, "teardown": {"duration": 9.670801227912307e-05, "outcome": "passed"}}, {"nodeid": "app/tests/security/hipaa/test_hipaa_compliance.py::TestAuthentication::test_create_access_token", "lineno": 222, "outcome": "passed", "keywords": ["test_create_access_token", "TestAuthentication", "test_hipaa_compliance.py", "hipaa", "security", "tests", "app", "backend", ""], "setup": {"duration": 0.00012450001668184996, "outcome": "passed"}, "call": {"duration": 8.333299774676561e-05, "outcome": "passed"}, "teardown": {"duration": 5.687499651685357e-05, "outcome": "passed"}}, {"nodeid": "app/tests/security/hipaa/test_hipaa_compliance.py::TestAuthentication::test_decode_access_token", "lineno": 230, "outcome": "failed", "keywords": ["test_decode_access_token", "TestAuthentication", "test_hipaa_compliance.py", "hipaa", "security", "tests", "app", "backend", ""], "setup": {"duration": 0.0016563329845666885, "outcome": "passed"}, "call": {"duration": 0.00015612499555572867, "outcome": "failed", "crash": {"path": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/tests/security/hipaa/test_hipaa_compliance.py", "lineno": 236, "message": "AssertionError: assert 'test_user' == 'test_user_7c7fae34'\n  \n  - test_user_7c7fae34\n  + test_user"}, "traceback": [{"path": "hipaa/test_hipaa_compliance.py", "lineno": 236, "message": "AssertionError"}], "longrepr": "self = <test_hipaa_compliance.TestAuthentication object at 0x1065c3c50>\ntest_jwt_token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0X3VzZXJfN2M3ZmFlMzQiLCJpZCI6ImNkYTc4ZmNlLTY2YWYtNGZjNS1hY2ViLTZh...MiOlsicmVhZDpvd25fZGF0YSIsInVwZGF0ZTpvd25fZGF0YSJdLCJleHAiOjE3NDQ2NzM0MzN9.dUTlQQF_EUyIrZL-lSIYTpQfaelgKgx3yfxSuBXks68'\ntest_user = {'email': 'test_77391bd0@example.com', 'id': 'cda78fce-66af-4fc5-aceb-6adbf15bb1dd', 'permissions': ['read:own_data', 'update:own_data'], 'role': 'patient', ...}\n\n    def test_decode_access_token(self, test_jwt_token, test_user):\n        \"\"\"Test that access tokens can be decoded correctly.\"\"\"\n        decoded = decode_token(test_jwt_token)\n    \n        # Verify the decoded token contains the expected data\n>       assert decoded[\"sub\"] == test_user[\"username\"]\nE       AssertionError: assert 'test_user' == 'test_user_7c7fae34'\nE         \nE         - test_user_7c7fae34\nE         + test_user\n\nhipaa/test_hipaa_compliance.py:236: AssertionError"}, "teardown": {"duration": 7.166696013882756e-05, "outcome": "passed"}}, {"nodeid": "app/tests/security/hipaa/test_hipaa_compliance.py::TestAuthentication::test_expired_token_rejection", "lineno": 238, "outcome": "failed", "keywords": ["test_expired_token_rejection", "TestAuthentication", "test_hipaa_compliance.py", "hipaa", "security", "tests", "app", "backend", ""], "setup": {"duration": 6.579200271517038e-05, "outcome": "passed"}, "call": {"duration": 0.00013933295849710703, "outcome": "failed", "crash": {"path": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/tests/security/hipaa/test_hipaa_compliance.py", "lineno": 249, "message": "Failed: DID NOT RAISE (<class 'jose.exceptions.JWTError'>, <class 'test_hipaa_compliance.AuthenticationError'>)"}, "traceback": [{"path": "hipaa/test_hipaa_compliance.py", "lineno": 249, "message": "Failed"}], "longrepr": "self = <test_hipaa_compliance.TestAuthentication object at 0x1067d8050>\n\n    def test_expired_token_rejection(self):\n        \"\"\"Test that expired tokens are rejected.\"\"\"\n        # Create an expired token\n        expired_data = {\n            \"sub\": \"test_user\",\n            \"exp\": datetime.now(UTC) - timedelta(minutes=30),\n        }\n        expired_token = jwt.encode(expired_data, settings.JWT_SECRET_KEY, algorithm=\"HS256\")\n    \n        # Verify the expired token is rejected\n>       with pytest.raises((jwt.JWTError, AuthenticationError)):\nE       Failed: DID NOT RAISE (<class 'jose.exceptions.JWTError'>, <class 'test_hipaa_compliance.AuthenticationError'>)\n\nhipaa/test_hipaa_compliance.py:249: Failed"}, "teardown": {"duration": 6.758299423381686e-05, "outcome": "passed"}}, {"nodeid": "app/tests/security/hipaa/test_hipaa_compliance.py::TestAuthentication::test_invalid_token_rejection", "lineno": 251, "outcome": "failed", "keywords": ["test_invalid_token_rejection", "TestAuthentication", "test_hipaa_compliance.py", "hipaa", "security", "tests", "app", "backend", ""], "setup": {"duration": 6.649998249486089e-05, "outcome": "passed"}, "call": {"duration": 8.44579772092402e-05, "outcome": "failed", "crash": {"path": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/tests/security/hipaa/test_hipaa_compliance.py", "lineno": 258, "message": "Failed: DID NOT RAISE (<class 'jose.exceptions.JWTError'>, <class 'test_hipaa_compliance.AuthenticationError'>)"}, "traceback": [{"path": "hipaa/test_hipaa_compliance.py", "lineno": 258, "message": "Failed"}], "longrepr": "self = <test_hipaa_compliance.TestAuthentication object at 0x1067d8180>\n\n    def test_invalid_token_rejection(self):\n        \"\"\"Test that invalid tokens are rejected.\"\"\"\n        # Create an invalid token\n        invalid_token = \"invalid.token.format\"\n    \n        # Verify the invalid token is rejected\n>       with pytest.raises((jwt.JWTError, AuthenticationError)):\nE       Failed: DID NOT RAISE (<class 'jose.exceptions.JWTError'>, <class 'test_hipaa_compliance.AuthenticationError'>)\n\nhipaa/test_hipaa_compliance.py:258: Failed"}, "teardown": {"duration": 5.7958008255809546e-05, "outcome": "passed"}}, {"nodeid": "app/tests/security/hipaa/test_hipaa_compliance.py::TestAuthorization::test_rbac_permission_check", "lineno": 264, "outcome": "error", "keywords": ["test_rbac_permission_check", "TestAuthorization", "test_hipaa_compliance.py", "hipaa", "security", "tests", "app", "backend", ""], "setup": {"duration": 0.0012828339822590351, "outcome": "failed", "crash": {"path": "/opt/homebrew/Cellar/python@3.13/3.13.2/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py", "lineno": 1465, "message": "AttributeError: <module 'app.infrastructure.security.rbac.role_manager' from '/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/infrastructure/security/rbac/role_manager.py'> does not have the attribute 'check_permission'"}, "traceback": [{"path": "hipaa/test_hipaa_compliance.py", "lineno": 172, "message": ""}, {"path": "/opt/homebrew/Cellar/python@3.13/3.13.2/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py", "lineno": 1495, "message": "in __enter__"}, {"path": "/opt/homebrew/Cellar/python@3.13/3.13.2/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py", "lineno": 1465, "message": "AttributeError"}], "longrepr": "@pytest.fixture\n    def mock_rbac():\n        \"\"\"Create a mock RBAC system for testing.\"\"\"\n>       with mock.patch(\"app.infrastructure.security.rbac.role_manager.check_permission\") as mock_check:\n\nhipaa/test_hipaa_compliance.py:172: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/homebrew/Cellar/python@3.13/3.13.2/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1495: in __enter__\n    original, local = self.get_original()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <unittest.mock._patch object at 0x1067e65f0>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n>           raise AttributeError(\n                \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'app.infrastructure.security.rbac.role_manager' from '/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/infrastructure/security/rbac/role_manager.py'> does not have the attribute 'check_permission'\n\n/opt/homebrew/Cellar/python@3.13/3.13.2/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1465: AttributeError"}, "teardown": {"duration": 0.0001284580212086439, "outcome": "passed"}}, {"nodeid": "app/tests/security/hipaa/test_hipaa_compliance.py::TestAuthorization::test_rbac_permission_denied", "lineno": 277, "outcome": "error", "keywords": ["test_rbac_permission_denied", "TestAuthorization", "test_hipaa_compliance.py", "hipaa", "security", "tests", "app", "backend", ""], "setup": {"duration": 0.00018208299297839403, "outcome": "failed", "crash": {"path": "/opt/homebrew/Cellar/python@3.13/3.13.2/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py", "lineno": 1465, "message": "AttributeError: <module 'app.infrastructure.security.rbac.role_manager' from '/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/infrastructure/security/rbac/role_manager.py'> does not have the attribute 'check_permission'"}, "traceback": [{"path": "hipaa/test_hipaa_compliance.py", "lineno": 172, "message": ""}, {"path": "/opt/homebrew/Cellar/python@3.13/3.13.2/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py", "lineno": 1495, "message": "in __enter__"}, {"path": "/opt/homebrew/Cellar/python@3.13/3.13.2/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py", "lineno": 1465, "message": "AttributeError"}], "longrepr": "@pytest.fixture\n    def mock_rbac():\n        \"\"\"Create a mock RBAC system for testing.\"\"\"\n>       with mock.patch(\"app.infrastructure.security.rbac.role_manager.check_permission\") as mock_check:\n\nhipaa/test_hipaa_compliance.py:172: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/homebrew/Cellar/python@3.13/3.13.2/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1495: in __enter__\n    original, local = self.get_original()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <unittest.mock._patch object at 0x1067e4910>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n>           raise AttributeError(\n                \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'app.infrastructure.security.rbac.role_manager' from '/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/infrastructure/security/rbac/role_manager.py'> does not have the attribute 'check_permission'\n\n/opt/homebrew/Cellar/python@3.13/3.13.2/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1465: AttributeError"}, "teardown": {"duration": 8.345895912498236e-05, "outcome": "passed"}}, {"nodeid": "app/tests/security/hipaa/test_hipaa_compliance.py::TestAuthorization::test_cross_patient_data_access_prevented", "lineno": 292, "outcome": "passed", "keywords": ["test_cross_patient_data_access_prevented", "TestAuthorization", "test_hipaa_compliance.py", "hipaa", "security", "tests", "app", "backend", ""], "setup": {"duration": 0.00010466598905622959, "outcome": "passed"}, "call": {"duration": 0.0001218749675899744, "outcome": "passed"}, "teardown": {"duration": 4.979199729859829e-05, "outcome": "passed"}}, {"nodeid": "app/tests/security/hipaa/test_hipaa_compliance.py::TestAuditLogging::test_phi_access_logging", "lineno": 308, "outcome": "error", "keywords": ["test_phi_access_logging", "TestAuditLogging", "test_hipaa_compliance.py", "hipaa", "security", "tests", "app", "backend", ""], "setup": {"duration": 0.000526666990481317, "outcome": "failed", "crash": {"path": "/opt/homebrew/Cellar/python@3.13/3.13.2/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py", "lineno": 1465, "message": "AttributeError: <module 'app.infrastructure.logging.audit_logger' from '/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/infrastructure/logging/audit_logger.py'> does not have the attribute 'log_phi_access'"}, "traceback": [{"path": "hipaa/test_hipaa_compliance.py", "lineno": 166, "message": ""}, {"path": "/opt/homebrew/Cellar/python@3.13/3.13.2/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py", "lineno": 1495, "message": "in __enter__"}, {"path": "/opt/homebrew/Cellar/python@3.13/3.13.2/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py", "lineno": 1465, "message": "AttributeError"}], "longrepr": "@pytest.fixture\n    def mock_audit_logger():\n        \"\"\"Create a mock audit logger for testing.\"\"\"\n>       with mock.patch(\"app.infrastructure.logging.audit_logger.log_phi_access\") as mock_logger:\n\nhipaa/test_hipaa_compliance.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/homebrew/Cellar/python@3.13/3.13.2/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1495: in __enter__\n    original, local = self.get_original()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <unittest.mock._patch object at 0x1067e7bd0>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n>           raise AttributeError(\n                \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'app.infrastructure.logging.audit_logger' from '/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/infrastructure/logging/audit_logger.py'> does not have the attribute 'log_phi_access'\n\n/opt/homebrew/Cellar/python@3.13/3.13.2/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1465: AttributeError"}, "teardown": {"duration": 0.00015695899492129683, "outcome": "passed"}}, {"nodeid": "app/tests/security/hipaa/test_hipaa_compliance.py::TestAuditLogging::test_phi_sanitization", "lineno": 324, "outcome": "passed", "keywords": ["test_phi_sanitization", "TestAuditLogging", "test_hipaa_compliance.py", "hipaa", "security", "tests", "app", "backend", ""], "setup": {"duration": 0.00012429198250174522, "outcome": "passed"}, "call": {"duration": 0.00010187498992308974, "outcome": "passed"}, "teardown": {"duration": 5.1708018872886896e-05, "outcome": "passed"}}, {"nodeid": "app/tests/security/hipaa/test_hipaa_compliance.py::TestSecurityBoundaries::test_unauthorized_request_rejection", "lineno": 337, "outcome": "passed", "keywords": ["test_unauthorized_request_rejection", "TestSecurityBoundaries", "test_hipaa_compliance.py", "hipaa", "security", "tests", "app", "backend", ""], "setup": {"duration": 6.491702515631914e-05, "outcome": "passed"}, "call": {"duration": 8.399999933317304e-05, "outcome": "passed"}, "teardown": {"duration": 4.395900759845972e-05, "outcome": "passed"}}, {"nodeid": "app/tests/security/hipaa/test_hipaa_compliance.py::TestSecurityBoundaries::test_phi_access_error_handling", "lineno": 345, "outcome": "passed", "keywords": ["test_phi_access_error_handling", "TestSecurityBoundaries", "test_hipaa_compliance.py", "hipaa", "security", "tests", "app", "backend", ""], "setup": {"duration": 8.745800005272031e-05, "outcome": "passed"}, "call": {"duration": 6.725004641339183e-05, "outcome": "passed"}, "teardown": {"duration": 8.587504271417856e-05, "outcome": "passed"}}, {"nodeid": "app/tests/security/hipaa/test_hipaa_compliance.py::TestHIPAACompliance::test_field_level_encryption", "lineno": 363, "outcome": "failed", "keywords": ["test_field_level_encryption", "TestHIPAACompliance", "test_hipaa_compliance.py", "hipaa", "security", "tests", "app", "backend", ""], "setup": {"duration": 0.00010487501276656985, "outcome": "passed"}, "call": {"duration": 0.00019316701218485832, "outcome": "failed", "crash": {"path": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/tests/security/hipaa/test_hipaa_compliance.py", "lineno": 374, "message": "AssertionError: assert 'decrypted_field' == '123-45-6789'\n  \n  - 123-45-6789\n  + decrypted_field"}, "traceback": [{"path": "hipaa/test_hipaa_compliance.py", "lineno": 374, "message": "AssertionError"}], "longrepr": "self = <test_hipaa_compliance.TestHIPAACompliance object at 0x1067e0550>\ntest_phi_data = {'diagnosis': 'Test Diagnosis', 'dob': '1990-01-01', 'first_name': 'Test', 'last_name': 'Patient', ...}\n\n    def test_field_level_encryption(self, test_phi_data):\n        \"\"\"Test that field-level encryption is available for PHI.\"\"\"\n        for field in [\"ssn\", \"diagnosis\", \"medication\"]:\n            if field in test_phi_data:\n                value = test_phi_data[field]\n                encrypted = encrypt_field(value)\n                decrypted = decrypt_field(encrypted)\n    \n                # Verify encryption and decryption work\n                assert encrypted != value\n>               assert decrypted == value\nE               AssertionError: assert 'decrypted_field' == '123-45-6789'\nE                 \nE                 - 123-45-6789\nE                 + decrypted_field\n\nhipaa/test_hipaa_compliance.py:374: AssertionError"}, "teardown": {"duration": 9.245797991752625e-05, "outcome": "passed"}}, {"nodeid": "app/tests/security/hipaa/test_hipaa_compliance.py::TestHIPAACompliance::test_minimum_necessary_principle", "lineno": 375, "outcome": "passed", "keywords": ["test_minimum_necessary_principle", "TestHIPAACompliance", "test_hipaa_compliance.py", "hipaa", "security", "tests", "app", "backend", ""], "setup": {"duration": 0.0001093330211006105, "outcome": "passed"}, "call": {"duration": 5.966698518022895e-05, "outcome": "passed"}, "teardown": {"duration": 4.9499969463795424e-05, "outcome": "passed"}}, {"nodeid": "app/tests/security/hipaa/test_hipaa_compliance.py::TestHIPAACompliance::test_secure_configuration", "lineno": 386, "outcome": "passed", "keywords": ["test_secure_configuration", "TestHIPAACompliance", "test_hipaa_compliance.py", "hipaa", "security", "tests", "app", "backend", ""], "setup": {"duration": 5.904200952500105e-05, "outcome": "passed"}, "call": {"duration": 5.987501936033368e-05, "outcome": "passed"}, "teardown": {"duration": 4.658300895243883e-05, "outcome": "passed"}}, {"nodeid": "app/tests/security/hipaa/test_hipaa_compliance.py::TestHIPAACompliance::test_password_policy", "lineno": 401, "outcome": "passed", "keywords": ["test_password_policy", "TestHIPAACompliance", "test_hipaa_compliance.py", "hipaa", "security", "tests", "app", "backend", ""], "setup": {"duration": 5.591695662587881e-05, "outcome": "passed"}, "call": {"duration": 5.645904457196593e-05, "outcome": "passed"}, "teardown": {"duration": 7.975002517923713e-05, "outcome": "passed"}}], "warnings": [{"message": "Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'env'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/venv_py313/lib/python3.13/site-packages/pydantic/fields.py", "lineno": 1076}, {"message": "Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'env'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/venv_py313/lib/python3.13/site-packages/pydantic/fields.py", "lineno": 1076}, {"message": "Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'env'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/venv_py313/lib/python3.13/site-packages/pydantic/fields.py", "lineno": 1076}, {"message": "Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'env'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/venv_py313/lib/python3.13/site-packages/pydantic/fields.py", "lineno": 1076}, {"message": "Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'env'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/venv_py313/lib/python3.13/site-packages/pydantic/fields.py", "lineno": 1076}, {"message": "Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'env'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/venv_py313/lib/python3.13/site-packages/pydantic/fields.py", "lineno": 1076}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/core/config.py", "lineno": 51}, {"message": "Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'env'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/venv_py313/lib/python3.13/site-packages/pydantic/fields.py", "lineno": 1076}, {"message": "Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'env'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/venv_py313/lib/python3.13/site-packages/pydantic/fields.py", "lineno": 1076}, {"message": "Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'env'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/venv_py313/lib/python3.13/site-packages/pydantic/fields.py", "lineno": 1076}, {"message": "Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'env'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/venv_py313/lib/python3.13/site-packages/pydantic/fields.py", "lineno": 1076}, {"message": "Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'env'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/venv_py313/lib/python3.13/site-packages/pydantic/fields.py", "lineno": 1076}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/core/config.py", "lineno": 68}, {"message": "Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'env'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/venv_py313/lib/python3.13/site-packages/pydantic/fields.py", "lineno": 1076}, {"message": "Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'env'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/venv_py313/lib/python3.13/site-packages/pydantic/fields.py", "lineno": 1076}, {"message": "Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'env'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/venv_py313/lib/python3.13/site-packages/pydantic/fields.py", "lineno": 1076}, {"message": "Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'env'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/venv_py313/lib/python3.13/site-packages/pydantic/fields.py", "lineno": 1076}, {"message": "Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/venv_py313/lib/python3.13/site-packages/pydantic/_internal/_config.py", "lineno": 323}]}