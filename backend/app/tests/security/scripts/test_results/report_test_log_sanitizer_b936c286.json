{"created": 1744671630.7853131, "duration": 0.05720925331115723, "exitcode": 1, "root": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend", "environment": {}, "summary": {"failed": 10, "passed": 1, "total": 11, "collected": 11}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "app/tests/security/phi/test_log_sanitizer.py", "type": "Module"}]}, {"nodeid": "app/tests/security/phi/test_log_sanitizer.py::TestLogSanitizer", "outcome": "passed", "result": [{"nodeid": "app/tests/security/phi/test_log_sanitizer.py::TestLogSanitizer::test_case_insensitive_sanitization", "type": "TestCaseFunction", "lineno": 109}, {"nodeid": "app/tests/security/phi/test_log_sanitizer.py::TestLogSanitizer::test_hipaa_compliance", "type": "TestCaseFunction", "lineno": 117}, {"nodeid": "app/tests/security/phi/test_log_sanitizer.py::TestLogSanitizer::test_no_phi_unchanged", "type": "TestCaseFunction", "lineno": 102}, {"nodeid": "app/tests/security/phi/test_log_sanitizer.py::TestLogSanitizer::test_sanitize_addresses", "type": "TestCaseFunction", "lineno": 64}, {"nodeid": "app/tests/security/phi/test_log_sanitizer.py::TestLogSanitizer::test_sanitize_dob", "type": "TestCaseFunction", "lineno": 85}, {"nodeid": "app/tests/security/phi/test_log_sanitizer.py::TestLogSanitizer::test_sanitize_email_addresses", "type": "TestCaseFunction", "lineno": 50}, {"nodeid": "app/tests/security/phi/test_log_sanitizer.py::TestLogSanitizer::test_sanitize_mrn", "type": "TestCaseFunction", "lineno": 78}, {"nodeid": "app/tests/security/phi/test_log_sanitizer.py::TestLogSanitizer::test_sanitize_multiple_phi", "type": "TestCaseFunction", "lineno": 92}, {"nodeid": "app/tests/security/phi/test_log_sanitizer.py::TestLogSanitizer::test_sanitize_patient_names", "type": "TestCaseFunction", "lineno": 43}, {"nodeid": "app/tests/security/phi/test_log_sanitizer.py::TestLogSanitizer::test_sanitize_phone_numbers", "type": "TestCaseFunction", "lineno": 57}, {"nodeid": "app/tests/security/phi/test_log_sanitizer.py::TestLogSanitizer::test_sanitize_ssn", "type": "TestCaseFunction", "lineno": 71}]}, {"nodeid": "app/tests/security/phi/test_log_sanitizer.py", "outcome": "passed", "result": [{"nodeid": "app/tests/security/phi/test_log_sanitizer.py::TestLogSanitizer", "type": "UnitTestCase"}]}], "tests": [{"nodeid": "app/tests/security/phi/test_log_sanitizer.py::TestLogSanitizer::test_case_insensitive_sanitization", "lineno": 109, "outcome": "failed", "keywords": ["test_case_insensitive_sanitization", "TestLogSanitizer", "test_log_sanitizer.py", "phi", "security", "tests", "app", "backend", ""], "setup": {"duration": 0.001257832976989448, "outcome": "passed", "stdout": "Loaded test environment variables from: /Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/.env.test\n"}, "call": {"duration": 0.0020175829995423555, "outcome": "failed", "crash": {"path": "/opt/homebrew/Cellar/python@3.13/3.13.2/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/case.py", "lineno": 732, "message": "AssertionError: 'PATIENT JOHN SMITH has email [REDACTED:email]' != 'PATIENT [REDACTED_NAME] has email [REDACTED_EMAIL]'\n- PATIENT JOHN SMITH has email [REDACTED:email]\n+ PATIENT [REDACTED_NAME] has email [REDACTED_EMAIL]"}, "traceback": [{"path": "phi/test_log_sanitizer.py", "lineno": 114, "message": "AssertionError"}], "longrepr": "self = <test_log_sanitizer.TestLogSanitizer testMethod=test_case_insensitive_sanitization>\n\n    def test_case_insensitive_sanitization(self):\n        \"\"\"Test that sanitization works regardless of case.\"\"\"\n        log_key = \"mixed_case\"\n        sanitized = self.log_sanitizer.sanitize(self.test_logs[log_key])\n>       self.assertEqual(sanitized, self.expected_patterns[log_key])\nE       AssertionError: 'PATIENT JOHN SMITH has email [REDACTED:email]' != 'PATIENT [REDACTED_NAME] has email [REDACTED_EMAIL]'\nE       - PATIENT JOHN SMITH has email [REDACTED:email]\nE       + PATIENT [REDACTED_NAME] has email [REDACTED_EMAIL]\n\nphi/test_log_sanitizer.py:114: AssertionError"}, "teardown": {"duration": 0.00012920901644974947, "outcome": "passed"}}, {"nodeid": "app/tests/security/phi/test_log_sanitizer.py::TestLogSanitizer::test_hipaa_compliance", "lineno": 117, "outcome": "failed", "keywords": ["test_hipaa_compliance", "TestLogSanitizer", "test_log_sanitizer.py", "phi", "security", "tests", "app", "backend", ""], "setup": {"duration": 9.891699301078916e-05, "outcome": "passed"}, "call": {"duration": 0.00017483398551121354, "outcome": "failed", "crash": {"path": "/opt/homebrew/Cellar/python@3.13/3.13.2/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/case.py", "lineno": 732, "message": "AssertionError: '[REDACTED_NAME]' not found in '[REDACTED:name] Smith, DOB [REDACTED:dob], SSN [REDACTED:ssn] lives at 123 [REDACTED:name]'"}, "traceback": [{"path": "phi/test_log_sanitizer.py", "lineno": 130, "message": "AssertionError"}], "longrepr": "self = <test_log_sanitizer.TestLogSanitizer testMethod=test_hipaa_compliance>\n\n    def test_hipaa_compliance(self):\n        \"\"\"Verify compliance with HIPAA requirements for log sanitization.\"\"\"\n        log_key = \"multiple_phi\"\n        sanitized = self.log_sanitizer.sanitize(self.test_logs[log_key])\n    \n        # HIPAA requires that PHI is not visible in logs\n        self.assertNotIn(\"John Smith\", sanitized)\n        self.assertNotIn(\"01/15/1980\", sanitized)\n        self.assertNotIn(\"123-45-6789\", sanitized)\n        self.assertNotIn(\"123 Main St\", sanitized)\n    \n        # Verify that sanitized log contains redaction markers\n>       self.assertIn(\"[REDACTED_NAME]\", sanitized)\nE       AssertionError: '[REDACTED_NAME]' not found in '[REDACTED:name] Smith, DOB [REDACTED:dob], SSN [REDACTED:ssn] lives at 123 [REDACTED:name]'\n\nphi/test_log_sanitizer.py:130: AssertionError"}, "teardown": {"duration": 5.987501936033368e-05, "outcome": "passed"}}, {"nodeid": "app/tests/security/phi/test_log_sanitizer.py::TestLogSanitizer::test_no_phi_unchanged", "lineno": 102, "outcome": "passed", "keywords": ["test_no_phi_unchanged", "TestLogSanitizer", "test_log_sanitizer.py", "phi", "security", "tests", "app", "backend", ""], "setup": {"duration": 7.045798702165484e-05, "outcome": "passed"}, "call": {"duration": 9.858299745246768e-05, "outcome": "passed"}, "teardown": {"duration": 4.8707996029406786e-05, "outcome": "passed"}}, {"nodeid": "app/tests/security/phi/test_log_sanitizer.py::TestLogSanitizer::test_sanitize_addresses", "lineno": 64, "outcome": "failed", "keywords": ["test_sanitize_addresses", "TestLogSanitizer", "test_log_sanitizer.py", "phi", "security", "tests", "app", "backend", ""], "setup": {"duration": 6.145896622911096e-05, "outcome": "passed"}, "call": {"duration": 0.00021049997303634882, "outcome": "failed", "crash": {"path": "/opt/homebrew/Cellar/python@3.13/3.13.2/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/case.py", "lineno": 732, "message": "AssertionError: 'Patient lives at [REDACTED:address]' != 'Patient lives at [REDACTED_ADDRESS]'\n- Patient lives at [REDACTED:address]\n?                           ^^^^^^^^\n+ Patient lives at [REDACTED_ADDRESS]\n?                           ^^^^^^^^"}, "traceback": [{"path": "phi/test_log_sanitizer.py", "lineno": 69, "message": "AssertionError"}], "longrepr": "self = <test_log_sanitizer.TestLogSanitizer testMethod=test_sanitize_addresses>\n\n    def test_sanitize_addresses(self):\n        \"\"\"Test sanitization of physical addresses.\"\"\"\n        log_key = \"patient_address\"\n        sanitized = self.log_sanitizer.sanitize(self.test_logs[log_key])\n>       self.assertEqual(sanitized, self.expected_patterns[log_key])\nE       AssertionError: 'Patient lives at [REDACTED:address]' != 'Patient lives at [REDACTED_ADDRESS]'\nE       - Patient lives at [REDACTED:address]\nE       ?                           ^^^^^^^^\nE       + Patient lives at [REDACTED_ADDRESS]\nE       ?                           ^^^^^^^^\n\nphi/test_log_sanitizer.py:69: AssertionError"}, "teardown": {"duration": 5.3540978115051985e-05, "outcome": "passed"}}, {"nodeid": "app/tests/security/phi/test_log_sanitizer.py::TestLogSanitizer::test_sanitize_dob", "lineno": 85, "outcome": "failed", "keywords": ["test_sanitize_dob", "TestLogSanitizer", "test_log_sanitizer.py", "phi", "security", "tests", "app", "backend", ""], "setup": {"duration": 6.708403816446662e-05, "outcome": "passed"}, "call": {"duration": 0.00016429199604317546, "outcome": "failed", "crash": {"path": "/opt/homebrew/Cellar/python@3.13/3.13.2/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/case.py", "lineno": 732, "message": "AssertionError: 'Patient DOB is [REDACTED:dob]' != 'Patient DOB is [REDACTED_DOB]'\n- Patient DOB is [REDACTED:dob]\n?                         ^^^^\n+ Patient DOB is [REDACTED_DOB]\n?                         ^^^^"}, "traceback": [{"path": "phi/test_log_sanitizer.py", "lineno": 90, "message": "AssertionError"}], "longrepr": "self = <test_log_sanitizer.TestLogSanitizer testMethod=test_sanitize_dob>\n\n    def test_sanitize_dob(self):\n        \"\"\"Test sanitization of Dates of Birth.\"\"\"\n        log_key = \"patient_dob\"\n        sanitized = self.log_sanitizer.sanitize(self.test_logs[log_key])\n>       self.assertEqual(sanitized, self.expected_patterns[log_key])\nE       AssertionError: 'Patient DOB is [REDACTED:dob]' != 'Patient DOB is [REDACTED_DOB]'\nE       - Patient DOB is [REDACTED:dob]\nE       ?                         ^^^^\nE       + Patient DOB is [REDACTED_DOB]\nE       ?                         ^^^^\n\nphi/test_log_sanitizer.py:90: AssertionError"}, "teardown": {"duration": 4.9708993174135685e-05, "outcome": "passed"}}, {"nodeid": "app/tests/security/phi/test_log_sanitizer.py::TestLogSanitizer::test_sanitize_email_addresses", "lineno": 50, "outcome": "failed", "keywords": ["test_sanitize_email_addresses", "TestLogSanitizer", "test_log_sanitizer.py", "phi", "security", "tests", "app", "backend", ""], "setup": {"duration": 6.445904728025198e-05, "outcome": "passed"}, "call": {"duration": 0.00020004197722300887, "outcome": "failed", "crash": {"path": "/opt/homebrew/Cellar/python@3.13/3.13.2/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/case.py", "lineno": 732, "message": "AssertionError: 'Contact patient at [REDACTED:email] for follow-up' != 'Contact patient at [REDACTED_EMAIL] for follow-up'\n- Contact patient at [REDACTED:email] for follow-up\n?                             ^^^^^^\n+ Contact patient at [REDACTED_EMAIL] for follow-up\n?                             ^^^^^^"}, "traceback": [{"path": "phi/test_log_sanitizer.py", "lineno": 55, "message": "AssertionError"}], "longrepr": "self = <test_log_sanitizer.TestLogSanitizer testMethod=test_sanitize_email_addresses>\n\n    def test_sanitize_email_addresses(self):\n        \"\"\"Test sanitization of email addresses.\"\"\"\n        log_key = \"patient_email\"\n        sanitized = self.log_sanitizer.sanitize(self.test_logs[log_key])\n>       self.assertEqual(sanitized, self.expected_patterns[log_key])\nE       AssertionError: 'Contact patient at [REDACTED:email] for follow-up' != 'Contact patient at [REDACTED_EMAIL] for follow-up'\nE       - Contact patient at [REDACTED:email] for follow-up\nE       ?                             ^^^^^^\nE       + Contact patient at [REDACTED_EMAIL] for follow-up\nE       ?                             ^^^^^^\n\nphi/test_log_sanitizer.py:55: AssertionError"}, "teardown": {"duration": 5.220802268013358e-05, "outcome": "passed"}}, {"nodeid": "app/tests/security/phi/test_log_sanitizer.py::TestLogSanitizer::test_sanitize_mrn", "lineno": 78, "outcome": "failed", "keywords": ["test_sanitize_mrn", "TestLogSanitizer", "test_log_sanitizer.py", "phi", "security", "tests", "app", "backend", ""], "setup": {"duration": 6.337498780339956e-05, "outcome": "passed"}, "call": {"duration": 0.00016437500016763806, "outcome": "failed", "crash": {"path": "/opt/homebrew/Cellar/python@3.13/3.13.2/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/case.py", "lineno": 732, "message": "AssertionError: 'Patient MRN#987654 admitted to ward' != 'Patient MRN#[REDACTED_MRN] admitted to ward'\n- Patient MRN#987654 admitted to ward\n?             ^^^^^^\n+ Patient MRN#[REDACTED_MRN] admitted to ward\n?             ^^^^^^^^^^^^^^"}, "traceback": [{"path": "phi/test_log_sanitizer.py", "lineno": 83, "message": "AssertionError"}], "longrepr": "self = <test_log_sanitizer.TestLogSanitizer testMethod=test_sanitize_mrn>\n\n    def test_sanitize_mrn(self):\n        \"\"\"Test sanitization of Medical Record Numbers.\"\"\"\n        log_key = \"patient_mrn\"\n        sanitized = self.log_sanitizer.sanitize(self.test_logs[log_key])\n>       self.assertEqual(sanitized, self.expected_patterns[log_key])\nE       AssertionError: 'Patient MRN#987654 admitted to ward' != 'Patient MRN#[REDACTED_MRN] admitted to ward'\nE       - Patient MRN#987654 admitted to ward\nE       ?             ^^^^^^\nE       + Patient MRN#[REDACTED_MRN] admitted to ward\nE       ?             ^^^^^^^^^^^^^^\n\nphi/test_log_sanitizer.py:83: AssertionError"}, "teardown": {"duration": 5.212501855567098e-05, "outcome": "passed"}}, {"nodeid": "app/tests/security/phi/test_log_sanitizer.py::TestLogSanitizer::test_sanitize_multiple_phi", "lineno": 92, "outcome": "failed", "keywords": ["test_sanitize_multiple_phi", "TestLogSanitizer", "test_log_sanitizer.py", "phi", "security", "tests", "app", "backend", ""], "setup": {"duration": 6.375001976266503e-05, "outcome": "passed"}, "call": {"duration": 0.0003019580035470426, "outcome": "failed", "crash": {"path": "/opt/homebrew/Cellar/python@3.13/3.13.2/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/case.py", "lineno": 732, "message": "AssertionError: '[REDACTED:name] Smith, DOB [REDACTED:dob][45 chars]ame]' != 'Patient [REDACTED_NAME], DOB [REDACTED_DO[46 chars]ESS]'\n- [REDACTED:name] Smith, DOB [REDACTED:dob], SSN [REDACTED:ssn] lives at 123 [REDACTED:name]\n+ Patient [REDACTED_NAME], DOB [REDACTED_DOB], SSN [REDACTED_SSN] lives at [REDACTED_ADDRESS]"}, "traceback": [{"path": "phi/test_log_sanitizer.py", "lineno": 97, "message": "AssertionError"}], "longrepr": "self = <test_log_sanitizer.TestLogSanitizer testMethod=test_sanitize_multiple_phi>\n\n    def test_sanitize_multiple_phi(self):\n        \"\"\"Test sanitization of logs with multiple PHI elements.\"\"\"\n        log_key = \"multiple_phi\"\n        sanitized = self.log_sanitizer.sanitize(self.test_logs[log_key])\n>       self.assertEqual(sanitized, self.expected_patterns[log_key])\nE       AssertionError: '[REDACTED:name] Smith, DOB [REDACTED:dob][45 chars]ame]' != 'Patient [REDACTED_NAME], DOB [REDACTED_DO[46 chars]ESS]'\nE       - [REDACTED:name] Smith, DOB [REDACTED:dob], SSN [REDACTED:ssn] lives at 123 [REDACTED:name]\nE       + Patient [REDACTED_NAME], DOB [REDACTED_DOB], SSN [REDACTED_SSN] lives at [REDACTED_ADDRESS]\n\nphi/test_log_sanitizer.py:97: AssertionError"}, "teardown": {"duration": 5.425000563263893e-05, "outcome": "passed"}}, {"nodeid": "app/tests/security/phi/test_log_sanitizer.py::TestLogSanitizer::test_sanitize_patient_names", "lineno": 43, "outcome": "failed", "keywords": ["test_sanitize_patient_names", "TestLogSanitizer", "test_log_sanitizer.py", "phi", "security", "tests", "app", "backend", ""], "setup": {"duration": 6.7290966399014e-05, "outcome": "passed"}, "call": {"duration": 0.00021666701650246978, "outcome": "failed", "crash": {"path": "/opt/homebrew/Cellar/python@3.13/3.13.2/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/case.py", "lineno": 732, "message": "AssertionError: '[REDACTED:name] Smith visited on 2023-01-01' != 'Patient [REDACTED_NAME] visited on 2023-01-01'\n- [REDACTED:name] Smith visited on 2023-01-01\n+ Patient [REDACTED_NAME] visited on 2023-01-01"}, "traceback": [{"path": "phi/test_log_sanitizer.py", "lineno": 48, "message": "AssertionError"}], "longrepr": "self = <test_log_sanitizer.TestLogSanitizer testMethod=test_sanitize_patient_names>\n\n    def test_sanitize_patient_names(self):\n        \"\"\"Test sanitization of patient names.\"\"\"\n        log_key = \"patient_name\"\n        sanitized = self.log_sanitizer.sanitize(self.test_logs[log_key])\n>       self.assertEqual(sanitized, self.expected_patterns[log_key])\nE       AssertionError: '[REDACTED:name] Smith visited on 2023-01-01' != 'Patient [REDACTED_NAME] visited on 2023-01-01'\nE       - [REDACTED:name] Smith visited on 2023-01-01\nE       + Patient [REDACTED_NAME] visited on 2023-01-01\n\nphi/test_log_sanitizer.py:48: AssertionError"}, "teardown": {"duration": 8.866703137755394e-05, "outcome": "passed"}}, {"nodeid": "app/tests/security/phi/test_log_sanitizer.py::TestLogSanitizer::test_sanitize_phone_numbers", "lineno": 57, "outcome": "failed", "keywords": ["test_sanitize_phone_numbers", "TestLogSanitizer", "test_log_sanitizer.py", "phi", "security", "tests", "app", "backend", ""], "setup": {"duration": 8.041696855798364e-05, "outcome": "passed"}, "call": {"duration": 0.00021949998335912824, "outcome": "failed", "crash": {"path": "/opt/homebrew/Cellar/python@3.13/3.13.2/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/case.py", "lineno": 732, "message": "AssertionError: 'Patient phone number is [REDACTED:phone]' != 'Patient phone number is [REDACTED_PHONE]'\n- Patient phone number is [REDACTED:phone]\n?                                  ^^^^^^\n+ Patient phone number is [REDACTED_PHONE]\n?                                  ^^^^^^"}, "traceback": [{"path": "phi/test_log_sanitizer.py", "lineno": 62, "message": "AssertionError"}], "longrepr": "self = <test_log_sanitizer.TestLogSanitizer testMethod=test_sanitize_phone_numbers>\n\n    def test_sanitize_phone_numbers(self):\n        \"\"\"Test sanitization of phone numbers.\"\"\"\n        log_key = \"patient_phone\"\n        sanitized = self.log_sanitizer.sanitize(self.test_logs[log_key])\n>       self.assertEqual(sanitized, self.expected_patterns[log_key])\nE       AssertionError: 'Patient phone number is [REDACTED:phone]' != 'Patient phone number is [REDACTED_PHONE]'\nE       - Patient phone number is [REDACTED:phone]\nE       ?                                  ^^^^^^\nE       + Patient phone number is [REDACTED_PHONE]\nE       ?                                  ^^^^^^\n\nphi/test_log_sanitizer.py:62: AssertionError"}, "teardown": {"duration": 5.7375000324100256e-05, "outcome": "passed"}}, {"nodeid": "app/tests/security/phi/test_log_sanitizer.py::TestLogSanitizer::test_sanitize_ssn", "lineno": 71, "outcome": "failed", "keywords": ["test_sanitize_ssn", "TestLogSanitizer", "test_log_sanitizer.py", "phi", "security", "tests", "app", "backend", ""], "setup": {"duration": 7.041700882837176e-05, "outcome": "passed"}, "call": {"duration": 0.0001717499690130353, "outcome": "failed", "crash": {"path": "/opt/homebrew/Cellar/python@3.13/3.13.2/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/case.py", "lineno": 732, "message": "AssertionError: 'Patient SSN is [REDACTED:ssn]' != 'Patient SSN is [REDACTED_SSN]'\n- Patient SSN is [REDACTED:ssn]\n?                         ^^^^\n+ Patient SSN is [REDACTED_SSN]\n?                         ^^^^"}, "traceback": [{"path": "phi/test_log_sanitizer.py", "lineno": 76, "message": "AssertionError"}], "longrepr": "self = <test_log_sanitizer.TestLogSanitizer testMethod=test_sanitize_ssn>\n\n    def test_sanitize_ssn(self):\n        \"\"\"Test sanitization of Social Security Numbers.\"\"\"\n        log_key = \"patient_ssn\"\n        sanitized = self.log_sanitizer.sanitize(self.test_logs[log_key])\n>       self.assertEqual(sanitized, self.expected_patterns[log_key])\nE       AssertionError: 'Patient SSN is [REDACTED:ssn]' != 'Patient SSN is [REDACTED_SSN]'\nE       - Patient SSN is [REDACTED:ssn]\nE       ?                         ^^^^\nE       + Patient SSN is [REDACTED_SSN]\nE       ?                         ^^^^\n\nphi/test_log_sanitizer.py:76: AssertionError"}, "teardown": {"duration": 0.00011449999874457717, "outcome": "passed"}}]}