{"created": 1744671642.233551, "duration": 0.13695311546325684, "exitcode": 1, "root": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend", "environment": {}, "summary": {"failed": 3, "passed": 3, "total": 6, "collected": 6}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "app/tests/security/db/test_unit_of_work.py", "type": "Module"}]}, {"nodeid": "app/tests/security/db/test_unit_of_work.py::TestSQLAlchemyUnitOfWork", "outcome": "passed", "result": [{"nodeid": "app/tests/security/db/test_unit_of_work.py::TestSQLAlchemyUnitOfWork::test_successful_transaction", "type": "Function", "lineno": 41}, {"nodeid": "app/tests/security/db/test_unit_of_work.py::TestSQLAlchemyUnitOfWork::test_transaction_rollback_on_exception", "type": "Function", "lineno": 61}, {"nodeid": "app/tests/security/db/test_unit_of_work.py::TestSQLAlchemyUnitOfWork::test_nested_transaction_support", "type": "Function", "lineno": 81}, {"nodeid": "app/tests/security/db/test_unit_of_work.py::TestSQLAlchemyUnitOfWork::test_read_only_transaction", "type": "Function", "lineno": 106}, {"nodeid": "app/tests/security/db/test_unit_of_work.py::TestSQLAlchemyUnitOfWork::test_read_only_transaction_prevents_commits", "type": "Function", "lineno": 123}, {"nodeid": "app/tests/security/db/test_unit_of_work.py::TestSQLAlchemyUnitOfWork::test_transaction_metadata_for_audit", "type": "Function", "lineno": 137}]}, {"nodeid": "app/tests/security/db/test_unit_of_work.py", "outcome": "passed", "result": [{"nodeid": "app/tests/security/db/test_unit_of_work.py::TestSQLAlchemyUnitOfWork", "type": "Class"}]}], "tests": [{"nodeid": "app/tests/security/db/test_unit_of_work.py::TestSQLAlchemyUnitOfWork::test_successful_transaction", "lineno": 41, "outcome": "failed", "keywords": ["test_successful_transaction", "TestSQLAlchemyUnitOfWork", "db_required", "test_unit_of_work.py", "db", "security", "tests", "app", "backend", ""], "setup": {"duration": 0.001738749968353659, "outcome": "passed", "stdout": "Loaded test environment variables from: /Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/.env.test\n"}, "call": {"duration": 0.0006772920023649931, "outcome": "failed", "crash": {"path": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/infrastructure/persistence/sqlalchemy/unit_of_work.py", "lineno": 130, "message": "app.domain.exceptions.RepositoryError: No active transaction to commit"}, "traceback": [{"path": "db/test_unit_of_work.py", "lineno": 55, "message": ""}, {"path": "../../infrastructure/persistence/sqlalchemy/unit_of_work.py", "lineno": 130, "message": "RepositoryError"}], "longrepr": "self = <test_unit_of_work.TestSQLAlchemyUnitOfWork object at 0x102d68050>\nunit_of_work = <app.infrastructure.persistence.sqlalchemy.unit_of_work.SQLAlchemyUnitOfWork object at 0x102cda120>\nmock_session_factory = (<MagicMock id='4341997520'>, <MagicMock id='4341997184'>)\n\n    def test_successful_transaction(self, unit_of_work, mock_session_factory):\n        \"\"\"Test that a successful transaction commits all changes.\"\"\"\n        # Arrange\n        _, mock_session = mock_session_factory\n    \n        # Act\n        with unit_of_work:\n            # Simulate repository operations\n            # In real usage, this would be something like:\n            # unit_of_work.patients.add(patient)\n            pass\n    \n        # Complete the transaction\n>       unit_of_work.commit()\n\ndb/test_unit_of_work.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <app.infrastructure.persistence.sqlalchemy.unit_of_work.SQLAlchemyUnitOfWork object at 0x102cda120>\n\n    def commit(self) -> None:\n        \"\"\"\n        Commit the current transaction.\n    \n        Raises:\n            RepositoryError: If the transaction is read-only or no session is active\n        \"\"\"\n        if self._is_read_only:\n            self._session.rollback()\n            raise RepositoryError(\"Cannot commit changes in a read-only transaction\")\n    \n        if self._session is None:\n>           raise RepositoryError(\"No active transaction to commit\")\nE           app.domain.exceptions.RepositoryError: No active transaction to commit\n\n../../infrastructure/persistence/sqlalchemy/unit_of_work.py:130: RepositoryError"}, "teardown": {"duration": 0.00012141698971390724, "outcome": "passed"}}, {"nodeid": "app/tests/security/db/test_unit_of_work.py::TestSQLAlchemyUnitOfWork::test_transaction_rollback_on_exception", "lineno": 61, "outcome": "passed", "keywords": ["test_transaction_rollback_on_exception", "TestSQLAlchemyUnitOfWork", "db_required", "test_unit_of_work.py", "db", "security", "tests", "app", "backend", ""], "setup": {"duration": 0.00024316698545590043, "outcome": "passed"}, "call": {"duration": 0.0006392080103978515, "outcome": "passed", "log": [{"name": "app.infrastructure.persistence.sqlalchemy.unit_of_work", "msg": "Rolling back transaction due to exception: Test exception", "args": null, "levelname": "WARNING", "levelno": 30, "pathname": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/infrastructure/persistence/sqlalchemy/unit_of_work.py", "filename": "unit_of_work.py", "module": "unit_of_work", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 87, "funcName": "__exit__", "created": 1744671642.2216399, "msecs": 221.0, "relativeCreated": 211.95, "thread": 8631733312, "threadName": "MainThread", "processName": "MainProcess", "process": 31202, "taskName": null, "asctime": "2025-04-14 19:00:42"}]}, "teardown": {"duration": 6.53750030323863e-05, "outcome": "passed"}}, {"nodeid": "app/tests/security/db/test_unit_of_work.py::TestSQLAlchemyUnitOfWork::test_nested_transaction_support", "lineno": 81, "outcome": "failed", "keywords": ["test_nested_transaction_support", "TestSQLAlchemyUnitOfWork", "db_required", "test_unit_of_work.py", "db", "security", "tests", "app", "backend", ""], "setup": {"duration": 0.00018154195277020335, "outcome": "passed"}, "call": {"duration": 0.0007345840567722917, "outcome": "failed", "crash": {"path": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/infrastructure/persistence/sqlalchemy/unit_of_work.py", "lineno": 130, "message": "app.domain.exceptions.RepositoryError: No active transaction to commit"}, "traceback": [{"path": "db/test_unit_of_work.py", "lineno": 98, "message": ""}, {"path": "../../infrastructure/persistence/sqlalchemy/unit_of_work.py", "lineno": 130, "message": "RepositoryError"}], "longrepr": "self = <test_unit_of_work.TestSQLAlchemyUnitOfWork object at 0x102c335c0>\nunit_of_work = <app.infrastructure.persistence.sqlalchemy.unit_of_work.SQLAlchemyUnitOfWork object at 0x102d691d0>\nmock_session_factory = (<MagicMock id='4342005248'>, <MagicMock id='4342003232'>)\n\n    def test_nested_transaction_support(self, unit_of_work, mock_session_factory):\n        \"\"\"Test that nested transactions are handled correctly.\n    \n        This is important for complex PHI operations that span multiple repositories.\n        \"\"\"\n        # Arrange\n        _, mock_session = mock_session_factory\n        mock_session.begin.return_value = MagicMock()\n    \n        # Act\n        with unit_of_work:\n            # Outer transaction\n            with unit_of_work.nested():\n                # Inner transaction\n                pass\n    \n>       unit_of_work.commit()\n\ndb/test_unit_of_work.py:98: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <app.infrastructure.persistence.sqlalchemy.unit_of_work.SQLAlchemyUnitOfWork object at 0x102d691d0>\n\n    def commit(self) -> None:\n        \"\"\"\n        Commit the current transaction.\n    \n        Raises:\n            RepositoryError: If the transaction is read-only or no session is active\n        \"\"\"\n        if self._is_read_only:\n            self._session.rollback()\n            raise RepositoryError(\"Cannot commit changes in a read-only transaction\")\n    \n        if self._session is None:\n>           raise RepositoryError(\"No active transaction to commit\")\nE           app.domain.exceptions.RepositoryError: No active transaction to commit\n\n../../infrastructure/persistence/sqlalchemy/unit_of_work.py:130: RepositoryError"}, "teardown": {"duration": 0.00012166699161753058, "outcome": "passed"}}, {"nodeid": "app/tests/security/db/test_unit_of_work.py::TestSQLAlchemyUnitOfWork::test_read_only_transaction", "lineno": 106, "outcome": "passed", "keywords": ["test_read_only_transaction", "TestSQLAlchemyUnitOfWork", "db_required", "test_unit_of_work.py", "db", "security", "tests", "app", "backend", ""], "setup": {"duration": 0.00025983399245887995, "outcome": "passed"}, "call": {"duration": 0.0004627089947462082, "outcome": "passed"}, "teardown": {"duration": 6.824999582022429e-05, "outcome": "passed"}}, {"nodeid": "app/tests/security/db/test_unit_of_work.py::TestSQLAlchemyUnitOfWork::test_read_only_transaction_prevents_commits", "lineno": 123, "outcome": "passed", "keywords": ["test_read_only_transaction_prevents_commits", "TestSQLAlchemyUnitOfWork", "db_required", "test_unit_of_work.py", "db", "security", "tests", "app", "backend", ""], "setup": {"duration": 0.00018924998585134745, "outcome": "passed"}, "call": {"duration": 0.0005252499831840396, "outcome": "passed", "log": [{"name": "app.infrastructure.persistence.sqlalchemy.unit_of_work", "msg": "Rolling back transaction due to exception: Cannot commit changes in a read-only transaction", "args": null, "levelname": "WARNING", "levelno": 30, "pathname": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/infrastructure/persistence/sqlalchemy/unit_of_work.py", "filename": "unit_of_work.py", "module": "unit_of_work", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 87, "funcName": "__exit__", "created": 1744671642.229045, "msecs": 229.0, "relativeCreated": 219.355, "thread": 8631733312, "threadName": "MainThread", "processName": "MainProcess", "process": 31202, "taskName": null, "asctime": "2025-04-14 19:00:42"}]}, "teardown": {"duration": 6.091699469834566e-05, "outcome": "passed"}}, {"nodeid": "app/tests/security/db/test_unit_of_work.py::TestSQLAlchemyUnitOfWork::test_transaction_metadata_for_audit", "lineno": 137, "outcome": "failed", "keywords": ["test_transaction_metadata_for_audit", "TestSQLAlchemyUnitOfWork", "db_required", "test_unit_of_work.py", "db", "security", "tests", "app", "backend", ""], "setup": {"duration": 0.0003667909768410027, "outcome": "passed"}, "call": {"duration": 0.001040290982928127, "outcome": "failed", "crash": {"path": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/infrastructure/persistence/sqlalchemy/unit_of_work.py", "lineno": 130, "message": "app.domain.exceptions.RepositoryError: No active transaction to commit"}, "traceback": [{"path": "db/test_unit_of_work.py", "lineno": 153, "message": ""}, {"path": "../../infrastructure/persistence/sqlalchemy/unit_of_work.py", "lineno": 130, "message": "RepositoryError"}], "longrepr": "self = <test_unit_of_work.TestSQLAlchemyUnitOfWork object at 0x102c9aad0>\nunit_of_work = <app.infrastructure.persistence.sqlalchemy.unit_of_work.SQLAlchemyUnitOfWork object at 0x102d17650>\nmock_session_factory = (<MagicMock id='4343009296'>, <MagicMock id='4343008960'>)\n\n    def test_transaction_metadata_for_audit(self, unit_of_work, mock_session_factory):\n        \"\"\"Test that transaction metadata is captured for HIPAA audit purposes.\"\"\"\n        # Arrange\n        _, mock_session = mock_session_factory\n    \n        # Act\n        with patch(\"app.infrastructure.logging.audit_logger.AuditLogger.log_transaction\") as mock_audit:\n            with unit_of_work:\n                # Set transaction metadata\n                unit_of_work.set_metadata({\n                    \"user_id\": \"provider123\",\n                    \"action\": \"update_patient_record\",\n                    \"patient_id\": \"patient456\",\n                })\n    \n>           unit_of_work.commit()\n\ndb/test_unit_of_work.py:153: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <app.infrastructure.persistence.sqlalchemy.unit_of_work.SQLAlchemyUnitOfWork object at 0x102d17650>\n\n    def commit(self) -> None:\n        \"\"\"\n        Commit the current transaction.\n    \n        Raises:\n            RepositoryError: If the transaction is read-only or no session is active\n        \"\"\"\n        if self._is_read_only:\n            self._session.rollback()\n            raise RepositoryError(\"Cannot commit changes in a read-only transaction\")\n    \n        if self._session is None:\n>           raise RepositoryError(\"No active transaction to commit\")\nE           app.domain.exceptions.RepositoryError: No active transaction to commit\n\n../../infrastructure/persistence/sqlalchemy/unit_of_work.py:130: RepositoryError"}, "teardown": {"duration": 0.00010216597001999617, "outcome": "passed"}}]}