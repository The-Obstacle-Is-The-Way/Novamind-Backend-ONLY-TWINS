{"created": 1744671636.5053172, "duration": 0.04588913917541504, "exitcode": 1, "root": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend", "environment": {}, "summary": {"passed": 8, "failed": 4, "total": 12, "collected": 12}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "app/tests/security/phi/test_phi_code_patterns.py", "type": "Module"}]}, {"nodeid": "app/tests/security/phi/test_phi_code_patterns.py::TestPHIInCodePatterns", "outcome": "passed", "result": [{"nodeid": "app/tests/security/phi/test_phi_code_patterns.py::TestPHIInCodePatterns::test_phi_in_variable_assignment", "type": "Function", "lineno": 28}, {"nodeid": "app/tests/security/phi/test_phi_code_patterns.py::TestPHIInCodePatterns::test_phi_in_api_examples", "type": "Function", "lineno": 55}, {"nodeid": "app/tests/security/phi/test_phi_code_patterns.py::TestPHIInCodePatterns::test_phi_in_test_cases", "type": "Function", "lineno": 98}, {"nodeid": "app/tests/security/phi/test_phi_code_patterns.py::TestPHIInCodePatterns::test_phi_in_logs_and_errors", "type": "Function", "lineno": 141}, {"nodeid": "app/tests/security/phi/test_phi_code_patterns.py::TestPHIInCodePatterns::test_phi_in_comments", "type": "Function", "lineno": 161}, {"nodeid": "app/tests/security/phi/test_phi_code_patterns.py::TestPHIInCodePatterns::test_phi_in_complex_code", "type": "Function", "lineno": 195}, {"nodeid": "app/tests/security/phi/test_phi_code_patterns.py::TestPHIInCodePatterns::test_phi_in_multiline_strings", "type": "Function", "lineno": 241}, {"nodeid": "app/tests/security/phi/test_phi_code_patterns.py::TestPHIInCodePatterns::test_phi_in_html_templates", "type": "Function", "lineno": 276}, {"nodeid": "app/tests/security/phi/test_phi_code_patterns.py::TestPHIInCodePatterns::test_phi_in_database_queries", "type": "Function", "lineno": 315}]}, {"nodeid": "app/tests/security/phi/test_phi_code_patterns.py::TestPHIInSourceFiles", "outcome": "passed", "result": [{"nodeid": "app/tests/security/phi/test_phi_code_patterns.py::TestPHIInSourceFiles::test_python_file_with_phi", "type": "Function", "lineno": 368}, {"nodeid": "app/tests/security/phi/test_phi_code_patterns.py::TestPHIInSourceFiles::test_js_file_with_phi", "type": "Function", "lineno": 417}, {"nodeid": "app/tests/security/phi/test_phi_code_patterns.py::TestPHIInSourceFiles::test_config_file_with_phi", "type": "Function", "lineno": 467}]}, {"nodeid": "app/tests/security/phi/test_phi_code_patterns.py", "outcome": "passed", "result": [{"nodeid": "app/tests/security/phi/test_phi_code_patterns.py::TestPHIInCodePatterns", "type": "Class"}, {"nodeid": "app/tests/security/phi/test_phi_code_patterns.py::TestPHIInSourceFiles", "type": "Class"}]}], "tests": [{"nodeid": "app/tests/security/phi/test_phi_code_patterns.py::TestPHIInCodePatterns::test_phi_in_variable_assignment", "lineno": 28, "outcome": "passed", "keywords": ["test_phi_in_variable_assignment", "TestPHIInCodePatterns", "db_required", "test_phi_code_patterns.py", "phi", "security", "tests", "app", "backend", ""], "setup": {"duration": 0.0032266659545712173, "outcome": "passed", "stdout": "Loaded test environment variables from: /Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/.env.test\n"}, "call": {"duration": 0.0002132919616997242, "outcome": "passed"}, "teardown": {"duration": 7.162499241530895e-05, "outcome": "passed"}}, {"nodeid": "app/tests/security/phi/test_phi_code_patterns.py::TestPHIInCodePatterns::test_phi_in_api_examples", "lineno": 55, "outcome": "passed", "keywords": ["test_phi_in_api_examples", "TestPHIInCodePatterns", "db_required", "test_phi_code_patterns.py", "phi", "security", "tests", "app", "backend", ""], "setup": {"duration": 9.491597302258015e-05, "outcome": "passed"}, "call": {"duration": 0.00019895797595381737, "outcome": "passed"}, "teardown": {"duration": 5.40419714525342e-05, "outcome": "passed"}}, {"nodeid": "app/tests/security/phi/test_phi_code_patterns.py::TestPHIInCodePatterns::test_phi_in_test_cases", "lineno": 98, "outcome": "passed", "keywords": ["test_phi_in_test_cases", "TestPHIInCodePatterns", "db_required", "test_phi_code_patterns.py", "phi", "security", "tests", "app", "backend", ""], "setup": {"duration": 8.450000314041972e-05, "outcome": "passed"}, "call": {"duration": 0.00018699996871873736, "outcome": "passed"}, "teardown": {"duration": 5.133403465151787e-05, "outcome": "passed"}}, {"nodeid": "app/tests/security/phi/test_phi_code_patterns.py::TestPHIInCodePatterns::test_phi_in_logs_and_errors", "lineno": 141, "outcome": "passed", "keywords": ["test_phi_in_logs_and_errors", "TestPHIInCodePatterns", "db_required", "test_phi_code_patterns.py", "phi", "security", "tests", "app", "backend", ""], "setup": {"duration": 7.78749817982316e-05, "outcome": "passed"}, "call": {"duration": 0.00014595803804695606, "outcome": "passed"}, "teardown": {"duration": 4.7749956138432026e-05, "outcome": "passed"}}, {"nodeid": "app/tests/security/phi/test_phi_code_patterns.py::TestPHIInCodePatterns::test_phi_in_comments", "lineno": 161, "outcome": "passed", "keywords": ["test_phi_in_comments", "TestPHIInCodePatterns", "db_required", "test_phi_code_patterns.py", "phi", "security", "tests", "app", "backend", ""], "setup": {"duration": 7.562496466562152e-05, "outcome": "passed"}, "call": {"duration": 0.00016666698502376676, "outcome": "passed"}, "teardown": {"duration": 5.020800745114684e-05, "outcome": "passed"}}, {"nodeid": "app/tests/security/phi/test_phi_code_patterns.py::TestPHIInCodePatterns::test_phi_in_complex_code", "lineno": 195, "outcome": "failed", "keywords": ["test_phi_in_complex_code", "TestPHIInCodePatterns", "db_required", "test_phi_code_patterns.py", "phi", "security", "tests", "app", "backend", ""], "setup": {"duration": 7.43329874239862e-05, "outcome": "passed"}, "call": {"duration": 0.0007084590033628047, "outcome": "failed", "crash": {"path": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/tests/security/phi/test_phi_code_patterns.py", "lineno": 239, "message": "assert 2 >= 4\n +  where 2 = len([PHIMatch(type=SSN, value=[REDACTED], position=641), PHIMatch(type=SSN, value=[REDACTED], position=1343)])"}, "traceback": [{"path": "phi/test_phi_code_patterns.py", "lineno": 239, "message": "AssertionError"}], "longrepr": "self = <test_phi_code_patterns.TestPHIInCodePatterns object at 0x107ad9260>\ndetector = <app.core.utils.validation.PHIDetector object at 0x107b0a9f0>\n\n    def test_phi_in_complex_code(self, detector):\n        \"\"\"Test detection of PHI in more complex, realistic code samples.\"\"\"\n        complex_code = \"\"\"\n    \n                    def process_patient_data(patient_data):\n    \n    \n            \\\"\\\"\\\"Process patient data and store in database.\\\"\\\"\\\"\n            # Validate SSN format\n                        if not is_valid_ssn(patient_data.get('ssn')):\n            # Example of invalid SSN: 123-456-7890 (too many digits)\n            logger.error(f\"Invalid SSN format for patient: {patient_data.get('name')}\")\n            raise ValueError(f\"Invalid SSN: {patient_data.get('ssn')}\")\n    \n            # Process patient data\n                try:\n                    # TODO: Remove hardcoded test data before production\n                        if patient_data.get('ssn') == '123-45-6789':\n                    # This is our test patient (John Smith)\n                    #     return {'status': 'success', 'test_mode': True} # FIXME: return outside function\n    \n                    result = db.patients.insert_one({)\n                    'name': patient_data.get('name'),\n                    'ssn_hash': hash_ssn(patient_data.get('ssn')),\n                    'dob': patient_data.get('dob')\n                    (    })\n    \n                    #     return {'status': 'success', 'id': str(result.inserted_id)} # FIXME: return outside function\n                        except Exception as e:\n            # Try with backup database\n            # Example: If inserting patient John Smith (SSN: 123-45-6789) fails\n            logger.error(f\"Database error: {str(e)}\")\n            #     return {'status': 'error', 'message': str(e)} # FIXME: return outside function\n            \"\"\"\n    \n        # Verify PHI is detected in complex code\n        assert detector.contains_phi(complex_code)\n    \n        # Verify specific PHI instances are detected\n        matches = detector.detect_phi(complex_code)\n        ssn_matches = [m for m in matches if m.phi_type == \"SSN\"]\n        name_matches = [m for m in matches if m.phi_type == \"NAME\"]\n    \n>       assert len(ssn_matches) >= 4  # At least 4 instances of SSN\nE       assert 2 >= 4\nE        +  where 2 = len([PHIMatch(type=SSN, value=[REDACTED], position=641), PHIMatch(type=SSN, value=[REDACTED], position=1343)])\n\nphi/test_phi_code_patterns.py:239: AssertionError"}, "teardown": {"duration": 0.00010000000474974513, "outcome": "passed"}}, {"nodeid": "app/tests/security/phi/test_phi_code_patterns.py::TestPHIInCodePatterns::test_phi_in_multiline_strings", "lineno": 241, "outcome": "passed", "keywords": ["test_phi_in_multiline_strings", "TestPHIInCodePatterns", "db_required", "test_phi_code_patterns.py", "phi", "security", "tests", "app", "backend", ""], "setup": {"duration": 0.00010312499944120646, "outcome": "passed"}, "call": {"duration": 0.00027383299311622977, "outcome": "passed"}, "teardown": {"duration": 5.258398596197367e-05, "outcome": "passed"}}, {"nodeid": "app/tests/security/phi/test_phi_code_patterns.py::TestPHIInCodePatterns::test_phi_in_html_templates", "lineno": 276, "outcome": "passed", "keywords": ["test_phi_in_html_templates", "TestPHIInCodePatterns", "db_required", "test_phi_code_patterns.py", "phi", "security", "tests", "app", "backend", ""], "setup": {"duration": 8.033303311094642e-05, "outcome": "passed"}, "call": {"duration": 0.00018224999075755477, "outcome": "passed"}, "teardown": {"duration": 4.679203266277909e-05, "outcome": "passed"}}, {"nodeid": "app/tests/security/phi/test_phi_code_patterns.py::TestPHIInCodePatterns::test_phi_in_database_queries", "lineno": 315, "outcome": "passed", "keywords": ["test_phi_in_database_queries", "TestPHIInCodePatterns", "db_required", "test_phi_code_patterns.py", "phi", "security", "tests", "app", "backend", ""], "setup": {"duration": 7.595797069370747e-05, "outcome": "passed"}, "call": {"duration": 0.00016158301150426269, "outcome": "passed"}, "teardown": {"duration": 4.791701212525368e-05, "outcome": "passed"}}, {"nodeid": "app/tests/security/phi/test_phi_code_patterns.py::TestPHIInSourceFiles::test_python_file_with_phi", "lineno": 368, "outcome": "failed", "keywords": ["test_python_file_with_phi", "TestPHIInSourceFiles", "test_phi_code_patterns.py", "phi", "security", "tests", "app", "backend", ""], "setup": {"duration": 7.583299884572625e-05, "outcome": "passed"}, "call": {"duration": 0.0012495829723775387, "outcome": "failed", "crash": {"path": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/tests/security/phi/test_phi_code_patterns.py", "lineno": 412, "message": "assert 3 >= 4\n +  where 3 = len([PHIMatch(type=SSN, value=[REDACTED], position=259), PHIMatch(type=SSN, value=[REDACTED], position=358), PHIMatch(type=SSN, value=[REDACTED], position=438)])"}, "traceback": [{"path": "phi/test_phi_code_patterns.py", "lineno": 412, "message": "AssertionError"}], "longrepr": "self = <test_phi_code_patterns.TestPHIInSourceFiles object at 0x107a2afd0>\ndetector = <app.core.utils.validation.PHIDetector object at 0x107ac2750>\n\n        def test_python_file_with_phi(self, detector):\n            \"\"\"Test detection of PHI in Python source files.\"\"\"\n            python_code = \"\"\"\n                        #!/usr/bin/env python3\n                        # Test file with PHI data\n    \n                            def get_test_patient():\n    \n    \n                        \\\"\\\"\\\"Return test patient data.\\\"\\\"\\\"\n    #                             return {\n    \"name\": \"John Smith\",\n    \"ssn\": \"123-45-6789\",\n    \"dob\": \"01/02/1980\"\n    }\n    \n    # TODO: Remove hardcoded SSN before production\n        DEFAULT_SSN = \"123-45-6789\"class Patient:\n            def __init__(self, name=\"John Smith\", ssn=\"123-45-6789\"):\n    \n                self.name = name\n                self.ssn = ssn\n    \n                        if __name__ == \"__main__\":\n                # Test code\n                patient = Patient()\n                print(f\"Patient: {patient.name}, SSN: {patient.ssn}\")\n                \"\"\"\n    \n            path = self._create_temp_file(python_code)\n            try:\n                # Read the file\n                with open(path, 'r') as f:\n                    file_content = f.read()\n    \n                # Verify PHI is detected\n                assert detector.contains_phi(file_content)\n    \n                # Check specific patterns\n                matches = detector.detect_phi(file_content)\n                ssn_matches = [m for m in matches if m.phi_type == \"SSN\"]\n                name_matches = [m for m in matches if m.phi_type == \"NAME\"]\n    \n>               assert len(ssn_matches) >= 4  # At least 4 instances of SSN\nE               assert 3 >= 4\nE                +  where 3 = len([PHIMatch(type=SSN, value=[REDACTED], position=259), PHIMatch(type=SSN, value=[REDACTED], position=358), PHIMatch(type=SSN, value=[REDACTED], position=438)])\n\nphi/test_phi_code_patterns.py:412: AssertionError"}, "teardown": {"duration": 9.604200022295117e-05, "outcome": "passed"}}, {"nodeid": "app/tests/security/phi/test_phi_code_patterns.py::TestPHIInSourceFiles::test_js_file_with_phi", "lineno": 417, "outcome": "failed", "keywords": ["test_js_file_with_phi", "TestPHIInSourceFiles", "test_phi_code_patterns.py", "phi", "security", "tests", "app", "backend", ""], "setup": {"duration": 0.00011916604125872254, "outcome": "passed"}, "call": {"duration": 0.0008337500039488077, "outcome": "failed", "crash": {"path": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/tests/security/phi/test_phi_code_patterns.py", "lineno": 462, "message": "assert 3 >= 4\n +  where 3 = len([PHIMatch(type=SSN, value=[REDACTED], position=416), PHIMatch(type=SSN, value=[REDACTED], position=582), PHIMatch(type=SSN, value=[REDACTED], position=664)])"}, "traceback": [{"path": "phi/test_phi_code_patterns.py", "lineno": 462, "message": "AssertionError"}], "longrepr": "self = <test_phi_code_patterns.TestPHIInSourceFiles object at 0x107a2b250>\ndetector = <app.core.utils.validation.PHIDetector object at 0x107ad2c60>\n\n    def test_js_file_with_phi(self, detector):\n        \"\"\"Test detection of PHI in JavaScript source files.\"\"\"\n        js_code = \"\"\"\n                        // Test file with PHI data\n    \n                        function getTestPatient() {\n                        /**\n                        * Return test patient data\n                        * @returns {Object} Patient data\n                        */\n                        #             return { # FIXME: return outside function\n                        name: \"John Smith\",\n                        ssn: \"123-45-6789\",\n                        dob: \"01/02/1980\"\n            };\n        }\n    \n        // TODO: Remove hardcoded SSN before production\n        const DEFAULT_SSN = \"123-45-6789\";class Patient {:\n            constructor(name = \"John Smith\", ssn = \"123-45-6789\") {\n            this.name = name;\n            this.ssn = ssn;\n            }\n        }\n    \n        // Test code\n        const patient = new Patient();\n        console.log(`Patient: ${patient.name}, SSN: ${patient.ssn}`);\n        \"\"\"\n    \n        path = self._create_temp_file(js_code, \".js\")\n        try:\n            # Read the file\n            with open(path, 'r') as f:\n                file_content = f.read()\n    \n            # Verify PHI is detected\n            assert detector.contains_phi(file_content)\n    \n            # Check specific patterns\n            matches = detector.detect_phi(file_content)\n            ssn_matches = [m for m in matches if m.phi_type == \"SSN\"]\n            name_matches = [m for m in matches if m.phi_type == \"NAME\"]\n    \n>           assert len(ssn_matches) >= 4\nE           assert 3 >= 4\nE            +  where 3 = len([PHIMatch(type=SSN, value=[REDACTED], position=416), PHIMatch(type=SSN, value=[REDACTED], position=582), PHIMatch(type=SSN, value=[REDACTED], position=664)])\n\nphi/test_phi_code_patterns.py:462: AssertionError"}, "teardown": {"duration": 6.799999391660094e-05, "outcome": "passed"}}, {"nodeid": "app/tests/security/phi/test_phi_code_patterns.py::TestPHIInSourceFiles::test_config_file_with_phi", "lineno": 467, "outcome": "failed", "keywords": ["test_config_file_with_phi", "TestPHIInSourceFiles", "test_phi_code_patterns.py", "phi", "security", "tests", "app", "backend", ""], "setup": {"duration": 9.316700743511319e-05, "outcome": "passed"}, "call": {"duration": 0.0009679169743321836, "outcome": "failed", "crash": {"path": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/tests/security/phi/test_phi_code_patterns.py", "lineno": 501, "message": "assert 0 >= 1\n +  where 0 = len([])"}, "traceback": [{"path": "phi/test_phi_code_patterns.py", "lineno": 501, "message": "AssertionError"}], "longrepr": "self = <test_phi_code_patterns.TestPHIInSourceFiles object at 0x107b18770>\ndetector = <app.core.utils.validation.PHIDetector object at 0x107ad34d0>\n\n    def test_config_file_with_phi(self, detector):\n        \"\"\"Test detection of PHI in configuration files.\"\"\"\n        config_content = \"\"\"\n                        [database]\n                        host = localhost\n                        port = 5432\n                        username = admin\n                        password = password123\n    \n                        [test_data]\n                        # Test patient data for integration tests\n                        patient_name = John Smith\n                        patient_ssn = 123-45-6789\n                        patient_dob = 01/02/1980\n                        \"\"\"\n    \n        path = self._create_temp_file(config_content, \".ini\")\n        try:\n            # Read the file\n            with open(path, 'r') as f:\n                file_content = f.read()\n    \n            # Verify PHI is detected\n            assert detector.contains_phi(file_content)\n    \n            # Check specific patterns\n            matches = detector.detect_phi(file_content)\n            ssn_matches = [m for m in matches if m.phi_type == \"SSN\"]\n            name_matches = [m for m in matches if m.phi_type == \"NAME\"]\n            dob_matches = [m for m in matches if m.phi_type == \"DATE\"]\n    \n            assert len(ssn_matches) >= 1\n            assert len(name_matches) >= 1\n>           assert len(dob_matches) >= 1\nE           assert 0 >= 1\nE            +  where 0 = len([])\n\nphi/test_phi_code_patterns.py:501: AssertionError"}, "teardown": {"duration": 0.0001318749855272472, "outcome": "passed"}}]}