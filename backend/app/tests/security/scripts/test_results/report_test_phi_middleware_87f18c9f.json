{"created": 1744671634.563613, "duration": 0.1730508804321289, "exitcode": 1, "root": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend", "environment": {}, "summary": {"passed": 5, "failed": 3, "total": 8, "collected": 8}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "app/tests/security/phi/test_phi_middleware.py", "type": "Module"}]}, {"nodeid": "app/tests/security/phi/test_phi_middleware.py::TestPHIMiddleware", "outcome": "passed", "result": [{"nodeid": "app/tests/security/phi/test_phi_middleware.py::TestPHIMiddleware::test_exclude_path", "type": "Coroutine", "lineno": 39}, {"nodeid": "app/tests/security/phi/test_phi_middleware.py::TestPHIMiddleware::test_sanitize_request_with_phi", "type": "Coroutine", "lineno": 54}, {"nodeid": "app/tests/security/phi/test_phi_middleware.py::TestPHIMiddleware::test_sanitize_response_with_phi", "type": "Coroutine", "lineno": 79}, {"nodeid": "app/tests/security/phi/test_phi_middleware.py::TestPHIMiddleware::test_whitelist_patterns", "type": "Coroutine", "lineno": 115}, {"nodeid": "app/tests/security/phi/test_phi_middleware.py::TestPHIMiddleware::test_audit_mode", "type": "Coroutine", "lineno": 161}, {"nodeid": "app/tests/security/phi/test_phi_middleware.py::TestPHIMiddleware::test_sanitize_non_json_response", "type": "Coroutine", "lineno": 201}, {"nodeid": "app/tests/security/phi/test_phi_middleware.py::TestPHIMiddleware::test_sanitize_nested_json", "type": "Coroutine", "lineno": 225}, {"nodeid": "app/tests/security/phi/test_phi_middleware.py::TestPHIMiddleware::test_add_phi_middleware", "type": "Function", "lineno": 284}]}, {"nodeid": "app/tests/security/phi/test_phi_middleware.py", "outcome": "passed", "result": [{"nodeid": "app/tests/security/phi/test_phi_middleware.py::TestPHIMiddleware", "type": "Class"}]}], "tests": [{"nodeid": "app/tests/security/phi/test_phi_middleware.py::TestPHIMiddleware::test_exclude_path", "lineno": 39, "outcome": "passed", "keywords": ["test_exclude_path", "asyncio", "pytestmark", "TestPHIMiddleware", "db_required", "test_phi_middleware.py", "phi", "security", "tests", "app", "backend", ""], "setup": {"duration": 0.00309329095762223, "outcome": "passed", "stdout": "Loaded test environment variables from: /Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/.env.test\n"}, "call": {"duration": 0.0007452080026268959, "outcome": "passed"}, "teardown": {"duration": 0.00021429202752187848, "outcome": "passed"}}, {"nodeid": "app/tests/security/phi/test_phi_middleware.py::TestPHIMiddleware::test_sanitize_request_with_phi", "lineno": 54, "outcome": "passed", "keywords": ["test_sanitize_request_with_phi", "asyncio", "pytestmark", "TestPHIMiddleware", "db_required", "test_phi_middleware.py", "phi", "security", "tests", "app", "backend", ""], "setup": {"duration": 0.0002554579987190664, "outcome": "passed"}, "call": {"duration": 0.0008912499761208892, "outcome": "passed"}, "teardown": {"duration": 0.00015558302402496338, "outcome": "passed"}}, {"nodeid": "app/tests/security/phi/test_phi_middleware.py::TestPHIMiddleware::test_sanitize_response_with_phi", "lineno": 79, "outcome": "failed", "keywords": ["test_sanitize_response_with_phi", "asyncio", "pytestmark", "TestPHIMiddleware", "db_required", "test_phi_middleware.py", "phi", "security", "tests", "app", "backend", ""], "setup": {"duration": 0.00021737499628216028, "outcome": "passed"}, "call": {"duration": 0.0005708340322598815, "outcome": "failed", "crash": {"path": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/tests/security/phi/test_phi_middleware.py", "lineno": 114, "message": "AssertionError: assert '[REDACTED]' == '2023-04-15'\n  \n  - 2023-04-15\n  + [REDACTED]"}, "traceback": [{"path": "phi/test_phi_middleware.py", "lineno": 114, "message": "AssertionError"}], "longrepr": "self = <test_phi_middleware.TestPHIMiddleware object at 0x106f863f0>\n\n    @pytest.mark.asyncio\n    async def test_sanitize_response_with_phi(self):\n        \"\"\"Test that responses with PHI are sanitized.\"\"\"\n        # Mock request\n        request = self._create_mock_request(\"/api/patients\")\n    \n        # Mock response with PHI\n        phi_response = {\n            \"patient\": {\"name\": \"John Doe\", \"ssn\": \"123-45-6789\"},\n            \"appointment\": {\"date\": \"2023-04-15\"}\n        }\n        response_body = json.dumps(phi_response).encode('utf-8')\n        response = Response(\n            content=response_body,\n            status_code=200,\n            headers={\"content-type\": \"application/json\"}\n        )\n    \n        # Mock call_next to return the response\n        call_next = AsyncMock()\n        call_next.return_value = response\n    \n        # Process the request and get sanitized response\n        sanitized_response = await self.middleware.dispatch(request, call_next)\n    \n        # Check that response body was sanitized\n        sanitized_body = sanitized_response.body.decode('utf-8')\n        sanitized_data = json.loads(sanitized_body)\n    \n        # Verify PHI was redacted\n        assert \"[REDACTED]\" in sanitized_body\n        assert sanitized_data[\"patient\"][\"name\"] == \"[REDACTED]\"\n        assert sanitized_data[\"patient\"][\"ssn\"] == \"[REDACTED]\"\n        # Non-PHI data should remain untouched\n>       assert sanitized_data[\"appointment\"][\"date\"] == \"2023-04-15\"\nE       AssertionError: assert '[REDACTED]' == '2023-04-15'\nE         \nE         - 2023-04-15\nE         + [REDACTED]\n\nphi/test_phi_middleware.py:114: AssertionError"}, "teardown": {"duration": 0.000305499997921288, "outcome": "passed"}}, {"nodeid": "app/tests/security/phi/test_phi_middleware.py::TestPHIMiddleware::test_whitelist_patterns", "lineno": 115, "outcome": "failed", "keywords": ["test_whitelist_patterns", "asyncio", "pytestmark", "TestPHIMiddleware", "db_required", "test_phi_middleware.py", "phi", "security", "tests", "app", "backend", ""], "setup": {"duration": 0.0002914590295404196, "outcome": "passed"}, "call": {"duration": 0.0006740840035490692, "outcome": "failed", "crash": {"path": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/tests/security/phi/test_phi_middleware.py", "lineno": 157, "message": "AssertionError: assert '[REDACTED]' == 'John Doe'\n  \n  - John Doe\n  + [REDACTED]"}, "traceback": [{"path": "phi/test_phi_middleware.py", "lineno": 157, "message": "AssertionError"}], "longrepr": "self = <test_phi_middleware.TestPHIMiddleware object at 0x106f86650>\n\n    @pytest.mark.asyncio\n    async def test_whitelist_patterns(self):\n        \"\"\"Test that whitelisted patterns are not sanitized.\"\"\"\n        # Create middleware with whitelist\n        middleware = PHIMiddleware(\n            self.app,\n            phi_detector=self.phi_detector,\n            whitelist_patterns={\n                \"/api/allowed\": [\"name\"],\n                \"/api/allowed/*\": [\"ssn\"]\n            }\n        )\n    \n        # Mock request\n        request = self._create_mock_request(\"/api/allowed/123\")\n    \n        # Mock response with PHI in whitelisted fields\n        phi_response = {\n            \"name\": \"John Doe\",  # Should not be sanitized (whitelisted)\n            \"ssn\": \"123-45-6789\",  # Should not be sanitized (whitelisted)\n            \"address\": \"123 Main St, Springfield\"  # Should be sanitized\n        }\n        response_body = json.dumps(phi_response).encode('utf-8')\n        response = Response(\n            content=response_body,\n            status_code=200,\n            headers={\"content-type\": \"application/json\"}\n        )\n    \n        # Mock call_next\n        call_next = AsyncMock()\n        call_next.return_value = response\n    \n        # Process the request\n        sanitized_response = await middleware.dispatch(request, call_next)\n    \n        # Check response body\n        sanitized_body = sanitized_response.body.decode('utf-8')\n        sanitized_data = json.loads(sanitized_body)\n    \n        # Verify whitelisted fields were not sanitized\n>       assert sanitized_data[\"name\"] == \"John Doe\"\nE       AssertionError: assert '[REDACTED]' == 'John Doe'\nE         \nE         - John Doe\nE         + [REDACTED]\n\nphi/test_phi_middleware.py:157: AssertionError"}, "teardown": {"duration": 0.0002495000371709466, "outcome": "passed"}}, {"nodeid": "app/tests/security/phi/test_phi_middleware.py::TestPHIMiddleware::test_audit_mode", "lineno": 161, "outcome": "passed", "keywords": ["test_audit_mode", "asyncio", "pytestmark", "TestPHIMiddleware", "db_required", "test_phi_middleware.py", "phi", "security", "tests", "app", "backend", ""], "setup": {"duration": 0.00028845801716670394, "outcome": "passed"}, "call": {"duration": 0.0007547920104116201, "outcome": "passed"}, "teardown": {"duration": 0.000155624991748482, "outcome": "passed"}}, {"nodeid": "app/tests/security/phi/test_phi_middleware.py::TestPHIMiddleware::test_sanitize_non_json_response", "lineno": 201, "outcome": "passed", "keywords": ["test_sanitize_non_json_response", "asyncio", "pytestmark", "TestPHIMiddleware", "db_required", "test_phi_middleware.py", "phi", "security", "tests", "app", "backend", ""], "setup": {"duration": 0.00021600001491606236, "outcome": "passed"}, "call": {"duration": 0.0004130000015720725, "outcome": "passed"}, "teardown": {"duration": 0.00013770797522738576, "outcome": "passed"}}, {"nodeid": "app/tests/security/phi/test_phi_middleware.py::TestPHIMiddleware::test_sanitize_nested_json", "lineno": 225, "outcome": "failed", "keywords": ["test_sanitize_nested_json", "asyncio", "pytestmark", "TestPHIMiddleware", "db_required", "test_phi_middleware.py", "phi", "security", "tests", "app", "backend", ""], "setup": {"duration": 0.0002079589758068323, "outcome": "passed"}, "call": {"duration": 0.0006180410273373127, "outcome": "failed", "crash": {"path": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/tests/security/phi/test_phi_middleware.py", "lineno": 283, "message": "AssertionError: assert '[REDACTED]' == 'Health Co'\n  \n  - Health Co\n  + [REDACTED]"}, "traceback": [{"path": "phi/test_phi_middleware.py", "lineno": 283, "message": "AssertionError"}], "longrepr": "self = <test_phi_middleware.TestPHIMiddleware object at 0x106fc68b0>\n\n    @pytest.mark.asyncio\n    async def test_sanitize_nested_json(self):\n        \"\"\"Test that deeply nested JSON is properly sanitized.\"\"\"\n        # Mock request\n        request = self._create_mock_request(\"/api/patients\")\n    \n        # Mock deeply nested response with PHI\n        phi_response = {\n            \"data\": {\n                \"patients\": [\n                    {\n                        \"profile\": {\n                            \"personal\": {\n                                \"name\": \"John Doe\",\n                                \"contact\": {\n                                    \"email\": \"john.doe@example.com\",\n                                    \"phone\": \"555-123-4567\"\n                                }\n                            }\n                        },\n                        \"medical\": {\n                            \"ssn\": \"123-45-6789\",\n                            \"insurance\": {\n                                \"policy\": \"12345\",\n                                \"provider\": \"Health Co\"\n                            }\n                        }\n                    }\n                ]\n            }\n        }\n        response_body = json.dumps(phi_response).encode('utf-8')\n        response = Response(\n            content=response_body,\n            status_code=200,\n            headers={\"content-type\": \"application/json\"}\n        )\n    \n        # Mock call_next\n        call_next = AsyncMock()\n        call_next.return_value = response\n    \n        # Process the request\n        sanitized_response = await self.middleware.dispatch(request, call_next)\n    \n        # Check response body\n        sanitized_body = sanitized_response.body.decode('utf-8')\n        sanitized_data = json.loads(sanitized_body)\n    \n        # Verify nested PHI was sanitized\n        patient = sanitized_data[\"data\"][\"patients\"][0]\n        assert patient[\"profile\"][\"personal\"][\"name\"] == \"[REDACTED]\"\n        assert patient[\"profile\"][\"personal\"][\"contact\"][\"email\"] == \"[REDACTED]\"\n        assert patient[\"profile\"][\"personal\"][\"contact\"][\"phone\"] == \"[REDACTED]\"\n        assert patient[\"medical\"][\"ssn\"] == \"[REDACTED]\"\n        # Non-PHI data should be unchanged\n        assert patient[\"medical\"][\"insurance\"][\"policy\"] == \"12345\"\n>       assert patient[\"medical\"][\"insurance\"][\"provider\"] == \"Health Co\"\nE       AssertionError: assert '[REDACTED]' == 'Health Co'\nE         \nE         - Health Co\nE         + [REDACTED]\n\nphi/test_phi_middleware.py:283: AssertionError"}, "teardown": {"duration": 0.00021579203894361854, "outcome": "passed"}}, {"nodeid": "app/tests/security/phi/test_phi_middleware.py::TestPHIMiddleware::test_add_phi_middleware", "lineno": 284, "outcome": "passed", "keywords": ["test_add_phi_middleware", "TestPHIMiddleware", "db_required", "test_phi_middleware.py", "phi", "security", "tests", "app", "backend", ""], "setup": {"duration": 0.00016825000056996942, "outcome": "passed"}, "call": {"duration": 0.00043645803816616535, "outcome": "passed", "log": [{"name": "app.infrastructure.security.phi_middleware", "msg": "PHI middleware added to FastAPI application (audit_mode: True, excluded paths: 8)", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/infrastructure/security/phi_middleware.py", "filename": "phi_middleware.py", "module": "phi_middleware", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 317, "funcName": "add_phi_middleware", "created": 1744671634.563193, "msecs": 563.0, "relativeCreated": 255.023, "thread": 8631733312, "threadName": "MainThread", "processName": "MainProcess", "process": 31117, "taskName": null, "asctime": "2025-04-14 19:00:34"}]}, "teardown": {"duration": 9.029201464727521e-05, "outcome": "passed"}}]}