{"created": 1744671632.945886, "duration": 0.11628007888793945, "exitcode": 1, "root": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend", "environment": {}, "summary": {"error": 11, "total": 11, "collected": 11}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "app/tests/security/jwt/test_jwt_service.py", "type": "Module"}]}, {"nodeid": "app/tests/security/jwt/test_jwt_service.py::TestJWTService", "outcome": "passed", "result": [{"nodeid": "app/tests/security/jwt/test_jwt_service.py::TestJWTService::test_create_access_token_no_phi", "type": "Function", "lineno": 50}, {"nodeid": "app/tests/security/jwt/test_jwt_service.py::TestJWTService::test_create_access_token_expiration", "type": "Function", "lineno": 68}, {"nodeid": "app/tests/security/jwt/test_jwt_service.py::TestJWTService::test_verify_token_valid", "type": "Function", "lineno": 83}, {"nodeid": "app/tests/security/jwt/test_jwt_service.py::TestJWTService::test_verify_token_expired", "type": "Function", "lineno": 95}, {"nodeid": "app/tests/security/jwt/test_jwt_service.py::TestJWTService::test_verify_token_invalid_signature", "type": "Function", "lineno": 108}, {"nodeid": "app/tests/security/jwt/test_jwt_service.py::TestJWTService::test_verify_token_invalid_format", "type": "Function", "lineno": 120}, {"nodeid": "app/tests/security/jwt/test_jwt_service.py::TestJWTService::test_admin_role_permissions", "type": "Function", "lineno": 129}, {"nodeid": "app/tests/security/jwt/test_jwt_service.py::TestJWTService::test_provider_role_permissions", "type": "Function", "lineno": 149}, {"nodeid": "app/tests/security/jwt/test_jwt_service.py::TestJWTService::test_patient_role_permissions", "type": "Function", "lineno": 161}, {"nodeid": "app/tests/security/jwt/test_jwt_service.py::TestJWTService::test_refresh_token_rotation", "type": "Function", "lineno": 173}, {"nodeid": "app/tests/security/jwt/test_jwt_service.py::TestJWTService::test_refresh_token_family_tracking", "type": "Function", "lineno": 190}]}, {"nodeid": "app/tests/security/jwt/test_jwt_service.py", "outcome": "passed", "result": [{"nodeid": "app/tests/security/jwt/test_jwt_service.py::TestJWTService", "type": "Class"}]}], "tests": [{"nodeid": "app/tests/security/jwt/test_jwt_service.py::TestJWTService::test_create_access_token_no_phi", "lineno": 50, "outcome": "error", "keywords": ["test_create_access_token_no_phi", "TestJWTService", "venv_only", "test_jwt_service.py", "jwt", "security", "tests", "app", "backend", ""], "setup": {"duration": 0.0014620000147260725, "outcome": "failed", "crash": {"path": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/tests/security/jwt/test_jwt_service.py", "lineno": 31, "message": "TypeError: JWTService.__init__() missing 1 required positional argument: 'secret_key'"}, "traceback": [{"path": "jwt/test_jwt_service.py", "lineno": 31, "message": "TypeError"}], "stdout": "Loaded test environment variables from: /Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/.env.test\n", "longrepr": "self = <test_jwt_service.TestJWTService object at 0x108501310>\n\n    @pytest.fixture\n    def jwt_service(self):\n        \"\"\"Create a JWTService instance for testing.\"\"\"\n>       return JWTService()\nE       TypeError: JWTService.__init__() missing 1 required positional argument: 'secret_key'\n\njwt/test_jwt_service.py:31: TypeError"}, "teardown": {"duration": 0.00014404201647266746, "outcome": "passed"}}, {"nodeid": "app/tests/security/jwt/test_jwt_service.py::TestJWTService::test_create_access_token_expiration", "lineno": 68, "outcome": "error", "keywords": ["test_create_access_token_expiration", "TestJWTService", "venv_only", "test_jwt_service.py", "jwt", "security", "tests", "app", "backend", ""], "setup": {"duration": 0.0001611249754205346, "outcome": "failed", "crash": {"path": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/tests/security/jwt/test_jwt_service.py", "lineno": 31, "message": "TypeError: JWTService.__init__() missing 1 required positional argument: 'secret_key'"}, "traceback": [{"path": "jwt/test_jwt_service.py", "lineno": 31, "message": "TypeError"}], "longrepr": "self = <test_jwt_service.TestJWTService object at 0x108501950>\n\n    @pytest.fixture\n    def jwt_service(self):\n        \"\"\"Create a JWTService instance for testing.\"\"\"\n>       return JWTService()\nE       TypeError: JWTService.__init__() missing 1 required positional argument: 'secret_key'\n\njwt/test_jwt_service.py:31: TypeError"}, "teardown": {"duration": 9.324995335191488e-05, "outcome": "passed"}}, {"nodeid": "app/tests/security/jwt/test_jwt_service.py::TestJWTService::test_verify_token_valid", "lineno": 83, "outcome": "error", "keywords": ["test_verify_token_valid", "TestJWTService", "venv_only", "test_jwt_service.py", "jwt", "security", "tests", "app", "backend", ""], "setup": {"duration": 0.00010537501657381654, "outcome": "failed", "crash": {"path": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/tests/security/jwt/test_jwt_service.py", "lineno": 31, "message": "TypeError: JWTService.__init__() missing 1 required positional argument: 'secret_key'"}, "traceback": [{"path": "jwt/test_jwt_service.py", "lineno": 31, "message": "TypeError"}], "longrepr": "self = <test_jwt_service.TestJWTService object at 0x1085442b0>\n\n    @pytest.fixture\n    def jwt_service(self):\n        \"\"\"Create a JWTService instance for testing.\"\"\"\n>       return JWTService()\nE       TypeError: JWTService.__init__() missing 1 required positional argument: 'secret_key'\n\njwt/test_jwt_service.py:31: TypeError"}, "teardown": {"duration": 5.9165991842746735e-05, "outcome": "passed"}}, {"nodeid": "app/tests/security/jwt/test_jwt_service.py::TestJWTService::test_verify_token_expired", "lineno": 95, "outcome": "error", "keywords": ["test_verify_token_expired", "TestJWTService", "venv_only", "test_jwt_service.py", "jwt", "security", "tests", "app", "backend", ""], "setup": {"duration": 9.245797991752625e-05, "outcome": "failed", "crash": {"path": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/tests/security/jwt/test_jwt_service.py", "lineno": 31, "message": "TypeError: JWTService.__init__() missing 1 required positional argument: 'secret_key'"}, "traceback": [{"path": "jwt/test_jwt_service.py", "lineno": 31, "message": "TypeError"}], "longrepr": "self = <test_jwt_service.TestJWTService object at 0x108544770>\n\n    @pytest.fixture\n    def jwt_service(self):\n        \"\"\"Create a JWTService instance for testing.\"\"\"\n>       return JWTService()\nE       TypeError: JWTService.__init__() missing 1 required positional argument: 'secret_key'\n\njwt/test_jwt_service.py:31: TypeError"}, "teardown": {"duration": 0.00010799994925037026, "outcome": "passed"}}, {"nodeid": "app/tests/security/jwt/test_jwt_service.py::TestJWTService::test_verify_token_invalid_signature", "lineno": 108, "outcome": "error", "keywords": ["test_verify_token_invalid_signature", "TestJWTService", "venv_only", "test_jwt_service.py", "jwt", "security", "tests", "app", "backend", ""], "setup": {"duration": 0.00012562499614432454, "outcome": "failed", "crash": {"path": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/tests/security/jwt/test_jwt_service.py", "lineno": 31, "message": "TypeError: JWTService.__init__() missing 1 required positional argument: 'secret_key'"}, "traceback": [{"path": "jwt/test_jwt_service.py", "lineno": 31, "message": "TypeError"}], "longrepr": "self = <test_jwt_service.TestJWTService object at 0x1085703b0>\n\n    @pytest.fixture\n    def jwt_service(self):\n        \"\"\"Create a JWTService instance for testing.\"\"\"\n>       return JWTService()\nE       TypeError: JWTService.__init__() missing 1 required positional argument: 'secret_key'\n\njwt/test_jwt_service.py:31: TypeError"}, "teardown": {"duration": 7.154099876061082e-05, "outcome": "passed"}}, {"nodeid": "app/tests/security/jwt/test_jwt_service.py::TestJWTService::test_verify_token_invalid_format", "lineno": 120, "outcome": "error", "keywords": ["test_verify_token_invalid_format", "TestJWTService", "venv_only", "test_jwt_service.py", "jwt", "security", "tests", "app", "backend", ""], "setup": {"duration": 0.00010404200293123722, "outcome": "failed", "crash": {"path": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/tests/security/jwt/test_jwt_service.py", "lineno": 31, "message": "TypeError: JWTService.__init__() missing 1 required positional argument: 'secret_key'"}, "traceback": [{"path": "jwt/test_jwt_service.py", "lineno": 31, "message": "TypeError"}], "longrepr": "self = <test_jwt_service.TestJWTService object at 0x1084fd040>\n\n    @pytest.fixture\n    def jwt_service(self):\n        \"\"\"Create a JWTService instance for testing.\"\"\"\n>       return JWTService()\nE       TypeError: JWTService.__init__() missing 1 required positional argument: 'secret_key'\n\njwt/test_jwt_service.py:31: TypeError"}, "teardown": {"duration": 0.0001080420333892107, "outcome": "passed"}}, {"nodeid": "app/tests/security/jwt/test_jwt_service.py::TestJWTService::test_admin_role_permissions", "lineno": 129, "outcome": "error", "keywords": ["test_admin_role_permissions", "TestJWTService", "venv_only", "test_jwt_service.py", "jwt", "security", "tests", "app", "backend", ""], "setup": {"duration": 0.00012325000716373324, "outcome": "failed", "crash": {"path": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/tests/security/jwt/test_jwt_service.py", "lineno": 31, "message": "TypeError: JWTService.__init__() missing 1 required positional argument: 'secret_key'"}, "traceback": [{"path": "jwt/test_jwt_service.py", "lineno": 31, "message": "TypeError"}], "longrepr": "self = <test_jwt_service.TestJWTService object at 0x1084fd260>\n\n    @pytest.fixture\n    def jwt_service(self):\n        \"\"\"Create a JWTService instance for testing.\"\"\"\n>       return JWTService()\nE       TypeError: JWTService.__init__() missing 1 required positional argument: 'secret_key'\n\njwt/test_jwt_service.py:31: TypeError"}, "teardown": {"duration": 7.89170153439045e-05, "outcome": "passed"}}, {"nodeid": "app/tests/security/jwt/test_jwt_service.py::TestJWTService::test_provider_role_permissions", "lineno": 149, "outcome": "error", "keywords": ["test_provider_role_permissions", "TestJWTService", "venv_only", "test_jwt_service.py", "jwt", "security", "tests", "app", "backend", ""], "setup": {"duration": 0.00010983296670019627, "outcome": "failed", "crash": {"path": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/tests/security/jwt/test_jwt_service.py", "lineno": 31, "message": "TypeError: JWTService.__init__() missing 1 required positional argument: 'secret_key'"}, "traceback": [{"path": "jwt/test_jwt_service.py", "lineno": 31, "message": "TypeError"}], "longrepr": "self = <test_jwt_service.TestJWTService object at 0x108525e50>\n\n    @pytest.fixture\n    def jwt_service(self):\n        \"\"\"Create a JWTService instance for testing.\"\"\"\n>       return JWTService()\nE       TypeError: JWTService.__init__() missing 1 required positional argument: 'secret_key'\n\njwt/test_jwt_service.py:31: TypeError"}, "teardown": {"duration": 6.170797860249877e-05, "outcome": "passed"}}, {"nodeid": "app/tests/security/jwt/test_jwt_service.py::TestJWTService::test_patient_role_permissions", "lineno": 161, "outcome": "error", "keywords": ["test_patient_role_permissions", "TestJWTService", "venv_only", "test_jwt_service.py", "jwt", "security", "tests", "app", "backend", ""], "setup": {"duration": 9.420898277312517e-05, "outcome": "failed", "crash": {"path": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/tests/security/jwt/test_jwt_service.py", "lineno": 31, "message": "TypeError: JWTService.__init__() missing 1 required positional argument: 'secret_key'"}, "traceback": [{"path": "jwt/test_jwt_service.py", "lineno": 31, "message": "TypeError"}], "longrepr": "self = <test_jwt_service.TestJWTService object at 0x108525c50>\n\n    @pytest.fixture\n    def jwt_service(self):\n        \"\"\"Create a JWTService instance for testing.\"\"\"\n>       return JWTService()\nE       TypeError: JWTService.__init__() missing 1 required positional argument: 'secret_key'\n\njwt/test_jwt_service.py:31: TypeError"}, "teardown": {"duration": 9.191699791699648e-05, "outcome": "passed"}}, {"nodeid": "app/tests/security/jwt/test_jwt_service.py::TestJWTService::test_refresh_token_rotation", "lineno": 173, "outcome": "error", "keywords": ["test_refresh_token_rotation", "TestJWTService", "venv_only", "test_jwt_service.py", "jwt", "security", "tests", "app", "backend", ""], "setup": {"duration": 0.00011100003030151129, "outcome": "failed", "crash": {"path": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/tests/security/jwt/test_jwt_service.py", "lineno": 31, "message": "TypeError: JWTService.__init__() missing 1 required positional argument: 'secret_key'"}, "traceback": [{"path": "jwt/test_jwt_service.py", "lineno": 31, "message": "TypeError"}], "longrepr": "self = <test_jwt_service.TestJWTService object at 0x1084ae4e0>\n\n    @pytest.fixture\n    def jwt_service(self):\n        \"\"\"Create a JWTService instance for testing.\"\"\"\n>       return JWTService()\nE       TypeError: JWTService.__init__() missing 1 required positional argument: 'secret_key'\n\njwt/test_jwt_service.py:31: TypeError"}, "teardown": {"duration": 6.77499920129776e-05, "outcome": "passed"}}, {"nodeid": "app/tests/security/jwt/test_jwt_service.py::TestJWTService::test_refresh_token_family_tracking", "lineno": 190, "outcome": "error", "keywords": ["test_refresh_token_family_tracking", "TestJWTService", "venv_only", "test_jwt_service.py", "jwt", "security", "tests", "app", "backend", ""], "setup": {"duration": 0.00011262501357123256, "outcome": "failed", "crash": {"path": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/tests/security/jwt/test_jwt_service.py", "lineno": 31, "message": "TypeError: JWTService.__init__() missing 1 required positional argument: 'secret_key'"}, "traceback": [{"path": "jwt/test_jwt_service.py", "lineno": 31, "message": "TypeError"}], "longrepr": "self = <test_jwt_service.TestJWTService object at 0x1084ae8a0>\n\n    @pytest.fixture\n    def jwt_service(self):\n        \"\"\"Create a JWTService instance for testing.\"\"\"\n>       return JWTService()\nE       TypeError: JWTService.__init__() missing 1 required positional argument: 'secret_key'\n\njwt/test_jwt_service.py:31: TypeError"}, "teardown": {"duration": 0.00010025000665336847, "outcome": "passed"}}], "warnings": [{"message": "Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'env'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/venv_py313/lib/python3.13/site-packages/pydantic/fields.py", "lineno": 1076}, {"message": "Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'env'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/venv_py313/lib/python3.13/site-packages/pydantic/fields.py", "lineno": 1076}, {"message": "Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'env'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/venv_py313/lib/python3.13/site-packages/pydantic/fields.py", "lineno": 1076}, {"message": "Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'env'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/venv_py313/lib/python3.13/site-packages/pydantic/fields.py", "lineno": 1076}, {"message": "Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'env'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/venv_py313/lib/python3.13/site-packages/pydantic/fields.py", "lineno": 1076}, {"message": "Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'env'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/venv_py313/lib/python3.13/site-packages/pydantic/fields.py", "lineno": 1076}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/core/config.py", "lineno": 51}, {"message": "Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'env'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/venv_py313/lib/python3.13/site-packages/pydantic/fields.py", "lineno": 1076}, {"message": "Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'env'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/venv_py313/lib/python3.13/site-packages/pydantic/fields.py", "lineno": 1076}, {"message": "Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'env'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/venv_py313/lib/python3.13/site-packages/pydantic/fields.py", "lineno": 1076}, {"message": "Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'env'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/venv_py313/lib/python3.13/site-packages/pydantic/fields.py", "lineno": 1076}, {"message": "Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'env'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/venv_py313/lib/python3.13/site-packages/pydantic/fields.py", "lineno": 1076}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/core/config.py", "lineno": 68}, {"message": "Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'env'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/venv_py313/lib/python3.13/site-packages/pydantic/fields.py", "lineno": 1076}, {"message": "Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'env'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/venv_py313/lib/python3.13/site-packages/pydantic/fields.py", "lineno": 1076}, {"message": "Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'env'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/venv_py313/lib/python3.13/site-packages/pydantic/fields.py", "lineno": 1076}, {"message": "Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'env'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/venv_py313/lib/python3.13/site-packages/pydantic/fields.py", "lineno": 1076}, {"message": "Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/venv_py313/lib/python3.13/site-packages/pydantic/_internal/_config.py", "lineno": 323}]}