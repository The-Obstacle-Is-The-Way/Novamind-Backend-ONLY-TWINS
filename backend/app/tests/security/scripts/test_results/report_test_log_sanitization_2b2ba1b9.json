{"created": 1744671634.208769, "duration": 0.05114293098449707, "exitcode": 1, "root": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend", "environment": {}, "summary": {"failed": 8, "passed": 1, "total": 9, "collected": 9}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "app/tests/security/phi/test_log_sanitization.py", "type": "Module"}]}, {"nodeid": "app/tests/security/phi/test_log_sanitization.py::TestLogSanitization", "outcome": "passed", "result": [{"nodeid": "app/tests/security/phi/test_log_sanitization.py::TestLogSanitization::test_sanitizer_initialization", "type": "Function", "lineno": 52}, {"nodeid": "app/tests/security/phi/test_log_sanitization.py::TestLogSanitization::test_ssn_sanitization", "type": "Function", "lineno": 58}, {"nodeid": "app/tests/security/phi/test_log_sanitization.py::TestLogSanitization::test_email_sanitization", "type": "Function", "lineno": 66}, {"nodeid": "app/tests/security/phi/test_log_sanitization.py::TestLogSanitization::test_phone_sanitization", "type": "Function", "lineno": 74}, {"nodeid": "app/tests/security/phi/test_log_sanitization.py::TestLogSanitization::test_name_sanitization", "type": "Function", "lineno": 82}, {"nodeid": "app/tests/security/phi/test_log_sanitization.py::TestLogSanitization::test_multiple_phi_sanitization", "type": "Function", "lineno": 90}, {"nodeid": "app/tests/security/phi/test_log_sanitization.py::TestLogSanitization::test_sanitizer_integration_with_logger", "type": "Function", "lineno": 106}, {"nodeid": "app/tests/security/phi/test_log_sanitization.py::TestLogSanitization::test_phi_never_reaches_logs", "type": "Function", "lineno": 127}, {"nodeid": "app/tests/security/phi/test_log_sanitization.py::TestLogSanitization::test_sanitization_performance", "type": "Function", "lineno": 161}]}, {"nodeid": "app/tests/security/phi/test_log_sanitization.py", "outcome": "passed", "result": [{"nodeid": "app/tests/security/phi/test_log_sanitization.py::TestLogSanitization", "type": "Class"}]}], "tests": [{"nodeid": "app/tests/security/phi/test_log_sanitization.py::TestLogSanitization::test_sanitizer_initialization", "lineno": 52, "outcome": "failed", "keywords": ["test_sanitizer_initialization", "TestLogSanitization", "test_log_sanitization.py", "phi", "security", "tests", "app", "backend", ""], "setup": {"duration": 0.0013219170505180955, "outcome": "passed", "stdout": "Loaded test environment variables from: /Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/.env.test\n"}, "call": {"duration": 0.00013820797903463244, "outcome": "failed", "crash": {"path": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/tests/security/phi/test_log_sanitization.py", "lineno": 56, "message": "AssertionError: assert False\n +  where False = hasattr(<app.core.security.phi_sanitizer.PHISanitizer object at 0x104995550>, 'patterns')"}, "traceback": [{"path": "phi/test_log_sanitization.py", "lineno": 56, "message": "AssertionError"}], "longrepr": "self = <test_log_sanitization.TestLogSanitization object at 0x1048dad50>\n\n    def test_sanitizer_initialization(self):\n        \"\"\"Test that the PHI sanitizer properly initializes patterns.\"\"\"\n        sanitizer = PHISanitizer()\n>       assert hasattr(sanitizer, 'patterns')\nE       AssertionError: assert False\nE        +  where False = hasattr(<app.core.security.phi_sanitizer.PHISanitizer object at 0x104995550>, 'patterns')\n\nphi/test_log_sanitization.py:56: AssertionError"}, "teardown": {"duration": 7.929099956527352e-05, "outcome": "passed"}}, {"nodeid": "app/tests/security/phi/test_log_sanitization.py::TestLogSanitization::test_ssn_sanitization", "lineno": 58, "outcome": "failed", "keywords": ["test_ssn_sanitization", "TestLogSanitization", "test_log_sanitization.py", "phi", "security", "tests", "app", "backend", ""], "setup": {"duration": 7.083301898092031e-05, "outcome": "passed"}, "call": {"duration": 0.00011399999493733048, "outcome": "failed", "crash": {"path": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/tests/security/phi/test_log_sanitization.py", "lineno": 65, "message": "AssertionError: assert '[REDACTED-SSN]' in 'Patient SSN is [REDACTED SSN]'"}, "traceback": [{"path": "phi/test_log_sanitization.py", "lineno": 65, "message": "AssertionError"}], "longrepr": "self = <test_log_sanitization.TestLogSanitization object at 0x1048db110>\n\n    def test_ssn_sanitization(self):\n        \"\"\"Test that SSNs are properly sanitized.\"\"\"\n        sanitizer = PHISanitizer()\n        test_log = \"Patient SSN is 123-45-6789\"\n        sanitized = sanitizer.sanitize(test_log)\n        assert \"123-45-6789\" not in sanitized\n>       assert \"[REDACTED-SSN]\" in sanitized\nE       AssertionError: assert '[REDACTED-SSN]' in 'Patient SSN is [REDACTED SSN]'\n\nphi/test_log_sanitization.py:65: AssertionError"}, "teardown": {"duration": 0.00010929099516943097, "outcome": "passed"}}, {"nodeid": "app/tests/security/phi/test_log_sanitization.py::TestLogSanitization::test_email_sanitization", "lineno": 66, "outcome": "failed", "keywords": ["test_email_sanitization", "TestLogSanitization", "test_log_sanitization.py", "phi", "security", "tests", "app", "backend", ""], "setup": {"duration": 8.25420138426125e-05, "outcome": "passed"}, "call": {"duration": 0.00012033304665237665, "outcome": "failed", "crash": {"path": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/tests/security/phi/test_log_sanitization.py", "lineno": 73, "message": "AssertionError: assert '[REDACTED-EMAIL]' in 'Patient email is [REDACTED EMAIL]'"}, "traceback": [{"path": "phi/test_log_sanitization.py", "lineno": 73, "message": "AssertionError"}], "longrepr": "self = <test_log_sanitization.TestLogSanitization object at 0x1049c89d0>\n\n    def test_email_sanitization(self):\n        \"\"\"Test that email addresses are properly sanitized.\"\"\"\n        sanitizer = PHISanitizer()\n        test_log = \"Patient email is patient@example.com\"\n        sanitized = sanitizer.sanitize(test_log)\n        assert \"patient@example.com\" not in sanitized\n>       assert \"[REDACTED-EMAIL]\" in sanitized\nE       AssertionError: assert '[REDACTED-EMAIL]' in 'Patient email is [REDACTED EMAIL]'\n\nphi/test_log_sanitization.py:73: AssertionError"}, "teardown": {"duration": 5.82499778829515e-05, "outcome": "passed"}}, {"nodeid": "app/tests/security/phi/test_log_sanitization.py::TestLogSanitization::test_phone_sanitization", "lineno": 74, "outcome": "failed", "keywords": ["test_phone_sanitization", "TestLogSanitization", "test_log_sanitization.py", "phi", "security", "tests", "app", "backend", ""], "setup": {"duration": 6.570800906047225e-05, "outcome": "passed"}, "call": {"duration": 9.92499990388751e-05, "outcome": "failed", "crash": {"path": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/tests/security/phi/test_log_sanitization.py", "lineno": 81, "message": "AssertionError: assert '[REDACTED-PHONE]' in 'Patient phone is ([REDACTED PHONE]'"}, "traceback": [{"path": "phi/test_log_sanitization.py", "lineno": 81, "message": "AssertionError"}], "longrepr": "self = <test_log_sanitization.TestLogSanitization object at 0x1049c8c30>\n\n    def test_phone_sanitization(self):\n        \"\"\"Test that phone numbers are properly sanitized.\"\"\"\n        sanitizer = PHISanitizer()\n        test_log = \"Patient phone is (555) 123-4567\"\n        sanitized = sanitizer.sanitize(test_log)\n        assert \"(555) 123-4567\" not in sanitized\n>       assert \"[REDACTED-PHONE]\" in sanitized\nE       AssertionError: assert '[REDACTED-PHONE]' in 'Patient phone is ([REDACTED PHONE]'\n\nphi/test_log_sanitization.py:81: AssertionError"}, "teardown": {"duration": 6.087496876716614e-05, "outcome": "passed"}}, {"nodeid": "app/tests/security/phi/test_log_sanitization.py::TestLogSanitization::test_name_sanitization", "lineno": 82, "outcome": "failed", "keywords": ["test_name_sanitization", "TestLogSanitization", "test_log_sanitization.py", "phi", "security", "tests", "app", "backend", ""], "setup": {"duration": 6.404198938980699e-05, "outcome": "passed"}, "call": {"duration": 9.395804954692721e-05, "outcome": "failed", "crash": {"path": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/tests/security/phi/test_log_sanitization.py", "lineno": 89, "message": "AssertionError: assert '[REDACTED-NAME]' in 'Patient name is [REDACTED NAME]'"}, "traceback": [{"path": "phi/test_log_sanitization.py", "lineno": 89, "message": "AssertionError"}], "longrepr": "self = <test_log_sanitization.TestLogSanitization object at 0x1049b3ad0>\n\n    def test_name_sanitization(self):\n        \"\"\"Test that names are properly sanitized.\"\"\"\n        sanitizer = PHISanitizer()\n        test_log = \"Patient name is John Smith\"\n        sanitized = sanitizer.sanitize(test_log)\n        assert \"John Smith\" not in sanitized\n>       assert \"[REDACTED-NAME]\" in sanitized\nE       AssertionError: assert '[REDACTED-NAME]' in 'Patient name is [REDACTED NAME]'\n\nphi/test_log_sanitization.py:89: AssertionError"}, "teardown": {"duration": 5.212501855567098e-05, "outcome": "passed"}}, {"nodeid": "app/tests/security/phi/test_log_sanitization.py::TestLogSanitization::test_multiple_phi_sanitization", "lineno": 90, "outcome": "failed", "keywords": ["test_multiple_phi_sanitization", "TestLogSanitization", "test_log_sanitization.py", "phi", "security", "tests", "app", "backend", ""], "setup": {"duration": 6.45840191282332e-05, "outcome": "passed"}, "call": {"duration": 0.00010579102672636509, "outcome": "failed", "crash": {"path": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/tests/security/phi/test_log_sanitization.py", "lineno": 102, "message": "AssertionError: assert '[REDACTED-NAME]' in '[REDACTED NAME] (SSN: [REDACTED SSN]) can be reached at ([REDACTED PHONE] or [REDACTED EMAIL]'"}, "traceback": [{"path": "phi/test_log_sanitization.py", "lineno": 102, "message": "AssertionError"}], "longrepr": "self = <test_log_sanitization.TestLogSanitization object at 0x104989480>\n\n    def test_multiple_phi_sanitization(self):\n        \"\"\"Test that multiple PHI elements in the same log are all sanitized.\"\"\"\n        sanitizer = PHISanitizer()\n        test_log = \"Patient John Smith (SSN: 123-45-6789) can be reached at (555) 123-4567 or john.smith@example.com\"\n        sanitized = sanitizer.sanitize(test_log)\n    \n        assert \"John Smith\" not in sanitized\n        assert \"123-45-6789\" not in sanitized\n        assert \"(555) 123-4567\" not in sanitized\n        assert \"john.smith@example.com\" not in sanitized\n    \n>       assert \"[REDACTED-NAME]\" in sanitized\nE       AssertionError: assert '[REDACTED-NAME]' in '[REDACTED NAME] (SSN: [REDACTED SSN]) can be reached at ([REDACTED PHONE] or [REDACTED EMAIL]'\n\nphi/test_log_sanitization.py:102: AssertionError"}, "teardown": {"duration": 4.916597390547395e-05, "outcome": "passed"}}, {"nodeid": "app/tests/security/phi/test_log_sanitization.py::TestLogSanitization::test_sanitizer_integration_with_logger", "lineno": 106, "outcome": "failed", "keywords": ["test_sanitizer_integration_with_logger", "TestLogSanitization", "test_log_sanitization.py", "phi", "security", "tests", "app", "backend", ""], "setup": {"duration": 0.0003347080200910568, "outcome": "passed"}, "call": {"duration": 0.0006435000104829669, "outcome": "failed", "crash": {"path": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/tests/security/phi/test_log_sanitization.py", "lineno": 121, "message": "AssertionError: assert False\n +  where False = <MagicMock name='mock.sanitize' id='4372129712'>.called\n +    where <MagicMock name='mock.sanitize' id='4372129712'> = <MagicMock id='4372125008'>.sanitize"}, "traceback": [{"path": "phi/test_log_sanitization.py", "lineno": 121, "message": "AssertionError"}], "log": [{"name": "test_phi_logger", "msg": "Patient John Doe with SSN 123-45-6789 has updated their contact info to john.doe@example.com", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/tests/security/phi/test_log_sanitization.py", "filename": "test_log_sanitization.py", "module": "test_log_sanitization", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 118, "funcName": "test_sanitizer_integration_with_logger", "created": 1744671634.197721, "msecs": 197.0, "relativeCreated": 123.147, "thread": 8631733312, "threadName": "MainThread", "processName": "MainProcess", "process": 31114, "taskName": null, "asctime": "2025-04-14 19:00:34"}], "longrepr": "self = <test_log_sanitization.TestLogSanitization object at 0x1049896a0>\nlogger_setup = (<Logger test_phi_logger (DEBUG)>, '/var/folders/3p/t86zsht91l3gsdpddkqg_kfh0000gn/T/tmpiy5tpsgb.log')\n\n    def test_sanitizer_integration_with_logger(self, logger_setup):\n        \"\"\"Test the sanitizer's integration with the logging system.\"\"\"\n        logger, log_file = logger_setup\n    \n        # Mock the sanitizer to check it's being called\n        mock_sanitizer = MagicMock()\n        mock_sanitizer.sanitize.return_value = \"SANITIZED LOG MESSAGE\"\n    \n        # Patch the sanitizer in the logging system\n        with patch('app.core.security.phi_sanitizer.PHISanitizer', return_value=mock_sanitizer):\n            # Create a log message with PHI\n            logger.info(\"Patient John Doe with SSN 123-45-6789 has updated their contact info to john.doe@example.com\")\n    \n            # Check that the sanitizer was called\n>           assert mock_sanitizer.sanitize.called\nE           AssertionError: assert False\nE            +  where False = <MagicMock name='mock.sanitize' id='4372129712'>.called\nE            +    where <MagicMock name='mock.sanitize' id='4372129712'> = <MagicMock id='4372125008'>.sanitize\n\nphi/test_log_sanitization.py:121: AssertionError"}, "teardown": {"duration": 0.00017733301501721144, "outcome": "passed"}}, {"nodeid": "app/tests/security/phi/test_log_sanitization.py::TestLogSanitization::test_phi_never_reaches_logs", "lineno": 127, "outcome": "failed", "keywords": ["test_phi_never_reaches_logs", "TestLogSanitization", "test_log_sanitization.py", "phi", "security", "tests", "app", "backend", ""], "setup": {"duration": 0.0002959999837912619, "outcome": "passed"}, "call": {"duration": 9.216699982061982e-05, "outcome": "failed", "crash": {"path": "/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/venv_py313/lib/python3.13/site-packages/_pytest/monkeypatch.py", "lineno": 92, "message": "AttributeError: 'module' object at app.core.security.phi_sanitizer has no attribute 'get_sanitizer'"}, "traceback": [{"path": "phi/test_log_sanitization.py", "lineno": 134, "message": ""}, {"path": "../../../../venv_py313/lib/python3.13/site-packages/_pytest/monkeypatch.py", "lineno": 104, "message": "in derive_importpath"}, {"path": "../../../../venv_py313/lib/python3.13/site-packages/_pytest/monkeypatch.py", "lineno": 92, "message": "AttributeError"}], "longrepr": "obj = <module 'app.core.security.phi_sanitizer' from '/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/core/security/phi_sanitizer.py'>\nname = 'get_sanitizer', ann = 'app.core.security.phi_sanitizer'\n\n    def annotated_getattr(obj: object, name: str, ann: str) -> object:\n        try:\n>           obj = getattr(obj, name)\nE           AttributeError: module 'app.core.security.phi_sanitizer' has no attribute 'get_sanitizer'. Did you mean: 'PHISanitizer'?\n\n../../../../venv_py313/lib/python3.13/site-packages/_pytest/monkeypatch.py:90: AttributeError\n\nThe above exception was the direct cause of the following exception:\n\nself = <test_log_sanitization.TestLogSanitization object at 0x104972850>\nlogger_setup = (<Logger test_phi_logger (DEBUG)>, '/var/folders/3p/t86zsht91l3gsdpddkqg_kfh0000gn/T/tmpdl0emajr.log')\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x1049c9cd0>\n\n    def test_phi_never_reaches_logs(self, logger_setup, monkeypatch):\n        \"\"\"End-to-end test ensuring PHI doesn't make it to logs.\"\"\"\n        # Set up a real sanitizer that will be used by the logging system\n        real_sanitizer = PHISanitizer()\n    \n        # Patch the system to use our real sanitizer\n>       monkeypatch.setattr(\n            'app.core.security.phi_sanitizer.get_sanitizer',\n            lambda: real_sanitizer\n        )\n\nphi/test_log_sanitization.py:134: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../../venv_py313/lib/python3.13/site-packages/_pytest/monkeypatch.py:104: in derive_importpath\n    annotated_getattr(target, attr, ann=module)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nobj = <module 'app.core.security.phi_sanitizer' from '/Users/ray/Desktop/GITHUB/Novamind-Backend-ONLY-TWINS/backend/app/core/security/phi_sanitizer.py'>\nname = 'get_sanitizer', ann = 'app.core.security.phi_sanitizer'\n\n    def annotated_getattr(obj: object, name: str, ann: str) -> object:\n        try:\n            obj = getattr(obj, name)\n        except AttributeError as e:\n>           raise AttributeError(\n                f\"{type(obj).__name__!r} object at {ann} has no attribute {name!r}\"\n            ) from e\nE           AttributeError: 'module' object at app.core.security.phi_sanitizer has no attribute 'get_sanitizer'\n\n../../../../venv_py313/lib/python3.13/site-packages/_pytest/monkeypatch.py:92: AttributeError"}, "teardown": {"duration": 0.00012279103975743055, "outcome": "passed"}}, {"nodeid": "app/tests/security/phi/test_log_sanitization.py::TestLogSanitization::test_sanitization_performance", "lineno": 161, "outcome": "passed", "keywords": ["test_sanitization_performance", "TestLogSanitization", "test_log_sanitization.py", "phi", "security", "tests", "app", "backend", ""], "setup": {"duration": 6.737501826137304e-05, "outcome": "passed"}, "call": {"duration": 0.0004908749833703041, "outcome": "passed"}, "teardown": {"duration": 7.925002137199044e-05, "outcome": "passed"}}]}