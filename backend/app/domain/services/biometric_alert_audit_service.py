"""
Biometric Alert Audit Service for the Digital Twin Psychiatry Platform.

This service manages the audit trail for biometric alerts, ensuring
comprehensive records are maintained for regulatory compliance and
clinical oversight.
"""

from abc import ABC, abstractmethod
from datetime import datetime
from app.domain.utils.datetime_utils import UTC
from typing import Any, Optional
from uuid import UUID

# Import only BiometricAlert
from app.domain.services.biometric_event_processor import BiometricAlert
from app.domain.interfaces.alert_observer import AlertObserver
from app.domain.repositories.biometric_alert_repository import BiometricAlertRepository


class BiometricAlertAuditService(AlertObserver):
    """
    Service for maintaining a comprehensive audit trail of biometric alerts.
    
    Listens for new alerts and logs acknowledgement events.
    """
    
    def __init__(
        self,
        alert_repository: BiometricAlertRepository,
        audit_logger: Any  # This would be a concrete audit logging service
    ) -> None:
        """
        Initialize the BiometricAlertAuditService.
        
        Args:
            alert_repository: Repository for storing and retrieving alerts
            audit_logger: Service for logging audit events
        """
        self.alert_repository = alert_repository
        self.audit_logger = audit_logger
    
    async def notify_alert(self, alert: BiometricAlert) -> None:
        """
        Create an audit record for a new biometric alert.
        
        Called by the BiometricEventProcessor when a new alert is generated.
        
        Args:
            alert: The biometric alert to audit
        """
        await self._create_alert_audit_record(
            alert,
            "alert_generated",
            "Biometric alert generated by system"
        )
    
    async def record_alert_acknowledgment(
        self,
        alert_id: UUID | str,
        provider_id: UUID,
        notes: str | None = None
    ) -> None:
        """
        Record the acknowledgment of an alert in the audit trail.
        
        NOTE: This method ONLY logs the event. The alert state itself
        should be updated via BiometricAlert.acknowledge() BEFORE calling this.
        
        Args:
            alert_id: ID of the acknowledged alert
            provider_id: ID of the provider who acknowledged the alert
            notes: Optional notes about the acknowledgment
        """
        # Get the alert to retrieve associated info like patient_id
        alert = await self.alert_repository.get_by_id(alert_id)
        if not alert:
            # Log or raise an error if alert not found for auditing?
            print(f"Warning: Alert {alert_id} not found for acknowledgement audit.")
            return
        
        # DO NOT update status via repository here.
        # Status update happens on the BiometricAlert object itself.
        
        # Create an audit record for the acknowledgement
        await self._create_alert_audit_record(
            alert, # Pass the fetched alert
            "alert_acknowledged",
            f"Alert acknowledged by provider {provider_id}",
            provider_id,
            notes
        )
    
    async def _create_alert_audit_record(
        self,
        alert: BiometricAlert,
        event_type: str,
        event_description: str,
        actor_id: UUID | None = None,
        notes: str | None = None,
        additional_data: dict[str, Any] | None = None
    ) -> None:
        """
        Create an audit record for an alert event.
        
        Args:
            alert: The biometric alert
            event_type: Type of event (e.g., "alert_generated", "alert_acknowledged")
            event_description: Description of the event
            actor_id: Optional ID of the user who performed the action
            notes: Optional notes about the event
            additional_data: Optional additional data about the event
        """
        # Create a sanitized version of the alert data for the audit record
        sanitized_alert_data = {
            "alert_id": str(alert.alert_id),
            # "alert_type": alert.alert_type, # alert_type not on BiometricAlert class
            "rule_id": alert.rule_id,
            "rule_name": alert.rule_name,
            "priority": alert.priority.value,
            "acknowledged": alert.acknowledged, # Use boolean acknowledged field
            "created_at": alert.created_at.isoformat(),
            "acknowledged_at": alert.acknowledged_at.isoformat() if alert.acknowledged_at else None,
            "acknowledged_by": str(alert.acknowledged_by) if alert.acknowledged_by else None,
            # Potentially add data_point timestamp or type if safe and useful
            # "data_point_timestamp": alert.data_point.timestamp.isoformat() if alert.data_point else None,
            # "data_point_type": alert.data_point.data_type if alert.data_point else None,
        }
        
        log_data = {"alert": sanitized_alert_data}
        if additional_data:
            log_data.update(additional_data)

        await self.audit_logger.log_event(
            event_type=event_type,
            event_description=event_description,
            resource_type="biometric_alert",
            resource_id=str(alert.alert_id),
            actor_id=str(actor_id) if actor_id else None,
            patient_id=str(alert.patient_id),
            timestamp=datetime.now(UTC),
            notes=notes,
            data=log_data
        )
    
    async def search_audit_trail(
        self,
        patient_id: UUID | None = None,
        alert_id: UUID | None = None,
        provider_id: UUID | None = None,
        event_type: str | None = None,
        start_date: datetime | None = None,
        end_date: datetime | None = None,
        limit: int = 100,
        offset: int = 0
    ) -> list[dict[str, Any]]:
        """
        Search the audit trail for biometric alert events.
        
        Args:
            patient_id: Optional patient ID to filter by
            alert_id: Optional alert ID to filter by
            provider_id: Optional provider ID to filter by
            event_type: Optional event type to filter by
            start_date: Optional start date for filtering
            end_date: Optional end date for filtering
            limit: Maximum number of records to return
            offset: Number of records to skip for pagination
            
        Returns:
            List of audit records matching the criteria
        """
        # Build the search criteria
        criteria = {}
        
        if patient_id:
            criteria["patient_id"] = str(patient_id)
        
        if alert_id:
            criteria["resource_id"] = str(alert_id)
            criteria["resource_type"] = "biometric_alert"
        
        if provider_id:
            criteria["actor_id"] = str(provider_id)
        
        if event_type:
            criteria["event_type"] = event_type
        
        # Add date range filters
        if start_date:
            criteria["start_date"] = start_date
        
        if end_date:
            criteria["end_date"] = end_date
        
        # Search the audit logs
        return await self.audit_logger.search_events(
            criteria=criteria,
            limit=limit,
            offset=offset
        )