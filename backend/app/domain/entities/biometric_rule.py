"""
Domain entities related to Biometric Rules for the Digital Twin.
"""
from dataclasses import dataclass, field
from datetime import datetime
from enum import Enum
from typing import List, Any, Optional
from uuid import UUID, uuid4


class AlertPriority(Enum):
    """Priority levels for alerts generated by rules."""
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"


class RuleOperator(Enum):
    """Operators for comparing biometric data in rule conditions."""
    GREATER_THAN = ">"
    LESS_THAN = "<"
    EQUAL_TO = "=="
    NOT_EQUAL_TO = "!="
    GREATER_THAN_OR_EQUAL_TO = ">="
    LESS_THAN_OR_EQUAL_TO = "<="
    # Add more complex operators as needed (e.g., change over time)


class LogicalOperator(Enum):
    """Logical operators to combine multiple rule conditions."""
    AND = "AND"
    OR = "OR"


@dataclass
class RuleCondition:
    """Represents a single condition within a biometric rule."""
    metric_name: str  # e.g., 'heart_rate', 'phq9_score'
    operator: RuleOperator
    threshold_value: Any  # Can be numeric, string, etc. depending on metric
    # Optional: Add window for time-based conditions (e.g., average over last 24h)
    # time_window_hours: Optional[int] = None


@dataclass
class BiometricRule:
    """Represents a clinical rule based on biometric data."""
    name: str
    id: UUID = field(default_factory=uuid4)
    description: Optional[str] = None
    patient_id: Optional[UUID] = None  # Null for global rules
    provider_id: Optional[UUID] = None # Who created/manages the rule
    is_active: bool = True
    priority: AlertPriority = AlertPriority.MEDIUM
    conditions: List[RuleCondition] = field(default_factory=list)
    logical_operator: LogicalOperator = LogicalOperator.AND # How to combine conditions
    # Optional: Add actions to take when rule triggers
    # actions: List[RuleAction] = field(default_factory=list)
    created_at: datetime = field(default_factory=datetime.utcnow)
    last_updated: datetime = field(default_factory=datetime.utcnow)
    version: int = 1

    def touch(self):
        """Update the last_updated timestamp and version."""
        self.last_updated = datetime.utcnow()
        self.version += 1 