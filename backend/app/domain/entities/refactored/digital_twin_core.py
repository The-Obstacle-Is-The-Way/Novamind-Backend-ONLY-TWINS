"""
Core domain entities for the Digital Twin system.
Pure domain models with no external dependencies.
Refactored to remove EHR dependencies and focus on the Digital Twin trinity.

This module contains all core entities used by the "Trinity Stack":
- MentalLLaMA-33B: Advanced language model
- XGBoost Prediction Engine: Machine learning prediction system
- PAT: Pretrained Actigraphy Transformer

All classes are designed to be immutable data structures with clean interfaces.
"""
from dataclasses import dataclass, field
from datetime import datetime
from enum import Enum
from typing import Dict, List, Optional, Set, Union
from uuid import UUID, uuid4


class BrainRegion(Enum):
    """Brain regions of interest for the Digital Twin."""
    PREFRONTAL_CORTEX = "prefrontal_cortex"
    ANTERIOR_CINGULATE = "anterior_cingulate"
    AMYGDALA = "amygdala"
    HIPPOCAMPUS = "hippocampus"
    NUCLEUS_ACCUMBENS = "nucleus_accumbens"
    VENTRAL_TEGMENTAL = "ventral_tegmental"
    HYPOTHALAMUS = "hypothalamus"
    INSULA = "insula"
    ORBITOFRONTAL_CORTEX = "orbitofrontal_cortex"
    DORSOLATERAL_PREFRONTAL = "dorsolateral_prefrontal"


class Neurotransmitter(Enum):
    """Key neurotransmitters tracked in the Digital Twin."""
    SEROTONIN = "serotonin"
    DOPAMINE = "dopamine"
    NOREPINEPHRINE = "norepinephrine"
    GABA = "gaba"
    GLUTAMATE = "glutamate"


class ClinicalSignificance(Enum):
    """Clinical significance levels for insights and changes."""
    NONE = "none"
    LOW = "low"
    MODERATE = "moderate"
    HIGH = "high"
    CRITICAL = "critical"


@dataclass
class BrainRegionState:
    """
    State of a specific brain region in the Digital Twin.
    Represents activation level and significance of a brain region.
    """
    region: BrainRegion
    activation_level: float  # 0.0 to 1.0
    confidence: float  # 0.0 to 1.0
    related_symptoms: List[str] = field(default_factory=list)
    clinical_significance: ClinicalSignificance = ClinicalSignificance.NONE


@dataclass
class NeurotransmitterState:
    """
    State of a specific neurotransmitter in the Digital Twin.
    Represents level and significance of a neurotransmitter.
    """
    neurotransmitter: Neurotransmitter
    level: float  # 0.0 to 1.0
    confidence: float  # 0.0 to 1.0
    clinical_significance: ClinicalSignificance = ClinicalSignificance.NONE


@dataclass
class NeuralConnection:
    """
    Connection between brain regions in the Digital Twin.
    Represents strength and confidence of neural pathway.
    """
    source_region: BrainRegion
    target_region: BrainRegion
    strength: float  # 0.0 to 1.0
    confidence: float  # 0.0 to 1.0


@dataclass
class ClinicalInsight:
    """
    Clinical insight derived from Digital Twin analysis.
    Generated by one of the Trinity components or system integration.
    """
    id: UUID
    title: str
    description: str
    source: str  # e.g., "PAT", "MentalLLaMA", "XGBoost"
    confidence: float  # 0.0 to 1.0
    timestamp: datetime
    clinical_significance: ClinicalSignificance
    brain_regions: List[BrainRegion] = field(default_factory=list)
    neurotransmitters: List[Neurotransmitter] = field(default_factory=list)
    supporting_evidence: List[str] = field(default_factory=list)
    recommended_actions: List[str] = field(default_factory=list)
    
    @classmethod
    def create(cls, 
               title: str, 
               description: str, 
               source: str,
               confidence: float, 
               clinical_significance: ClinicalSignificance,
               brain_regions: Optional[List[BrainRegion]] = None,
               neurotransmitters: Optional[List[Neurotransmitter]] = None,
               supporting_evidence: Optional[List[str]] = None,
               recommended_actions: Optional[List[str]] = None) -> "ClinicalInsight":
        """Factory method to create a new ClinicalInsight with generated ID and timestamp."""
        return cls(
            id=uuid4(),
            title=title,
            description=description,
            source=source,
            confidence=confidence,
            timestamp=datetime.now(),
            clinical_significance=clinical_significance,
            brain_regions=brain_regions or [],
            neurotransmitters=neurotransmitters or [],
            supporting_evidence=supporting_evidence or [],
            recommended_actions=recommended_actions or []
        )


@dataclass
class TemporalPattern:
    """
    Temporal pattern detected in Digital Twin data.
    Represents cyclical or progressive patterns in mental health.
    """
    pattern_type: str  # e.g., "circadian", "weekly", "seasonal" 
    description: str
    confidence: float
    strength: float
    clinical_significance: ClinicalSignificance


@dataclass
class DigitalTwinState:
    """
    Core representation of the Digital Twin state.
    Comprehensive snapshot of a subject's mental health model.
    """
    # Reference ID only - not tightly coupled to patient records
    reference_id: UUID  
    timestamp: datetime
    brain_regions: Dict[BrainRegion, BrainRegionState] = field(default_factory=dict)
    neurotransmitters: Dict[Neurotransmitter, NeurotransmitterState] = field(default_factory=dict)
    neural_connections: List[NeuralConnection] = field(default_factory=list)
    clinical_insights: List[ClinicalInsight] = field(default_factory=list)
    temporal_patterns: List[TemporalPattern] = field(default_factory=list)
    update_source: Optional[str] = None
    version: int = 1
    state_id: UUID = field(default_factory=uuid4)
    
    @property
    def significant_regions(self) -> List[BrainRegionState]:
        """Return brain regions with clinical significance above NONE."""
        return [
            region for region in self.brain_regions.values()
            if region.clinical_significance != ClinicalSignificance.NONE
        ]
    
    @property
    def critical_insights(self) -> List[ClinicalInsight]:
        """Return insights with HIGH or CRITICAL significance."""
        return [
            insight for insight in self.clinical_insights
            if insight.clinical_significance in [
                ClinicalSignificance.HIGH, ClinicalSignificance.CRITICAL
            ]
        ]
    
    def generate_fingerprint(self) -> str:
        """Generate a unique fingerprint for this state for verification."""
        # Implementation would create a hash based on key properties
        return f"{self.reference_id}:{self.timestamp}:{self.version}:{self.state_id}"
    
    @classmethod
    def create_initial(cls, reference_id: UUID) -> "DigitalTwinState":
        """Factory method to create a new initial DigitalTwinState."""
        return cls(
            reference_id=reference_id,
            timestamp=datetime.now()
        )