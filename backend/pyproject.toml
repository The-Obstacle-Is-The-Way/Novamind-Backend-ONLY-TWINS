[tool.ruff]
# Enable flake8-bugbear (`B`) rules.
select = ["E", "F", "B", "I", "N", "UP", "ANN", "S", "A", "C4", "PTH", "RUF"]
ignore = ["ANN101", "ANN102", "ANN204"]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "alembic",
]

# Same as Black.
line-length = 100
indent-width = 4

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.10.
target-version = "py310"

[tool.ruff.per-file-ignores]
# Tests can use assert
"**/tests/**/*.py" = ["S101"]
# Migrations can use print and don't need docstrings
"**/migrations/**/*.py" = ["T201", "D"]

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.isort]
known-third-party = ["fastapi", "pydantic", "sqlalchemy", "pytest"]

[tool.ruff.flake8-bugbear]
extend-immutable-calls = ["fastapi.Depends", "fastapi.Query", "fastapi.Path", "fastapi.Body"]

[tool.pytest.ini_options]
testpaths = ["app/tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
markers = [
    "standalone: tests that can run with no external dependencies",
    "unit: tests that require Python packages but no external services",
    "integration: tests that require database connections",
    "e2e: end-to-end tests that test the full system",
    "security: tests that validate security features",
    "slow: tests that take a long time to run",
    "db_required: tests that require a database connection",
    "venv_only: tests that require Python packages but no external services",
]

asyncio_mode = "strict"
addopts = "--strict-markers --cov=app --cov-report=term"
